[
  {
    "proctor_verdict": "Severe", 
    "code": "import pandas as pd\nimport numpy as np\n\n\n\n\ndef additionalID(array_1, array_2):\n    # Write your code here and Return the Numpy Array\n    set_array_1 = set(array_1)\n\n    additional_ids=[]\n\n    for id_val in array_2:\n        if id_val not in set_array_1:\n            additional_ids.append(id_val)\n\n    additional_ids.sort()\n\n    return np.array(additional_ids)\n    \nif __name__ == '__main__':\n    ls1 = np.array(list(map(int,input().split())))\n    ls2 = np.array(list(map(int,input().split())))\n    ans = additionalID(ls1, ls2)\n    ans = list(ans.tolist());\n    ans.sort()\n    print(*ans,sep=\" \")", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Find the odd man out", 
    "full_name": "Mahathee", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 5, 
      "solution_id": 228065486, 
      "score": 5.0, 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "evaluation_ended": "2025-07-30T10:47:49Z", 
      "testcases_passed": 5, 
      "queue": "code-eval", 
      "testcases": {
        "573861": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #2", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 573861, 
          "memory_usage": "63MB"
        }, 
        "573860": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 0, 
          "expected_output": "2 5 6", 
          "cputime": "0s", 
          "name": "Testcase #1", 
          "is_sample": true, 
          "output": "", 
          "input": "1 4 7 3\n1 2 3 4 5 6 7", 
          "running_time": "0.00s", 
          "id": 573860, 
          "memory_usage": "63MB"
        }, 
        "2158098": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #4", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2158098, 
          "memory_usage": "61MB"
        }, 
        "2158103": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #5", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2158103, 
          "memory_usage": "62MB"
        }, 
        "573864": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #3", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 573864, 
          "memory_usage": "63MB"
        }
      }, 
      "assessment_id": 0, 
      "evaluation_started": "2025-07-30T10:47:45Z", 
      "sid": "SCR:2025-07-30:e185ef58-33f1-4481-9e70-761537c14d20", 
      "tid": "7a9f9618fb7dfd388ae1df066580615b", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "mahatheep.penugonda@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Predicting Cyber Attack Incidents", 
    "full_name": "Yashi Tiwari", 
    "run_details": {}, 
    "jupyter_data": {
      "Questions.ipynb": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/84pl8m6a/Questions.ipynb"
      }, 
      "output.csv": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/84pl8m6a/output.csv"
      }, 
      "jupyter_notebook_access_url": "https://servercreator.doselect.com/djp/user/752d26e27e53543cff1e57744ea6b23a/lab/tree/Predicting Cyber Attack Incidents/Questions.ipynb?token=0083c8350ddb4bb488b9bdf9941d1b6a&reset", 
      "recall": 0.984, 
      "problem_extra_data": {
        "negetive_class": "0", 
        "positive_class": "1", 
        "evaluation_type": "accuracy", 
        "choices": {
          "positive_classes": [
            "0", 
            "1"
          ], 
          "columns": [
            "ID", 
            "INCIDENT_ID", 
            "DATE", 
            "X_1", 
            "X_2", 
            "X_3", 
            "X_4", 
            "X_5", 
            "X_6", 
            "X_7", 
            "X_8", 
            "X_9", 
            "X_10", 
            "X_11", 
            "X_12", 
            "X_13", 
            "X_14", 
            "X_15", 
            "MALICIOUS_OFFENSE"
          ]
        }, 
        "target_column": "MALICIOUS_OFFENSE", 
        "problem_type": "Binary Classification", 
        "id_column": "ID"
      }, 
      "precision": 0.998, 
      "is_ready": false, 
      "user": "752d26e27e53543cff1e57744ea6b23a", 
      "fscore": 0.991, 
      "accuracy": 0.983
    }, 
    "mcq_choice": null, 
    "email": "tiwariyashi15@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'count_word' function below.\n# \n# The function is expected to return an INTEGER ARRAY.\n# The function accepts STRING ARRAY ss as parameter.\n#\n\ndef count_word(ss):\n\treturn[len(word) for word in ss]\n\t\n\t\n\nif __name__ == '__main__':\n\tss_count = int(input().strip())\n\n\tss = []\n\n\tfor _ in range(ss_count):\n\t\tss_item = input()\n\t\tss.append(ss_item)\n\n\tresult = count_word(ss)\n\n\tprint('\\n'.join(map(str, result)))\n", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Word Length", 
    "full_name": "Yashi Tiwari", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 6, 
      "solution_id": 228128464, 
      "sid": "SCR:2025-07-30:9cf067ef-b69f-4d59-bd18-4b001c3ed4b3", 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "assessment_id": 0, 
      "testcases_passed": 6, 
      "queue": "code-eval", 
      "testcases": {
        "1935862": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "116kB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 1935862, 
          "name": "Testcase #6"
        }, 
        "33067": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "7MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33067, 
          "name": "Testcase #2"
        }, 
        "33066": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 0, 
          "expected_output": "3\n3\n5", 
          "memory_usage": "7MB", 
          "cputime": "0s", 
          "is_sample": true, 
          "input": "3\none\ntwo\nthree", 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33066, 
          "name": "Testcase #1"
        }, 
        "33068": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "6MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33068, 
          "name": "Testcase #3"
        }, 
        "1935750": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "6MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 1935750, 
          "name": "Testcase #4"
        }, 
        "1935803": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "7MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 1935803, 
          "name": "Testcase #5"
        }
      }, 
      "score": 5.0, 
      "evaluation_started": "2025-07-30T19:03:54Z", 
      "evaluation_ended": "2025-07-30T19:03:57Z", 
      "tid": "a6c8ed7602ebe7d26bf1ac2a8754b63a", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "tiwariyashi15@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Django: Student Management API", 
    "full_name": "Yashi Tiwari", 
    "run_details": {
      "status": "REJ", 
      "testcases_total": 6, 
      "solution_id": 228125775, 
      "testcases_failed": 6, 
      "total_score": 5.0, 
      "testcases_passed": 0, 
      "testcases": {
        "1": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_create_student>\n\n    def test_create_student(self):\n        student_data = {\n            \"first_name\": \"John\",\n            \"last_name\": \"Doe\",\n            \"date_of_birth\": \"2000-01-01\",\n            \"grade\": 8,\n            \"phone\": \"1234567890\",\n            \"email\": \"john.doe@example.com\"\n        }\n    \n        response = self.client.post('/students', json.dumps(student_data), content_type='application/json')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f98b6f891f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.388", 
          "id": 1, 
          "name": "test_create_student"
        }, 
        "3": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_existing_student>\n\n    def test_get_existing_student(self):\n        student_id = Students.objects.first().id\n        response = self.client.get(f'/students/{student_id}')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:90: AssertionError", 
          "running_time": "0.005", 
          "id": 3, 
          "name": "test_get_existing_student"
        }, 
        "2": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_all_students>\n\n    def test_get_all_students(self):\n        response = self.client.get('/students')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:66: AssertionError", 
          "running_time": "0.005", 
          "id": 2, 
          "name": "test_get_all_students"
        }, 
        "5": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_update_existing_student>\n\n    def test_update_existing_student(self):\n        updated_data = {\n            \"first_name\": \"Alice_updated\",\n            \"last_name\": \"Smith_updated\",\n            \"date_of_birth\": \"1998-05-16\",\n            \"grade\": 11,\n            \"phone\": \"1234567899\",\n            \"email\": \"alice.updated@example.com\"\n        }\n        student_id = Students.objects.first().id\n        response = self.client.patch(f'/students/{student_id}', json.dumps(updated_data), content_type='application/json')\n    \n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:124: AssertionError", 
          "running_time": "0.005", 
          "id": 5, 
          "name": "test_update_existing_student"
        }, 
        "4": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_non_existent_student>\n\n    def test_get_non_existent_student(self):\n        non_existent_id = 9999\n        response = self.client.get(f'/students/{non_existent_id}')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:105: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f98b6f891f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.004", 
          "id": 4, 
          "name": "test_get_non_existent_student"
        }, 
        "6": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_update_non_existent_student>\n\n    def test_update_non_existent_student(self):\n        updated_data = {\n            \"first_name\": \"Charlie\",\n            \"last_name\": \"Brown\",\n            \"date_of_birth\": \"2000-01-01\",\n            \"grade\": 12,\n            \"phone\": \"9999999999\",\n            \"email\": \"charlie.brown@example.com\"\n        }\n        non_existent_id = 9999\n        response = self.client.patch(f'/students/{non_existent_id}', json.dumps(updated_data), content_type='application/json')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:145: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f98b6f891f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.006", 
          "id": 6, 
          "name": "test_update_non_existent_student"
        }
      }, 
      "score": 0.0
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "tiwariyashi15@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "#importing libraries\nimport pandas as pd\nimport numpy as np\n\n#reading the dataset\ndata = pd.read_csv('/data/training/dataset.csv',encoding='utf-8')\ndata = data.applymap(lambda x: x.encode('ascii', 'ignore').decode('ascii') if isinstance(x, str) else x)\n\n# task 1: top 5 sports that have awarded the most medals\ntask1 = data.groupby('Sport').size().reset_index(name='Medal').sort_values(by='Medal', ascending=False).head(5)\n# saving task1 output\ntask1.to_csv('/code/task1.csv', index=False)\n\n# task 2: top 5 athletes who have won the most gold medals.\ngold_data = data[data['Medal'] == 'Gold']\ntask2 = gold_data.groupby('Athlete').size().reset_index(name='Medal').sort_values(by='Medal' , ascending=False).head(5)\n\n\n# saving task2 output\ntask2.to_csv('/code/task2.csv', index=False)\n\n# task 3: top 5 Olympic events that have attracted the largest number of athletes.\ntask3 = data[['Event', 'Athlete']].drop_duplicates()\ntask3 = task3.groupby('Event').size().reset_index(name='Athlete').sort_values(by='Athlete', ascending=False).head(5)\n\n# saving task3 output\ntask3.to_csv('/code/task3.csv', index=False)\n\n# task 4: top 5 sports with the most number of female gold medalists.\nfemale_gold = data[(data['Gender'] == 'Women') & (data['Medal'] == 'Gold')]\ntask4 = female_gold.groupby('Sport').size().reset_index(name='Women').sort_values(by='Women', ascending=False).head(5)\n\n# saving task4 output\ntask4.to_csv('/code/task4.csv', index=False)\n", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Olympics Analysis", 
    "full_name": "Yashi Tiwari", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 4, 
      "solution_id": 228126284, 
      "score": 15.0, 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "evaluation_ended": "2025-07-30T19:23:56Z", 
      "testcases_passed": 4, 
      "testcases": {
        "1498964": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #1", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.40s", 
          "id": 1498964, 
          "memory_usage": "88MB"
        }, 
        "1831468": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #4", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.40s", 
          "id": 1831468, 
          "memory_usage": "89MB"
        }, 
        "1831466": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #2", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.45s", 
          "id": 1831466, 
          "memory_usage": "89MB"
        }, 
        "1831467": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #3", 
          "is_sample": false, 
          "output": "", 
          "running_time": "10.11s", 
          "id": 1831467, 
          "memory_usage": "88MB"
        }
      }, 
      "assessment_id": 0, 
      "evaluation_started": "2025-07-30T19:23:27Z", 
      "sid": "DSC:2025-07-30:0d548929-fa9f-4ee9-bea6-a7f6900bd06a", 
      "tid": "89916960cf86f364025e0d992c7c77c4", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "tiwariyashi15@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "# importing libraries\nimport pandas as pd \nimport numpy as np \n\n# reading dataset\ndata = pd.read_csv('/data/training/dataset.csv')\n\n# dropping the mentioned columns\ncols_to_drop=[\n    'VehicleID','IncidentAddress','Country','InsurancePolicyNumber',\n    'DateOfPolicyCoverage','DateOfIncident']\ndata.drop(columns=cols_to_drop,inplace=True)\n\n# Replacing the mentioned values with null vales\ndirty_values=['?','???','-1','-5','MISSINGVALUE','mode']\ndata.replace(dirty_values,np.nan,inplace=True)\n\n\n\n\n# Drop columns with null value more than 30%\n\nnull_fraction=data.isnull().mean()\ncols_to_remove=null_fraction[null_fraction>0.3].index\ndata.drop(columns=cols_to_remove,inplace=True)\n\n# Imputing missing values\nfor col in data.columns:\n    if data[col].dtype=='object':\n        data[col].fillna(data[col].mode()[0],inplace=True)\n    else:\n        data[col].fillna(data[col].mean(),inplace=True)\n\n# Replacing column 'TypeOfIncident' values\nincident_map={\n    'Single Vehicle Collision': 1,\n    'Multi-vehicle Collision': 2,\n    'Parked Car': 3,\n    'Vehicle Theft': 4, \n}\n\n# Replacing column 'TypeOfCollission' values\ncollision_map={\n    'Side Collision': 1,\n    'Rear Collision': 2,\n    'Front Collision': 3\n}\nif 'TypeOfIncident' in data.columns:\n    data['TypeOfIncident']=data['TypeOfIncident'].map(incident_map)\nif 'TypeOfCollision' in data.columns:\n    data['TypeOfCollision']=data['TypeOfCollision'].map(collision_map)\nif 'TypeOfIncident' in data.columns:\n    data['TypeOfIncident'].fillna(0,inplace=True)\nif 'TypeOfCollision' in data.columns:\n    data['TypeOfCollision'].fillna(0,inplace=True)\nexpected_columns=list(data.columns)\ndata=data[[col for col in expected_columns if col in data.columns]]\ndata.reset_index(drop=True,inplace=True)\n\n# saving the output\ndata.to_csv('/code/output.csv', index=False)", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Data Prep Odyssey: Insurance Analytics", 
    "full_name": "MORLA PALLAVI", 
    "run_details": {
      "status": "PAC", 
      "testcases_total": 6, 
      "solution_id": 228120023, 
      "score": 10.0, 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 2, 
      "evaluation_status": "completed", 
      "evaluation_ended": "2025-07-30T18:00:00Z", 
      "testcases_passed": 4, 
      "testcases": {
        "1820966": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #4", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.91s", 
          "id": 1820966, 
          "memory_usage": "90MB"
        }, 
        "1820965": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #3", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.91s", 
          "id": 1820965, 
          "memory_usage": "90MB"
        }, 
        "1820970": {
          "status": "NC", 
          "description": "Testcase failed.", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #6", 
          "is_sample": false, 
          "output": "The mapped values of column TypeOfCollission does not match!!\nTraceback (most recent call last):\n  File \"/code/eval.py3\", line 30, in <module>\n    assert (False)\nAssertionError\n", 
          "running_time": "2.91s", 
          "id": 1820970, 
          "memory_usage": "90MB"
        }, 
        "1820969": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #5", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.89s", 
          "id": 1820969, 
          "memory_usage": "87MB"
        }, 
        "1820918": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #2", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.80s", 
          "id": 1820918, 
          "memory_usage": "90MB"
        }, 
        "1820349": {
          "status": "NC", 
          "description": "Testcase failed.", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #1", 
          "is_sample": false, 
          "output": "Traceback (most recent call last):\n  File \"/code/eval.py3\", line 29, in <module>\n    assert (expected_output.equals(output))\nAssertionError\n", 
          "running_time": "2.80s", 
          "id": 1820349, 
          "memory_usage": "87MB"
        }
      }, 
      "assessment_id": 0, 
      "evaluation_started": "2025-07-30T17:59:28Z", 
      "sid": "DSC:2025-07-30:88c09b96-2cfd-4aca-a81b-ce80203db645", 
      "tid": "00c71072c20c41ec09ebe0ea8c4d98df", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "morlapallavi2004@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Predicting Cyber Attack Incidents", 
    "full_name": "MORLA PALLAVI", 
    "run_details": {}, 
    "jupyter_data": {
      "Questions.ipynb": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/5w4539b3/Questions.ipynb"
      }, 
      "output.csv": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/5w4539b3/output.csv"
      }, 
      "jupyter_notebook_access_url": "https://servercreator.doselect.com/djp/user/723c118dae7f3e00e348fca069289efd/lab/tree/Predicting Cyber Attack Incidents/Questions.ipynb?token=07d91402a48f466e97c7b44e0b62c5f9&reset", 
      "recall": 0.981, 
      "problem_extra_data": {
        "negetive_class": "0", 
        "positive_class": "1", 
        "evaluation_type": "accuracy", 
        "choices": {
          "positive_classes": [
            "0", 
            "1"
          ], 
          "columns": [
            "ID", 
            "INCIDENT_ID", 
            "DATE", 
            "X_1", 
            "X_2", 
            "X_3", 
            "X_4", 
            "X_5", 
            "X_6", 
            "X_7", 
            "X_8", 
            "X_9", 
            "X_10", 
            "X_11", 
            "X_12", 
            "X_13", 
            "X_14", 
            "X_15", 
            "MALICIOUS_OFFENSE"
          ]
        }, 
        "id_column": "ID", 
        "problem_type": "Binary Classification", 
        "target_column": "MALICIOUS_OFFENSE"
      }, 
      "precision": 0.998, 
      "is_ready": false, 
      "user": "723c118dae7f3e00e348fca069289efd", 
      "fscore": 0.989, 
      "accuracy": 0.981
    }, 
    "mcq_choice": null, 
    "email": "morlapallavi2004@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'count_word' function below.\n# \n# The function is expected to return an INTEGER ARRAY.\n# The function accepts STRING ARRAY ss as parameter.\n#\n\ndef count_word(ss):\n\t# Write your code here\n\tresult=[]\n\tfor word in ss:\n\t\tresult.append(len(word))\n\treturn result\n\t\n\t\n\nif __name__ == '__main__':\n\tss_count = int(input().strip())\n\n\tss = []\n\n\tfor _ in range(ss_count):\n\t\tss_item = input()\n\t\tss.append(ss_item)\n\n\tresult = count_word(ss)\n\n\tprint('\\n'.join(map(str, result)))\n", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Word Length", 
    "full_name": "MORLA PALLAVI", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 6, 
      "solution_id": 228114773, 
      "sid": "SCR:2025-07-30:9226c80f-151d-482f-9329-9978443390e2", 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "assessment_id": 0, 
      "testcases_passed": 6, 
      "queue": "code-eval", 
      "testcases": {
        "1935862": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "112kB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 1935862, 
          "name": "Testcase #6"
        }, 
        "33067": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "6MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33067, 
          "name": "Testcase #2"
        }, 
        "33066": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 0, 
          "expected_output": "3\n3\n5", 
          "memory_usage": "6MB", 
          "cputime": "0s", 
          "is_sample": true, 
          "input": "3\none\ntwo\nthree", 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33066, 
          "name": "Testcase #1"
        }, 
        "33068": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "6MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33068, 
          "name": "Testcase #3"
        }, 
        "1935750": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "7MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 1935750, 
          "name": "Testcase #4"
        }, 
        "1935803": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "6MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 1935803, 
          "name": "Testcase #5"
        }
      }, 
      "score": 5.0, 
      "evaluation_started": "2025-07-30T16:51:13Z", 
      "evaluation_ended": "2025-07-30T16:51:15Z", 
      "tid": "47d8cc427ec9ea98fef2eff1c534398d", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "morlapallavi2004@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Django: Student Management API", 
    "full_name": "MORLA PALLAVI", 
    "run_details": {
      "status": "REJ", 
      "testcases_total": 6, 
      "solution_id": 228123677, 
      "testcases_failed": 6, 
      "total_score": 5.0, 
      "testcases_passed": 0, 
      "testcases": {
        "1": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_create_student>\n\n    def test_create_student(self):\n        student_data = {\n            \"first_name\": \"John\",\n            \"last_name\": \"Doe\",\n            \"date_of_birth\": \"2000-01-01\",\n            \"grade\": 8,\n            \"phone\": \"1234567890\",\n            \"email\": \"john.doe@example.com\"\n        }\n    \n        response = self.client.post('/students', json.dumps(student_data), content_type='application/json')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f28b037a1f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.373", 
          "id": 1, 
          "name": "test_create_student"
        }, 
        "3": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_existing_student>\n\n    def test_get_existing_student(self):\n        student_id = Students.objects.first().id\n        response = self.client.get(f'/students/{student_id}')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:90: AssertionError", 
          "running_time": "0.005", 
          "id": 3, 
          "name": "test_get_existing_student"
        }, 
        "2": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_all_students>\n\n    def test_get_all_students(self):\n        response = self.client.get('/students')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:66: AssertionError", 
          "running_time": "0.005", 
          "id": 2, 
          "name": "test_get_all_students"
        }, 
        "5": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_update_existing_student>\n\n    def test_update_existing_student(self):\n        updated_data = {\n            \"first_name\": \"Alice_updated\",\n            \"last_name\": \"Smith_updated\",\n            \"date_of_birth\": \"1998-05-16\",\n            \"grade\": 11,\n            \"phone\": \"1234567899\",\n            \"email\": \"alice.updated@example.com\"\n        }\n        student_id = Students.objects.first().id\n        response = self.client.patch(f'/students/{student_id}', json.dumps(updated_data), content_type='application/json')\n    \n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:124: AssertionError", 
          "running_time": "0.005", 
          "id": 5, 
          "name": "test_update_existing_student"
        }, 
        "4": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_non_existent_student>\n\n    def test_get_non_existent_student(self):\n        non_existent_id = 9999\n        response = self.client.get(f'/students/{non_existent_id}')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:105: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f28b037a1f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.004", 
          "id": 4, 
          "name": "test_get_non_existent_student"
        }, 
        "6": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_update_non_existent_student>\n\n    def test_update_non_existent_student(self):\n        updated_data = {\n            \"first_name\": \"Charlie\",\n            \"last_name\": \"Brown\",\n            \"date_of_birth\": \"2000-01-01\",\n            \"grade\": 12,\n            \"phone\": \"9999999999\",\n            \"email\": \"charlie.brown@example.com\"\n        }\n        non_existent_id = 9999\n        response = self.client.patch(f'/students/{non_existent_id}', json.dumps(updated_data), content_type='application/json')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:145: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f28b037a1f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.006", 
          "id": 6, 
          "name": "test_update_non_existent_student"
        }
      }, 
      "score": 0.0
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "morlapallavi2004@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Django: Student Management API", 
    "full_name": "SURYA PRAKASH BAID", 
    "run_details": {
      "status": "REJ", 
      "testcases_total": 6, 
      "solution_id": 228113501, 
      "testcases_failed": 6, 
      "total_score": 5.0, 
      "testcases_passed": 0, 
      "testcases": {
        "1": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_update_existing_student", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_update_existing_student>\n\n    def test_update_existing_student(self):\n        updated_data = {\n            \"first_name\": \"Alice_updated\",\n            \"last_name\": \"Smith_updated\",\n            \"date_of_birth\": \"1998-05-16\",\n            \"grade\": 11,\n            \"phone\": \"1234567899\",\n            \"email\": \"alice.updated@example.com\"\n        }\n        student_id = Students.objects.first().id\n        response = self.client.patch(f'/students/{student_id}', json.dumps(updated_data), content_type='application/json')\n    \n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:124: AssertionError", 
          "id": 1, 
          "running_time": "0.005"
        }, 
        "3": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_get_all_students", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_all_students>\n\n    def test_get_all_students(self):\n        response = self.client.get('/students')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:66: AssertionError", 
          "id": 3, 
          "running_time": "0.004"
        }, 
        "2": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_get_existing_student", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_existing_student>\n\n    def test_get_existing_student(self):\n        student_id = Students.objects.first().id\n        response = self.client.get(f'/students/{student_id}')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:90: AssertionError", 
          "id": 2, 
          "running_time": "0.005"
        }, 
        "5": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_get_non_existent_student", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_non_existent_student>\n\n    def test_get_non_existent_student(self):\n        non_existent_id = 9999\n        response = self.client.get(f'/students/{non_existent_id}')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:105: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fd08ba2e220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 5, 
          "running_time": "0.004"
        }, 
        "4": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_update_non_existent_student", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_update_non_existent_student>\n\n    def test_update_non_existent_student(self):\n        updated_data = {\n            \"first_name\": \"Charlie\",\n            \"last_name\": \"Brown\",\n            \"date_of_birth\": \"2000-01-01\",\n            \"grade\": 12,\n            \"phone\": \"9999999999\",\n            \"email\": \"charlie.brown@example.com\"\n        }\n        non_existent_id = 9999\n        response = self.client.patch(f'/students/{non_existent_id}', json.dumps(updated_data), content_type='application/json')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:145: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fd08ba2e220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 4, 
          "running_time": "0.006"
        }, 
        "6": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_create_student", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_create_student>\n\n    def test_create_student(self):\n        student_data = {\n            \"first_name\": \"John\",\n            \"last_name\": \"Doe\",\n            \"date_of_birth\": \"2000-01-01\",\n            \"grade\": 8,\n            \"phone\": \"1234567890\",\n            \"email\": \"john.doe@example.com\"\n        }\n    \n        response = self.client.post('/students', json.dumps(student_data), content_type='application/json')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fd08ba2e220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 6, 
          "running_time": "0.376"
        }
      }, 
      "score": 0.0
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "suryaa.baid@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "#importing libraries\nimport pandas as pd\nimport numpy as np\n\n#reading the dataset\ndata = pd.read_csv('/data/training/dataset.csv',encoding='utf-8')\ndata = data.applymap(lambda x: x.encode('ascii', 'ignore').decode('ascii') if isinstance(x, str) else x)\n\n# task 1: top 5 sports that have awarded the most medals\ntask1 = data['Sport'].value_counts().head(5).reset_index()\ntask1.columns = ['Sport', 'Medal']\n\n# saving task1 output\ntask1.to_csv('/code/task1.csv', index=False)\n\n# task 2: top 5 athletes who have won the most gold medals.\nathlete = data[data['Medal'] == 'Gold']\ntask2 = athlete['Athlete'].value_counts().head(5).reset_index()\ntask2.columns = ['Athlete', 'Medal']\n\n# saving task2 output\ntask2.to_csv('/code/task2.csv', index=False)\n\n# task 3: top 5 Olympic events that have attracted the largest number of athletes.\ntask3 = data.groupby('Event')['Athlete'].nunique().sort_values(ascending = False).head(5).reset_index()\ntask3.columns = ['Event', 'Athlete']\n\n# saving task3 output\ntask3.to_csv('/code/task3.csv', index=False)\n\n# task 4: top 5 sports with the most number of female gold medalists.\nfemale = data[(data['Gender']=='Women') & (data['Medal'] == 'Gold')]\ntask4 = female.groupby('Sport')['Athlete'].count().sort_values(ascending = False).head(5).reset_index()\ntask4.columns = ['Sport', 'Women']\n\n# saving task4 output\ntask4.to_csv('/code/task4.csv', index=False)", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Olympics Analysis", 
    "full_name": "SURYA PRAKASH BAID", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 4, 
      "solution_id": 228114631, 
      "score": 15.0, 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "evaluation_ended": "2025-07-30T18:23:38Z", 
      "testcases_passed": 4, 
      "testcases": {
        "1498964": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #1", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.95s", 
          "id": 1498964, 
          "memory_usage": "91MB"
        }, 
        "1831468": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "1s", 
          "name": "Testcase #4", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.28s", 
          "id": 1831468, 
          "memory_usage": "91MB"
        }, 
        "1831466": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #2", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.90s", 
          "id": 1831466, 
          "memory_usage": "87MB"
        }, 
        "1831467": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "1s", 
          "name": "Testcase #3", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.09s", 
          "id": 1831467, 
          "memory_usage": "88MB"
        }
      }, 
      "assessment_id": 0, 
      "evaluation_started": "2025-07-30T18:23:16Z", 
      "sid": "DSC:2025-07-30:530c3e8b-737d-4e0a-9bcd-762d46d276b0", 
      "tid": "d47b399e78cc542c851c1bc070322d53", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "suryaa.baid@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "def print_numbers_in_range(start, end):\n    # Write your code here\n    if start < 1 or end > 100:\n        print('Out of Range')\n\n    elif end - start + 1 != 10:\n        print('Difference Not in Range')\n\n    else:\n        print(list(range(start, end + 1)))\n\nT = int(input())\n\nfor _ in range(T):\n    # Input: start and end points for each test case\n    start, end = map(int, input().split())\n    print_numbers_in_range(start, end)", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Algorithms: Numbered Lists", 
    "full_name": "SURYA PRAKASH BAID", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 12, 
      "solution_id": 228117487, 
      "score": 5.0, 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "evaluation_ended": "2025-07-30T17:08:13Z", 
      "testcases_passed": 12, 
      "queue": "code-eval", 
      "testcases": {
        "2238787": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #4", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238787, 
          "memory_usage": "7MB"
        }, 
        "2238795": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #10", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238795, 
          "memory_usage": "7MB"
        }, 
        "2238796": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #11", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238796, 
          "memory_usage": "6MB"
        }, 
        "2238797": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #12", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238797, 
          "memory_usage": "112kB"
        }, 
        "2238790": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #7", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238790, 
          "memory_usage": "7MB"
        }, 
        "2238791": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #8", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238791, 
          "memory_usage": "7MB"
        }, 
        "2238792": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #9", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238792, 
          "memory_usage": "8MB"
        }, 
        "2238789": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #6", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238789, 
          "memory_usage": "7MB"
        }, 
        "2238788": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #5", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238788, 
          "memory_usage": "6MB"
        }, 
        "60957": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 0, 
          "expected_output": "Difference Not in Range\n[3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", 
          "cputime": "0s", 
          "name": "Testcase #2", 
          "is_sample": true, 
          "output": "", 
          "input": "2\n2 4\n3 12", 
          "running_time": "0.00s", 
          "id": 60957, 
          "memory_usage": "7MB"
        }, 
        "60952": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 0, 
          "expected_output": "Difference Not in Range\n[22, 23, 24, 25, 26, 27, 28, 29, 30, 31]\nOut of Range", 
          "cputime": "0s", 
          "name": "Testcase #1", 
          "is_sample": true, 
          "output": "", 
          "input": "3\n1 9\n22 31\n90 103", 
          "running_time": "0.00s", 
          "id": 60952, 
          "memory_usage": "8MB"
        }, 
        "60961": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #3", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 60961, 
          "memory_usage": "8MB"
        }
      }, 
      "assessment_id": 0, 
      "evaluation_started": "2025-07-30T17:08:08Z", 
      "sid": "SCR:2025-07-30:0c8aae64-c973-447d-a3c8-e43890474b48", 
      "tid": "2d528c3f5352e760e331aab28c052d08", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "suryaa.baid@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Predicting Cyber Attack Incidents", 
    "full_name": "SURYA PRAKASH BAID", 
    "run_details": {}, 
    "jupyter_data": {
      "Questions.ipynb": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/9e5x8o95/Questions.ipynb"
      }, 
      "problem_extra_data": {
        "negetive_class": "0", 
        "positive_class": "1", 
        "evaluation_type": "accuracy", 
        "choices": {
          "positive_classes": [
            "0", 
            "1"
          ], 
          "columns": [
            "ID", 
            "INCIDENT_ID", 
            "DATE", 
            "X_1", 
            "X_2", 
            "X_3", 
            "X_4", 
            "X_5", 
            "X_6", 
            "X_7", 
            "X_8", 
            "X_9", 
            "X_10", 
            "X_11", 
            "X_12", 
            "X_13", 
            "X_14", 
            "X_15", 
            "MALICIOUS_OFFENSE"
          ]
        }, 
        "id_column": "ID", 
        "problem_type": "Binary Classification", 
        "target_column": "MALICIOUS_OFFENSE"
      }, 
      "jupyter_notebook_access_url": "https://servercreator.doselect.com/djp/user/913b5a122e6a46aba2bd9f284ea3e615/lab/tree/Predicting Cyber Attack Incidents/Questions.ipynb?token=9469ada54896498d8111589094fcd186&reset", 
      "recall": 0.984, 
      "output.csv": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/9e5x8o95/output.csv"
      }, 
      "precision": 0.997, 
      "is_ready": false, 
      "user": "913b5a122e6a46aba2bd9f284ea3e615", 
      "fscore": 0.99, 
      "accuracy": 0.972
    }, 
    "mcq_choice": null, 
    "email": "suryaa.baid@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "import pandas as pd\nimport numpy as np\n\n\n\n\ndef additionalID(array_1, array_2):\n    diff = np.setdiff1d(array_2, array_1)\n    return diff\n    \nif __name__ == '__main__':\n    ls1 = np.array(list(map(int,input().split())))\n    ls2 = np.array(list(map(int,input().split())))\n    ans = additionalID(ls1, ls2)\n    ans = list(ans.tolist());\n    ans.sort()\n    print(*ans,sep=\" \")", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Find the odd man out", 
    "full_name": "Sheryl Thussu", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 5, 
      "solution_id": 228120341, 
      "score": 5.0, 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "evaluation_ended": "2025-07-30T18:11:18Z", 
      "testcases_passed": 5, 
      "queue": "code-eval", 
      "testcases": {
        "573861": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #2", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 573861, 
          "memory_usage": "60MB"
        }, 
        "573860": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 0, 
          "expected_output": "2 5 6", 
          "cputime": "0s", 
          "name": "Testcase #1", 
          "is_sample": true, 
          "output": "", 
          "input": "1 4 7 3\n1 2 3 4 5 6 7", 
          "running_time": "0.00s", 
          "id": 573860, 
          "memory_usage": "60MB"
        }, 
        "2158098": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #4", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2158098, 
          "memory_usage": "64MB"
        }, 
        "2158103": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #5", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2158103, 
          "memory_usage": "64MB"
        }, 
        "573864": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #3", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 573864, 
          "memory_usage": "60MB"
        }
      }, 
      "assessment_id": 0, 
      "evaluation_started": "2025-07-30T18:11:13Z", 
      "sid": "SCR:2025-07-30:7732f403-ee0e-4c5d-97e1-6ea41fb82bb9", 
      "tid": "0eb046d55e6f288d047a082f9704477b", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "sherylthussu@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Django: Contact Manager Application", 
    "full_name": "Sheryl Thussu", 
    "run_details": {
      "status": "REJ", 
      "testcases_total": 7, 
      "solution_id": 228116800, 
      "testcases_failed": 7, 
      "total_score": 5.0, 
      "testcases_passed": 0, 
      "testcases": {
        "1": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestUserModel testMethod=test_user_creation>\n\n    def test_user_creation(self):\n        response = self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n>       self.assertEqual(response.status_code, 201)\nE       AssertionError: 404 != 201\n\ncontact/tests.py:65: AssertionError", 
          "running_time": "0.383", 
          "id": 1, 
          "name": "test_user_creation"
        }, 
        "3": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_delete_contact>\n\n    def test_delete_contact(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n        contact_id = 1\n        response = self.client.delete(f'/contacts/{contact_id}/')\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:150: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f6c29b8e1f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.008", 
          "id": 3, 
          "name": "test_delete_contact"
        }, 
        "2": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_create_contact>\n\n    def test_create_contact(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        response = self.client.post('/contacts/', json.dumps(contact_by_alexia), content_type='application/json')\n>       self.assertEqual(response.status_code, 201)\nE       AssertionError: 404 != 201\n\ncontact/tests.py:77: AssertionError", 
          "running_time": "0.005", 
          "id": 2, 
          "name": "test_create_contact"
        }, 
        "5": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_get_all_contacts>\n\n    def test_get_all_contacts(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        self.client.post('/users/', json.dumps(user_thalia), content_type='application/json')\n    \n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n    \n        response = self.client.get('/contacts/')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\ncontact/tests.py:90: AssertionError", 
          "running_time": "0.009", 
          "id": 5, 
          "name": "test_get_all_contacts"
        }, 
        "4": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_delete_with_invalid_id>\n\n    def test_delete_with_invalid_id(self):\n        contact_id = 10\n        response = self.client.delete(f'/contacts/{contact_id}/')\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:157: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f6c29b8e1f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.004", 
          "id": 4, 
          "name": "test_delete_with_invalid_id"
        }, 
        "7": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_patch_with_invalid_id>\n\n    def test_patch_with_invalid_id(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n    \n        contact_id = 9\n        update_json = {\n            'email': 'alexia@alexia.com',\n            'phone_number': '0001237869',\n            'address': '123 Main, St. Peterson Lane, NY 120276',\n        }\n        response = self.client.patch(f'/contacts/{contact_id}/', json.dumps(update_json), content_type='application/json')\n        self.assertEqual(response.status_code, 404)\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:134: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f6c29b8e1f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.010", 
          "id": 7, 
          "name": "test_patch_with_invalid_id"
        }, 
        "6": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_patch_with_id>\n\n    def test_patch_with_id(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        contact = self.client.post('/contacts/', json.dumps(contact_by_alexia), content_type='application/json')\n>       contact_data = json.loads(contact.content)\n\ncontact/tests.py:102: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f6c29b8e1f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.004", 
          "id": 6, 
          "name": "test_patch_with_id"
        }
      }, 
      "score": 0.0
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "sherylthussu@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "#importing libraries\nimport pandas as pd\nimport numpy as np\n\n#reading the dataset\ndata = pd.read_csv('/data/training/dataset.csv',encoding='utf-8')\ndata = data.applymap(lambda x: x.encode('ascii', 'ignore').decode('ascii') if isinstance(x, str) else x)\n\n# task 1: top 5 sports that have awarded the most medals\ntask1= data.groupby('Sport').size().reset_index(name='Medal').sort_values(by='Medal', ascending=False).head(5)\n# saving task1 output\ntask1.to_csv('/code/task1.csv', index=False)\n\n# task 2: top 5 athletes who have won the most gold medals.\ngold=data[data['Medal'] == 'Gold']\ntask2 = gold.groupby('Athlete').size().reset_index(name='Medal').sort_values(by='Medal', ascending=False).head(5)\n\n# saving task2 output\ntask2.to_csv('/code/task2.csv', index=False)\n\n# task 3: top 5 Olympic events that have attracted the largest number of athletes.\ntask3 = data.groupby('Event')['Athlete'].nunique().reset_index(name='Athlete').sort_values(by= 'Athlete', ascending=False).head(5)\n\n# saving task3 output\ntask3.to_csv('/code/task3.csv', index=False)\n\n# task 4: top 5 sports with the most number of female gold medalists.\nfemale_gold = gold[gold['Gender'] == 'Women']\ntask4 = female_gold.groupby('Sport')['Athlete'].nunique().reset_index(name = 'Women').sort_values(by='Women', ascending=False).head(5)\n# saving task4 output\ntask4.to_csv('/code/task4.csv', index=False)\n\n", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Olympics Analysis", 
    "full_name": "Sheryl Thussu", 
    "run_details": {
      "status": "PAC", 
      "testcases_total": 4, 
      "solution_id": 228116765, 
      "sid": "DSC:2025-07-30:a3119452-4b97-442d-8e55-c65d66ef37b2", 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 1, 
      "evaluation_status": "completed", 
      "assessment_id": 0, 
      "testcases_passed": 3, 
      "testcases": {
        "1498964": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "91MB", 
          "cputime": "1s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.28s", 
          "id": 1498964, 
          "name": "Testcase #1"
        }, 
        "1831468": {
          "status": "NC", 
          "description": "Testcase failed.", 
          "weight": 1, 
          "memory_usage": "88MB", 
          "cputime": "2s", 
          "is_sample": false, 
          "output": "Traceback (most recent call last):\n  File \"/code/eval.py3\", line 28, in <module>\n    assert (expected_output.equals(output))\nAssertionError\n", 
          "running_time": "2.71s", 
          "id": 1831468, 
          "name": "Testcase #4"
        }, 
        "1831466": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "89MB", 
          "cputime": "2s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.73s", 
          "id": 1831466, 
          "name": "Testcase #2"
        }, 
        "1831467": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "88MB", 
          "cputime": "2s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.65s", 
          "id": 1831467, 
          "name": "Testcase #3"
        }
      }, 
      "score": 11.25, 
      "evaluation_started": "2025-07-30T18:14:25Z", 
      "evaluation_ended": "2025-07-30T18:14:47Z", 
      "tid": "c1176113f97270961fe39644dcc78716", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "sherylthussu@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Predicting Cyber Attack Incidents", 
    "full_name": "Sheryl Thussu", 
    "run_details": {}, 
    "jupyter_data": {
      "Questions.ipynb": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/9e5x818l/Questions.ipynb"
      }, 
      "problem_extra_data": {
        "negetive_class": "0", 
        "positive_class": "1", 
        "evaluation_type": "accuracy", 
        "choices": {
          "positive_classes": [
            "0", 
            "1"
          ], 
          "columns": [
            "ID", 
            "INCIDENT_ID", 
            "DATE", 
            "X_1", 
            "X_2", 
            "X_3", 
            "X_4", 
            "X_5", 
            "X_6", 
            "X_7", 
            "X_8", 
            "X_9", 
            "X_10", 
            "X_11", 
            "X_12", 
            "X_13", 
            "X_14", 
            "X_15", 
            "MALICIOUS_OFFENSE"
          ]
        }, 
        "target_column": "MALICIOUS_OFFENSE", 
        "problem_type": "Binary Classification", 
        "id_column": "ID"
      }, 
      "jupyter_notebook_access_url": "https://servercreator.doselect.com/djp/user/37f9c8b397e6497e21d25552bc42df34/lab/tree/Predicting Cyber Attack Incidents/Questions.ipynb?token=d60555c2e59641d095c3d7f7b8ef5d8a&reset", 
      "recall": 0.981, 
      "output.csv": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/9e5x818l/output.csv"
      }, 
      "precision": 0.998, 
      "is_ready": false, 
      "user": "37f9c8b397e6497e21d25552bc42df34", 
      "fscore": 0.989, 
      "accuracy": 0.98
    }, 
    "mcq_choice": null, 
    "email": "sherylthussu@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Predicting Cyber Attack Incidents", 
    "full_name": "Aileen Kamal Peeka", 
    "run_details": {}, 
    "jupyter_data": {
      "Questions.ipynb": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/84plxw0a/Questions.ipynb"
      }, 
      "output.csv": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/84plxw0a/output.csv"
      }, 
      "jupyter_notebook_access_url": "https://servercreator.doselect.com/djp/user/79b672a9f7716362180e5c9ec2b86de1/lab/tree/Predicting Cyber Attack Incidents/Questions.ipynb?token=7e6af303f26e400685133df11ed5afbc&reset", 
      "recall": 0.981, 
      "problem_extra_data": {
        "negetive_class": "0", 
        "positive_class": "1", 
        "evaluation_type": "accuracy", 
        "choices": {
          "positive_classes": [
            "0", 
            "1"
          ], 
          "columns": [
            "ID", 
            "INCIDENT_ID", 
            "DATE", 
            "X_1", 
            "X_2", 
            "X_3", 
            "X_4", 
            "X_5", 
            "X_6", 
            "X_7", 
            "X_8", 
            "X_9", 
            "X_10", 
            "X_11", 
            "X_12", 
            "X_13", 
            "X_14", 
            "X_15", 
            "MALICIOUS_OFFENSE"
          ]
        }, 
        "id_column": "ID", 
        "problem_type": "Binary Classification", 
        "target_column": "MALICIOUS_OFFENSE"
      }, 
      "precision": 0.998, 
      "is_ready": false, 
      "user": "79b672a9f7716362180e5c9ec2b86de1", 
      "fscore": 0.989, 
      "accuracy": 0.981
    }, 
    "mcq_choice": null, 
    "email": "peekaaileen@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Django: Contact Manager Application", 
    "full_name": "Aileen Kamal Peeka", 
    "run_details": {
      "status": "REJ", 
      "testcases_total": 7, 
      "solution_id": 228113236, 
      "testcases_failed": 7, 
      "total_score": 5.0, 
      "testcases_passed": 0, 
      "testcases": {
        "1": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestUserModel testMethod=test_user_creation>\n\n    def test_user_creation(self):\n        response = self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n>       self.assertEqual(response.status_code, 201)\nE       AssertionError: 404 != 201\n\ncontact/tests.py:65: AssertionError", 
          "running_time": "0.219", 
          "id": 1, 
          "name": "test_user_creation"
        }, 
        "3": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_delete_contact>\n\n    def test_delete_contact(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n        contact_id = 1\n        response = self.client.delete(f'/contacts/{contact_id}/')\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:150: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f05c150d550>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.004", 
          "id": 3, 
          "name": "test_delete_contact"
        }, 
        "2": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_create_contact>\n\n    def test_create_contact(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        response = self.client.post('/contacts/', json.dumps(contact_by_alexia), content_type='application/json')\n>       self.assertEqual(response.status_code, 201)\nE       AssertionError: 404 != 201\n\ncontact/tests.py:77: AssertionError", 
          "running_time": "0.003", 
          "id": 2, 
          "name": "test_create_contact"
        }, 
        "5": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_get_all_contacts>\n\n    def test_get_all_contacts(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        self.client.post('/users/', json.dumps(user_thalia), content_type='application/json')\n    \n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n    \n        response = self.client.get('/contacts/')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\ncontact/tests.py:90: AssertionError", 
          "running_time": "0.005", 
          "id": 5, 
          "name": "test_get_all_contacts"
        }, 
        "4": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_delete_with_invalid_id>\n\n    def test_delete_with_invalid_id(self):\n        contact_id = 10\n        response = self.client.delete(f'/contacts/{contact_id}/')\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:157: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f05c150d550>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.002", 
          "id": 4, 
          "name": "test_delete_with_invalid_id"
        }, 
        "7": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_patch_with_invalid_id>\n\n    def test_patch_with_invalid_id(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n    \n        contact_id = 9\n        update_json = {\n            'email': 'alexia@alexia.com',\n            'phone_number': '0001237869',\n            'address': '123 Main, St. Peterson Lane, NY 120276',\n        }\n        response = self.client.patch(f'/contacts/{contact_id}/', json.dumps(update_json), content_type='application/json')\n        self.assertEqual(response.status_code, 404)\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:134: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f05c150d550>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.006", 
          "id": 7, 
          "name": "test_patch_with_invalid_id"
        }, 
        "6": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_patch_with_id>\n\n    def test_patch_with_id(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        contact = self.client.post('/contacts/', json.dumps(contact_by_alexia), content_type='application/json')\n>       contact_data = json.loads(contact.content)\n\ncontact/tests.py:102: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f05c150d550>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.002", 
          "id": 6, 
          "name": "test_patch_with_id"
        }
      }, 
      "score": 0.0
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "peekaaileen@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "import pandas as pd\nimport numpy as np\n\n\n\n\ndef additionalID(array_1, array_2):\n    # Write your code here and Return the Numpy Array\n    set1 = set(array_1)\n    set2 = set(array_2)\n\n    additional_ids = sorted(list(set2 - set1))\n\n    return np.array(additional_ids)\nif __name__ == '__main__':\n    ls1 = np.array(list(map(int,input().split())))\n    ls2 = np.array(list(map(int,input().split())))\n    ans = additionalID(ls1, ls2)\n    ans = list(ans.tolist());\n    ans.sort()\n    print(*ans,sep=\" \")", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Find the odd man out", 
    "full_name": "Aileen Kamal Peeka", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 5, 
      "solution_id": 228123108, 
      "score": 5.0, 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "evaluation_ended": "2025-07-30T17:56:22Z", 
      "testcases_passed": 5, 
      "queue": "code-eval", 
      "testcases": {
        "573861": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #2", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 573861, 
          "memory_usage": "63MB"
        }, 
        "573860": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 0, 
          "expected_output": "2 5 6", 
          "cputime": "0s", 
          "name": "Testcase #1", 
          "is_sample": true, 
          "output": "", 
          "input": "1 4 7 3\n1 2 3 4 5 6 7", 
          "running_time": "0.00s", 
          "id": 573860, 
          "memory_usage": "62MB"
        }, 
        "2158098": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #4", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2158098, 
          "memory_usage": "61MB"
        }, 
        "2158103": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #5", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2158103, 
          "memory_usage": "60MB"
        }, 
        "573864": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #3", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 573864, 
          "memory_usage": "62MB"
        }
      }, 
      "assessment_id": 0, 
      "evaluation_started": "2025-07-30T17:56:17Z", 
      "sid": "SCR:2025-07-30:ab301911-657d-4859-b879-259029ac54f5", 
      "tid": "a33834af6c0a89652292d9f70cb7606a", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "peekaaileen@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "# importing libraries\nimport pandas as pd \nimport numpy as np \n\n# reading dataset\ndata = pd.read_csv('/data/training/dataset.csv')\n\n# dropping the mentioned columns\ncols_to_remove = [\n    'VehicleID', 'IncidentAddress', 'Country', \n    'InsurancePolicyNumber', 'DateOfPolicyCoverage', 'DateOfIncident'\n]\ndata.drop(columns=cols_to_remove, inplace=True)\n\n# Replacing the mentioned values with null vales\nmissing_vals = ['?', '???', '-1', '-5', 'MISSINGVALUE', 'mode']\ndata.replace(missing_vals, np.nan, inplace=True)\n\n# Drop columns with null value more than 30%\nnull_percent = data.isnull().mean()\ncols_to_drop = null_percent[null_percent > 0.3].index\ndata.drop(columns=cols_to_drop, inplace=True)\n\n\n# Imputing missing values\nfor col in data.columns:\n    if data[col].dtype == 'object':\n        mode = data[col].mode()[0]\n        data[col].fillna(mode, inplace=True)\n    else:\n        mean = data[col].mean()\n        data[col].fillna(mean, inplace=True)\n\n# Replacing column 'TypeOfIncident' values\nincident_map = {\n    'Single Vehicle Collision': 1,\n    'Multi-vehicle Collision': 2,\n    'Parked Car': 3,\n    'Vehicle Theft': 4\n}\ndata['TypeOfIncident'] = data['TypeOfIncident'].map(incident_map)\n# Replacing column 'TypeOfCollission' values\ncollision_map = {\n    'Side Collision': 1,\n    'Rear Collision': 2,\n    'Front Collision': 3\n}\ndata['TypeOfCollission'] = data['TypeOfCollission'].map(collision_map)\n\n\n# saving the output\ndata.to_csv('/code/output.csv', index=False)\n# final_df.to_csv('/code/output.csv', index=False)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Data Prep Odyssey: Insurance Analytics", 
    "full_name": "Aileen Kamal Peeka", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 6, 
      "solution_id": 228117118, 
      "score": 15.0, 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "evaluation_ended": "2025-07-30T18:13:26Z", 
      "testcases_passed": 6, 
      "testcases": {
        "1820966": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #4", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.78s", 
          "id": 1820966, 
          "memory_usage": "90MB"
        }, 
        "1820965": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #3", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.88s", 
          "id": 1820965, 
          "memory_usage": "87MB"
        }, 
        "1820970": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #6", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.81s", 
          "id": 1820970, 
          "memory_usage": "89MB"
        }, 
        "1820969": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #5", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.88s", 
          "id": 1820969, 
          "memory_usage": "90MB"
        }, 
        "1820918": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #2", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.91s", 
          "id": 1820918, 
          "memory_usage": "90MB"
        }, 
        "1820349": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #1", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.90s", 
          "id": 1820349, 
          "memory_usage": "88MB"
        }
      }, 
      "assessment_id": 0, 
      "evaluation_started": "2025-07-30T18:12:54Z", 
      "sid": "DSC:2025-07-30:c0395e74-8f4a-4e95-936d-de1359742eb0", 
      "tid": "d702b4170475dbf7364d9dd36b8a8efd", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "peekaaileen@gmail.com"
  }, 
  {
    "proctor_verdict": "Severe", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Binary Classification: Deposit Subscriptions", 
    "full_name": "KEERTHANA S", 
    "run_details": {}, 
    "jupyter_data": {
      "Questions.ipynb": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/9e5x8qnq/Questions.ipynb"
      }, 
      "output.csv": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/9e5x8qnq/output.csv"
      }, 
      "jupyter_notebook_access_url": "https://servercreator.doselect.com/djp/user/1d4ba747550f065c7fe0fa36339f0e80/lab/tree/Binary Classification: Deposit Subscriptions/Questions.ipynb?token=2ddf69c81b2c4f1eb5a42682aad860cf&reset", 
      "recall": 0.657, 
      "problem_extra_data": {
        "negetive_class": "no", 
        "positive_class": "yes", 
        "evaluation_type": "accuracy", 
        "choices": {
          "positive_classes": [
            "no", 
            "yes"
          ], 
          "columns": [
            "ID", 
            "age", 
            "job", 
            "marital", 
            "education", 
            "default", 
            "balance", 
            "housing", 
            "loan", 
            "contact", 
            "day", 
            "month", 
            "duration", 
            "campaign", 
            "pdays", 
            "previous", 
            "poutcome", 
            "y"
          ]
        }, 
        "target_column": "y", 
        "problem_type": "Binary Classification", 
        "id_column": "ID"
      }, 
      "precision": 0.413, 
      "is_ready": false, 
      "user": "1d4ba747550f065c7fe0fa36339f0e80", 
      "fscore": 0.507, 
      "accuracy": 0.906
    }, 
    "mcq_choice": null, 
    "email": "keerthanasmallika@gmail.com"
  }, 
  {
    "proctor_verdict": "Severe", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Django: Contact Manager Application", 
    "full_name": "KEERTHANA S", 
    "run_details": {
      "status": "REJ", 
      "testcases_total": 7, 
      "solution_id": 228116026, 
      "testcases_failed": 7, 
      "total_score": 5.0, 
      "testcases_passed": 0, 
      "testcases": {
        "1": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_create_contact", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_create_contact>\n\n    def test_create_contact(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        response = self.client.post('/contacts/', json.dumps(contact_by_alexia), content_type='application/json')\n>       self.assertEqual(response.status_code, 201)\nE       AssertionError: 404 != 201\n\ncontact/tests.py:77: AssertionError", 
          "id": 1, 
          "running_time": "0.004"
        }, 
        "3": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_get_all_contacts", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_get_all_contacts>\n\n    def test_get_all_contacts(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        self.client.post('/users/', json.dumps(user_thalia), content_type='application/json')\n    \n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n    \n        response = self.client.get('/contacts/')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\ncontact/tests.py:90: AssertionError", 
          "id": 3, 
          "running_time": "0.007"
        }, 
        "2": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_patch_with_invalid_id", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_patch_with_invalid_id>\n\n    def test_patch_with_invalid_id(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n    \n        contact_id = 9\n        update_json = {\n            'email': 'alexia@alexia.com',\n            'phone_number': '0001237869',\n            'address': '123 Main, St. Peterson Lane, NY 120276',\n        }\n        response = self.client.patch(f'/contacts/{contact_id}/', json.dumps(update_json), content_type='application/json')\n        self.assertEqual(response.status_code, 404)\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:134: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f4cd12b2220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 2, 
          "running_time": "0.009"
        }, 
        "5": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_patch_with_id", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_patch_with_id>\n\n    def test_patch_with_id(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        contact = self.client.post('/contacts/', json.dumps(contact_by_alexia), content_type='application/json')\n>       contact_data = json.loads(contact.content)\n\ncontact/tests.py:102: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f4cd12b2220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 5, 
          "running_time": "0.004"
        }, 
        "4": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_delete_contact", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_delete_contact>\n\n    def test_delete_contact(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n        contact_id = 1\n        response = self.client.delete(f'/contacts/{contact_id}/')\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:150: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f4cd12b2220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 4, 
          "running_time": "0.007"
        }, 
        "7": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_delete_with_invalid_id", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_delete_with_invalid_id>\n\n    def test_delete_with_invalid_id(self):\n        contact_id = 10\n        response = self.client.delete(f'/contacts/{contact_id}/')\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:157: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f4cd12b2220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 7, 
          "running_time": "0.005"
        }, 
        "6": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_user_creation", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestUserModel testMethod=test_user_creation>\n\n    def test_user_creation(self):\n        response = self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n>       self.assertEqual(response.status_code, 201)\nE       AssertionError: 404 != 201\n\ncontact/tests.py:65: AssertionError", 
          "id": 6, 
          "running_time": "0.339"
        }
      }, 
      "score": 0.0
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "keerthanasmallika@gmail.com"
  }, 
  {
    "proctor_verdict": "Severe", 
    "code": "#importing libraries\nimport pandas as pd\nimport numpy as np\n\n#reading the dataset\ndata = pd.read_csv('/data/training/dataset.csv',encoding='utf-8')\ndata = data.applymap(lambda x: x.encode('ascii', 'ignore').decode('ascii') if isinstance(x, str) else x)\n\n# task 1: top 5 sports that have awarded the most medals\ntask1 = (\n    data.groupby('Sport').size().reset_index(name='Medal').sort_values('Medal', ascending=False).head(5)\n)\n\n# saving task1 output\ntask1.to_csv('/code/task1.csv', index=False)\n\n# task 2: top 5 athletes who have won the most gold medals.\ntask2 = (\n    data[data['Medal'].str.lower()=='gold'].groupby('Athlete').size().reset_index(name='Medal').sort_values('Medal', ascending=False).head(5)\n)\n\n# saving task2 output\ntask2.to_csv('/code/task2.csv', index=False)\n\n# task 3: top 5 Olympic events that have attracted the largest number of athletes.\ntask3 = (\n    data.groupby('Event')['Athlete'].nunique().reset_index(name='Athlete').sort_values('Athlete', ascending=False).head(5)\n)\n\n# saving task3 output\ntask3.to_csv('/code/task3.csv', index=False)\n\n# task 4: top 5 sports with the most number of female gold medalists.\nfemale_gold = data[\n    (data['Gender'].str.lower()=='female') & (data['Medal'].str.lower()=='gold')\n]\ntask4 = (\n    female_gold.groupby('Sport')['Athlete'].nunique().reset_index(name='Women').sort_values('Women', ascending=False)\n)\n\nif len(task4)<5:\n    padding = pd.DataFrame({\n        'Sport':['']*(5-len(task4)),\n        'Women': [0]*(5-len(task4))\n    })\n    task4 = pd.concat([task4, padding], ignore_index=True)\n\ntask4 = task4[['Sport','Women']]\ntask4['Women'] = task4['Women'].astype(int)\ntask4 = task4.head(5)\n\n# saving task4 output\ntask4.to_csv('/code/task4.csv', index=False)\n", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Olympics Analysis", 
    "full_name": "KEERTHANA S", 
    "run_details": {
      "status": "PAC", 
      "testcases_total": 4, 
      "solution_id": 228119697, 
      "sid": "DSC:2025-07-30:d536fad5-4804-4b59-be69-df49a106a324", 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 1, 
      "evaluation_status": "completed", 
      "assessment_id": 0, 
      "testcases_passed": 3, 
      "testcases": {
        "1498964": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "89MB", 
          "cputime": "1s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.17s", 
          "id": 1498964, 
          "name": "Testcase #1"
        }, 
        "1831468": {
          "status": "NC", 
          "description": "Testcase failed.", 
          "weight": 1, 
          "memory_usage": "88MB", 
          "cputime": "1s", 
          "is_sample": false, 
          "output": "Traceback (most recent call last):\n  File \"/code/eval.py3\", line 28, in <module>\n    assert (expected_output.equals(output))\nAssertionError\n", 
          "running_time": "2.20s", 
          "id": 1831468, 
          "name": "Testcase #4"
        }, 
        "1831466": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "89MB", 
          "cputime": "1s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.21s", 
          "id": 1831466, 
          "name": "Testcase #2"
        }, 
        "1831467": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "89MB", 
          "cputime": "2s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.28s", 
          "id": 1831467, 
          "name": "Testcase #3"
        }
      }, 
      "score": 11.25, 
      "evaluation_started": "2025-07-30T17:58:20Z", 
      "evaluation_ended": "2025-07-30T17:58:38Z", 
      "tid": "2a4d96a708047621ce529f27376a0149", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "keerthanasmallika@gmail.com"
  }, 
  {
    "proctor_verdict": "Severe", 
    "code": "import pandas as pd\nimport numpy as np\n\n\n\n\ndef additionalID(array_1, array_2):\n    # Write your code here and Return the Numpy Array\n    arr1 = np.array(array_1)\n    arr2 = np.array(array_2)\n\n    # additional_id = np.setdiff1d(arr2, arr1)\n\n    return np.setdiff1d(arr2, arr1, assume_unique=False)\nif __name__ == '__main__':\n    ls1 = np.array(list(map(int,input().split())))\n    ls2 = np.array(list(map(int,input().split())))\n    ans = additionalID(ls1, ls2)\n    ans = list(ans.tolist());\n    ans.sort()\n    print(*ans,sep=\" \")", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Find the odd man out", 
    "full_name": "KEERTHANA S", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 5, 
      "solution_id": 228109350, 
      "sid": "SCR:2025-07-30:0d525acc-6eda-4346-8b61-f1705ef7216e", 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "assessment_id": 0, 
      "testcases_passed": 5, 
      "queue": "code-eval", 
      "testcases": {
        "573861": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "63MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 573861, 
          "name": "Testcase #2"
        }, 
        "573860": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 0, 
          "expected_output": "2 5 6", 
          "memory_usage": "63MB", 
          "cputime": "0s", 
          "is_sample": true, 
          "input": "1 4 7 3\n1 2 3 4 5 6 7", 
          "output": "", 
          "running_time": "0.00s", 
          "id": 573860, 
          "name": "Testcase #1"
        }, 
        "2158098": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "59MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2158098, 
          "name": "Testcase #4"
        }, 
        "2158103": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "64MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2158103, 
          "name": "Testcase #5"
        }, 
        "573864": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "62MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 573864, 
          "name": "Testcase #3"
        }
      }, 
      "score": 5.0, 
      "evaluation_started": "2025-07-30T16:08:19Z", 
      "evaluation_ended": "2025-07-30T16:08:25Z", 
      "tid": "271a3738f1970e221829975537103c44", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "keerthanasmallika@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Binary Classification: Deposit Subscriptions", 
    "full_name": "MULLA SHABNAM AARA", 
    "run_details": {}, 
    "jupyter_data": {
      "Questions.ipynb": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/qgd5avyp/Questions.ipynb"
      }, 
      "output.csv": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/qgd5avyp/output.csv"
      }, 
      "jupyter_notebook_access_url": "https://servercreator.doselect.com/djp/user/91edfba037f93e946b31a42c5374dd07/lab/tree/Binary Classification: Deposit Subscriptions/Questions.ipynb?token=482b9c2f10ea4a03851fc079b14c65bd&reset", 
      "recall": 0.653, 
      "problem_extra_data": {
        "negetive_class": "no", 
        "positive_class": "yes", 
        "evaluation_type": "accuracy", 
        "choices": {
          "positive_classes": [
            "no", 
            "yes"
          ], 
          "columns": [
            "ID", 
            "age", 
            "job", 
            "marital", 
            "education", 
            "default", 
            "balance", 
            "housing", 
            "loan", 
            "contact", 
            "day", 
            "month", 
            "duration", 
            "campaign", 
            "pdays", 
            "previous", 
            "poutcome", 
            "y"
          ]
        }, 
        "id_column": "ID", 
        "problem_type": "Binary Classification", 
        "target_column": "y"
      }, 
      "precision": 0.396, 
      "is_ready": false, 
      "user": "91edfba037f93e946b31a42c5374dd07", 
      "fscore": 0.493, 
      "accuracy": 0.904
    }, 
    "mcq_choice": null, 
    "email": "2200030347cseh@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Django: Contact Manager Application", 
    "full_name": "MULLA SHABNAM AARA", 
    "run_details": {
      "status": "REJ", 
      "testcases_total": 7, 
      "solution_id": 228116578, 
      "testcases_failed": 7, 
      "total_score": 5.0, 
      "testcases_passed": 0, 
      "testcases": {
        "1": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestUserModel testMethod=test_user_creation>\n\n    def test_user_creation(self):\n        response = self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n>       self.assertEqual(response.status_code, 201)\nE       AssertionError: 404 != 201\n\ncontact/tests.py:65: AssertionError", 
          "running_time": "0.382", 
          "id": 1, 
          "name": "test_user_creation"
        }, 
        "3": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_delete_contact>\n\n    def test_delete_contact(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n        contact_id = 1\n        response = self.client.delete(f'/contacts/{contact_id}/')\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:150: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f0be6de41f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.008", 
          "id": 3, 
          "name": "test_delete_contact"
        }, 
        "2": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_create_contact>\n\n    def test_create_contact(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        response = self.client.post('/contacts/', json.dumps(contact_by_alexia), content_type='application/json')\n>       self.assertEqual(response.status_code, 201)\nE       AssertionError: 404 != 201\n\ncontact/tests.py:77: AssertionError", 
          "running_time": "0.005", 
          "id": 2, 
          "name": "test_create_contact"
        }, 
        "5": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_get_all_contacts>\n\n    def test_get_all_contacts(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        self.client.post('/users/', json.dumps(user_thalia), content_type='application/json')\n    \n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n    \n        response = self.client.get('/contacts/')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\ncontact/tests.py:90: AssertionError", 
          "running_time": "0.009", 
          "id": 5, 
          "name": "test_get_all_contacts"
        }, 
        "4": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_delete_with_invalid_id>\n\n    def test_delete_with_invalid_id(self):\n        contact_id = 10\n        response = self.client.delete(f'/contacts/{contact_id}/')\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:157: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f0be6de41f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.004", 
          "id": 4, 
          "name": "test_delete_with_invalid_id"
        }, 
        "7": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_patch_with_invalid_id>\n\n    def test_patch_with_invalid_id(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n    \n        contact_id = 9\n        update_json = {\n            'email': 'alexia@alexia.com',\n            'phone_number': '0001237869',\n            'address': '123 Main, St. Peterson Lane, NY 120276',\n        }\n        response = self.client.patch(f'/contacts/{contact_id}/', json.dumps(update_json), content_type='application/json')\n        self.assertEqual(response.status_code, 404)\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:134: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f0be6de41f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.010", 
          "id": 7, 
          "name": "test_patch_with_invalid_id"
        }, 
        "6": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_patch_with_id>\n\n    def test_patch_with_id(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        contact = self.client.post('/contacts/', json.dumps(contact_by_alexia), content_type='application/json')\n>       contact_data = json.loads(contact.content)\n\ncontact/tests.py:102: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f0be6de41f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.004", 
          "id": 6, 
          "name": "test_patch_with_id"
        }
      }, 
      "score": 0.0
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "2200030347cseh@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "#importing libraries\nimport pandas as pd\nimport numpy as np\n\n#reading the dataset\ndata = pd.read_csv('/data/training/dataset.csv',encoding='utf-8')\ndata = data.applymap(lambda x: x.encode('ascii', 'ignore').decode('ascii') if isinstance(x, str) else x)\n\n# task 1: top 5 sports that have awarded the most medals\ntask1 = data.groupby('Sport')['Medal'].count().reset_index()\ntask1 = task1.sort_values(by='Medal',ascending=False).head(5)\n\n# saving task1 output\ntask1.to_csv('/code/task1.csv', index=False)\n\n# task 2: top 5 athletes who have won the most gold medals.\n\ngold_data = data[data['Medal']=='Gold']\ntask2 = gold_data.groupby('Athlete')['Medal'].count().reset_index()\ntask2 = task2.sort_values(by='Medal',ascending=False).head(5)\n# saving task2 output\ntask2.to_csv('/code/task2.csv', index=False)\n\n# task 3: top 5 Olympic events that have attracted the largest number of athletes.\ntask3 = data.groupby('Event')['Athlete'].nunique().reset_index()\ntask3 = task3.rename(columns={'Athlete':'Athlete'})\ntask3 = task3.sort_values(by='Athlete',ascending=False).head(5)\n\n\n# saving task3 output\ntask3.to_csv('/code/task3.csv', index=False)\n\n# task 4: top 5 sports with the most number of female gold medalists.\nfemale_data = data[(data['Gender']=='Women')&(data['Medal']=='Gold')]\ntask4 = female_data.groupby('Sport')['Athlete'].nunique().reset_index()\ntask4 = task4.rename(columns={'Athlete':'Women'})\ntask4 = task4.sort_values(by='Women',ascending=False).head(5)\n\n# saving task4 output\ntask4.to_csv('/code/task4.csv', index=False)\n", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Olympics Analysis", 
    "full_name": "MULLA SHABNAM AARA", 
    "run_details": {
      "status": "PAC", 
      "testcases_total": 4, 
      "solution_id": 228117126, 
      "sid": "DSC:2025-07-30:3fdb536e-7a2b-4553-b79e-09b0cd166777", 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 1, 
      "evaluation_status": "completed", 
      "assessment_id": 0, 
      "testcases_passed": 3, 
      "testcases": {
        "1498964": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "89MB", 
          "cputime": "1s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.18s", 
          "id": 1498964, 
          "name": "Testcase #1"
        }, 
        "1831468": {
          "status": "NC", 
          "description": "Testcase failed.", 
          "weight": 1, 
          "memory_usage": "88MB", 
          "cputime": "1s", 
          "is_sample": false, 
          "output": "Traceback (most recent call last):\n  File \"/code/eval.py3\", line 28, in <module>\n    assert (expected_output.equals(output))\nAssertionError\n", 
          "running_time": "2.17s", 
          "id": 1831468, 
          "name": "Testcase #4"
        }, 
        "1831466": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "88MB", 
          "cputime": "1s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.18s", 
          "id": 1831466, 
          "name": "Testcase #2"
        }, 
        "1831467": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "89MB", 
          "cputime": "1s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.16s", 
          "id": 1831467, 
          "name": "Testcase #3"
        }
      }, 
      "score": 11.25, 
      "evaluation_started": "2025-07-30T17:16:23Z", 
      "evaluation_ended": "2025-07-30T17:16:41Z", 
      "tid": "bd219c9c71d47b7ebee52d5a49964830", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "2200030347cseh@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "\n# Read the variable from STDIN\na = int(input())\nX =[]\nfor _ in range(a):\n    X.append(input())\nN=int(input())\nStr=[]\nfor _ in range(N):\n    Str.append(input())\nfor li in Str:\n    found=False\n    for b in X:\n        if b == li:\n            found = True\n            break\n    if found:\n        print(\"true\")\n    else:\n        print(\"false\")\n# Output the variable to STDOUT\n\n", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Member or Not", 
    "full_name": "MULLA SHABNAM AARA", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 3, 
      "solution_id": 228115682, 
      "sid": "SCR:2025-07-30:7646a761-bcd0-482a-8272-d2550134ff92", 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "assessment_id": 0, 
      "testcases_passed": 3, 
      "queue": "code-eval", 
      "testcases": {
        "33001": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "112kB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33001, 
          "name": "Testcase #3"
        }, 
        "33000": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "6MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33000, 
          "name": "Testcase #2"
        }, 
        "32999": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 0, 
          "expected_output": "true\nfalse\nfalse", 
          "memory_usage": "6MB", 
          "cputime": "0s", 
          "is_sample": true, 
          "input": "2\nhello\nbug\n3\nbug\nin\nproduction", 
          "output": "", 
          "running_time": "0.00s", 
          "id": 32999, 
          "name": "Testcase #1"
        }
      }, 
      "score": 5.0, 
      "evaluation_started": "2025-07-30T16:55:59Z", 
      "evaluation_ended": "2025-07-30T16:56:01Z", 
      "tid": "4691b220f19fe2fb9489479a85cf7ebb", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "2200030347cseh@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Django: Contact Manager Application", 
    "full_name": "Aditya Pandey", 
    "run_details": {
      "status": "REJ", 
      "testcases_total": 7, 
      "solution_id": 228122480, 
      "testcases_failed": 7, 
      "total_score": 5.0, 
      "testcases_passed": 0, 
      "testcases": {
        "1": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestUserModel testMethod=test_user_creation>\n\n    def test_user_creation(self):\n        response = self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n>       self.assertEqual(response.status_code, 201)\nE       AssertionError: 404 != 201\n\ncontact/tests.py:65: AssertionError", 
          "running_time": "0.391", 
          "id": 1, 
          "name": "test_user_creation"
        }, 
        "3": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_delete_contact>\n\n    def test_delete_contact(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n        contact_id = 1\n        response = self.client.delete(f'/contacts/{contact_id}/')\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:150: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f53736b01f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.008", 
          "id": 3, 
          "name": "test_delete_contact"
        }, 
        "2": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_create_contact>\n\n    def test_create_contact(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        response = self.client.post('/contacts/', json.dumps(contact_by_alexia), content_type='application/json')\n>       self.assertEqual(response.status_code, 201)\nE       AssertionError: 404 != 201\n\ncontact/tests.py:77: AssertionError", 
          "running_time": "0.005", 
          "id": 2, 
          "name": "test_create_contact"
        }, 
        "5": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_get_all_contacts>\n\n    def test_get_all_contacts(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        self.client.post('/users/', json.dumps(user_thalia), content_type='application/json')\n    \n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n    \n        response = self.client.get('/contacts/')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\ncontact/tests.py:90: AssertionError", 
          "running_time": "0.009", 
          "id": 5, 
          "name": "test_get_all_contacts"
        }, 
        "4": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_delete_with_invalid_id>\n\n    def test_delete_with_invalid_id(self):\n        contact_id = 10\n        response = self.client.delete(f'/contacts/{contact_id}/')\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:157: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f53736b01f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.004", 
          "id": 4, 
          "name": "test_delete_with_invalid_id"
        }, 
        "7": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_patch_with_invalid_id>\n\n    def test_patch_with_invalid_id(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n    \n        contact_id = 9\n        update_json = {\n            'email': 'alexia@alexia.com',\n            'phone_number': '0001237869',\n            'address': '123 Main, St. Peterson Lane, NY 120276',\n        }\n        response = self.client.patch(f'/contacts/{contact_id}/', json.dumps(update_json), content_type='application/json')\n        self.assertEqual(response.status_code, 404)\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:134: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f53736b01f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.010", 
          "id": 7, 
          "name": "test_patch_with_invalid_id"
        }, 
        "6": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_patch_with_id>\n\n    def test_patch_with_id(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        contact = self.client.post('/contacts/', json.dumps(contact_by_alexia), content_type='application/json')\n>       contact_data = json.loads(contact.content)\n\ncontact/tests.py:102: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f53736b01f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.004", 
          "id": 6, 
          "name": "test_patch_with_id"
        }
      }, 
      "score": 0.0
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "pandeyaditya9562@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "import pandas as pd\nimport numpy as np\n\n\n\ndef additionalID(array_1, array_2):\n    # Write your code here and Return the Numpy Array\n    series_1=pd.Series(array_1)\n    series_2=pd.Series(array_2)\n    additional=series_2[~series_2.isin(series_1)]\n\n    return additional.to_numpy()   \n    \nif __name__ == '__main__':\n    ls1 = np.array(list(map(int,input().split())))\n    ls2 = np.array(list(map(int,input().split())))\n    ans = additionalID(ls1, ls2)\n    ans = list(ans.tolist());\n    ans.sort()\n    print(*ans,sep=\" \")", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Find the odd man out", 
    "full_name": "Aditya Pandey", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 5, 
      "solution_id": 228121017, 
      "score": 5.0, 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "evaluation_ended": "2025-07-30T18:10:44Z", 
      "testcases_passed": 5, 
      "queue": "code-eval", 
      "testcases": {
        "573861": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #2", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 573861, 
          "memory_usage": "62MB"
        }, 
        "573860": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 0, 
          "expected_output": "2 5 6", 
          "cputime": "0s", 
          "name": "Testcase #1", 
          "is_sample": true, 
          "output": "", 
          "input": "1 4 7 3\n1 2 3 4 5 6 7", 
          "running_time": "0.00s", 
          "id": 573860, 
          "memory_usage": "63MB"
        }, 
        "2158098": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #4", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2158098, 
          "memory_usage": "59MB"
        }, 
        "2158103": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #5", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2158103, 
          "memory_usage": "63MB"
        }, 
        "573864": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #3", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 573864, 
          "memory_usage": "62MB"
        }
      }, 
      "assessment_id": 0, 
      "evaluation_started": "2025-07-30T18:10:39Z", 
      "sid": "SCR:2025-07-30:dd4422ef-c1ea-44cb-b7dd-1ae6ca4958a4", 
      "tid": "9780699e42ec2279c7fb8f86c81be2e8", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "pandeyaditya9562@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Binary Classification: Deposit Subscriptions", 
    "full_name": "Aditya Pandey", 
    "run_details": {}, 
    "jupyter_data": {
      "Questions.ipynb": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/rd6gablv/Questions.ipynb"
      }, 
      "problem_extra_data": {
        "negetive_class": "no", 
        "positive_class": "yes", 
        "evaluation_type": "accuracy", 
        "choices": {
          "positive_classes": [
            "no", 
            "yes"
          ], 
          "columns": [
            "ID", 
            "age", 
            "job", 
            "marital", 
            "education", 
            "default", 
            "balance", 
            "housing", 
            "loan", 
            "contact", 
            "day", 
            "month", 
            "duration", 
            "campaign", 
            "pdays", 
            "previous", 
            "poutcome", 
            "y"
          ]
        }, 
        "target_column": "y", 
        "problem_type": "Binary Classification", 
        "id_column": "ID"
      }, 
      "jupyter_notebook_access_url": "https://servercreator.doselect.com/djp/user/cfab48d7efb0e0611ef38c4e390cb6e1/lab/tree/Binary Classification: Deposit Subscriptions/Questions.ipynb?token=b1817d8a86ac4657bd3995af88b1d67e&reset", 
      "recall": 0.643, 
      "output.csv": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/rd6gablv/output.csv"
      }, 
      "precision": 0.391, 
      "is_ready": false, 
      "user": "cfab48d7efb0e0611ef38c4e390cb6e1", 
      "fscore": 0.486, 
      "accuracy": 0.903
    }, 
    "mcq_choice": null, 
    "email": "pandeyaditya9562@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "#importing libraries\nimport pandas as pd\nimport numpy as np\n\n#reading the dataset\ndata = pd.read_csv('/data/training/dataset.csv',encoding='utf-8')\ndata = data.applymap(lambda x: x.encode('ascii', 'ignore').decode('ascii') if isinstance(x, str) else x)\n\n# task 1: top 5 sports that have awarded the most medals\ntask1=data.groupby('Sport').size().reset_index(name='Medal')\ntask1=task1.sort_values(by='Medal',ascending=False).head()\n\n# saving task1 output\ntask1.to_csv('/code/task1.csv', index=False)\n\n# task 2: top 5 athletes who have won the most gold medals.\ntask2=data[data['Medal']=='Gold'].groupby('Athlete').size().reset_index(name='Medal')\ntask2=task2.sort_values(by='Medal',ascending=False).head()\n\n# saving task2 output\ntask2.to_csv('/code/task2.csv', index=False)\n\n# task 3: top 5 Olympic events that have attracted the largest number of athletes.\ntask3=data.groupby('Event')['Athlete'].nunique().reset_index(name='Athlete')\ntask3=task3.sort_values(by='Athlete',ascending=False).head()\n\n# saving task3 output\ntask3.to_csv('/code/task3.csv', index=False)\n\n# task 4: top 5 sports with the most number of female gold medalists.\ntask4=data[(data['Gender']=='Women') & (data['Medal']=='Gold')].groupby('Sport')['Athlete'].nunique().reset_index(name='Women')\ntask4=task4.sort_values(by='Women',ascending=False).head()\n\n# saving task4 output\ntask4.to_csv('/code/task4.csv', index=False)\n", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Olympics Analysis", 
    "full_name": "Aditya Pandey", 
    "run_details": {
      "status": "PAC", 
      "testcases_total": 4, 
      "solution_id": 228116535, 
      "sid": "DSC:2025-07-30:8b44e0bd-ca5b-4ed6-85d3-a51970d0002a", 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 1, 
      "evaluation_status": "completed", 
      "assessment_id": 0, 
      "testcases_passed": 3, 
      "testcases": {
        "1498964": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "88MB", 
          "cputime": "1s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.08s", 
          "id": 1498964, 
          "name": "Testcase #1"
        }, 
        "1831468": {
          "status": "NC", 
          "description": "Testcase failed.", 
          "weight": 1, 
          "memory_usage": "88MB", 
          "cputime": "1s", 
          "is_sample": false, 
          "output": "Traceback (most recent call last):\n  File \"/code/eval.py3\", line 28, in <module>\n    assert (expected_output.equals(output))\nAssertionError\n", 
          "running_time": "2.17s", 
          "id": 1831468, 
          "name": "Testcase #4"
        }, 
        "1831466": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "89MB", 
          "cputime": "1s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.18s", 
          "id": 1831466, 
          "name": "Testcase #2"
        }, 
        "1831467": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "88MB", 
          "cputime": "2s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.90s", 
          "id": 1831467, 
          "name": "Testcase #3"
        }
      }, 
      "score": 11.25, 
      "evaluation_started": "2025-07-30T18:36:22Z", 
      "evaluation_ended": "2025-07-30T18:36:41Z", 
      "tid": "74d757bd40dd0fd4293e67c4c034b59e", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "pandeyaditya9562@gmail.com"
  }, 
  {
    "proctor_verdict": "Severe", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Predicting Cyber Attack Incidents", 
    "full_name": "Darshan Badgujar", 
    "run_details": {}, 
    "jupyter_data": {
      "Questions.ipynb": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/693g6ogo/Questions.ipynb"
      }, 
      "output.csv": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/693g6ogo/output.csv"
      }, 
      "jupyter_notebook_access_url": "https://servercreator.doselect.com/djp/user/c03efc4c2190d302e39f6c1ecf7220cf/lab/tree/Predicting Cyber Attack Incidents/Questions.ipynb?token=01049d7d60c441bcbeb9ed0bce3d28e2&reset", 
      "recall": 0.984, 
      "problem_extra_data": {
        "negetive_class": "0", 
        "positive_class": "1", 
        "evaluation_type": "accuracy", 
        "choices": {
          "positive_classes": [
            "0", 
            "1"
          ], 
          "columns": [
            "ID", 
            "INCIDENT_ID", 
            "DATE", 
            "X_1", 
            "X_2", 
            "X_3", 
            "X_4", 
            "X_5", 
            "X_6", 
            "X_7", 
            "X_8", 
            "X_9", 
            "X_10", 
            "X_11", 
            "X_12", 
            "X_13", 
            "X_14", 
            "X_15", 
            "MALICIOUS_OFFENSE"
          ]
        }, 
        "target_column": "MALICIOUS_OFFENSE", 
        "problem_type": "Binary Classification", 
        "id_column": "ID"
      }, 
      "precision": 0.998, 
      "is_ready": false, 
      "user": "c03efc4c2190d302e39f6c1ecf7220cf", 
      "fscore": 0.991, 
      "accuracy": 0.983
    }, 
    "mcq_choice": null, 
    "email": "darshanbadgujar101@gmail.com"
  }, 
  {
    "proctor_verdict": "Severe", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Django: Student Management API", 
    "full_name": "Darshan Badgujar", 
    "run_details": {
      "status": "REJ", 
      "testcases_total": 6, 
      "solution_id": 228108259, 
      "testcases_failed": 6, 
      "total_score": 5.0, 
      "testcases_passed": 0, 
      "testcases": {
        "1": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_update_existing_student", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_update_existing_student>\n\n    def test_update_existing_student(self):\n        updated_data = {\n            \"first_name\": \"Alice_updated\",\n            \"last_name\": \"Smith_updated\",\n            \"date_of_birth\": \"1998-05-16\",\n            \"grade\": 11,\n            \"phone\": \"1234567899\",\n            \"email\": \"alice.updated@example.com\"\n        }\n        student_id = Students.objects.first().id\n        response = self.client.patch(f'/students/{student_id}', json.dumps(updated_data), content_type='application/json')\n    \n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:124: AssertionError", 
          "id": 1, 
          "running_time": "0.005"
        }, 
        "3": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_get_all_students", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_all_students>\n\n    def test_get_all_students(self):\n        response = self.client.get('/students')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:66: AssertionError", 
          "id": 3, 
          "running_time": "0.004"
        }, 
        "2": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_get_existing_student", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_existing_student>\n\n    def test_get_existing_student(self):\n        student_id = Students.objects.first().id\n        response = self.client.get(f'/students/{student_id}')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:90: AssertionError", 
          "id": 2, 
          "running_time": "0.005"
        }, 
        "5": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_get_non_existent_student", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_non_existent_student>\n\n    def test_get_non_existent_student(self):\n        non_existent_id = 9999\n        response = self.client.get(f'/students/{non_existent_id}')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:105: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fd08ba2e220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 5, 
          "running_time": "0.004"
        }, 
        "4": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_update_non_existent_student", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_update_non_existent_student>\n\n    def test_update_non_existent_student(self):\n        updated_data = {\n            \"first_name\": \"Charlie\",\n            \"last_name\": \"Brown\",\n            \"date_of_birth\": \"2000-01-01\",\n            \"grade\": 12,\n            \"phone\": \"9999999999\",\n            \"email\": \"charlie.brown@example.com\"\n        }\n        non_existent_id = 9999\n        response = self.client.patch(f'/students/{non_existent_id}', json.dumps(updated_data), content_type='application/json')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:145: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fd08ba2e220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 4, 
          "running_time": "0.006"
        }, 
        "6": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_create_student", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_create_student>\n\n    def test_create_student(self):\n        student_data = {\n            \"first_name\": \"John\",\n            \"last_name\": \"Doe\",\n            \"date_of_birth\": \"2000-01-01\",\n            \"grade\": 8,\n            \"phone\": \"1234567890\",\n            \"email\": \"john.doe@example.com\"\n        }\n    \n        response = self.client.post('/students', json.dumps(student_data), content_type='application/json')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fd08ba2e220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 6, 
          "running_time": "0.376"
        }
      }, 
      "score": 0.0
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "darshanbadgujar101@gmail.com"
  }, 
  {
    "proctor_verdict": "Severe", 
    "code": "# importing libraries\nimport pandas as pd \nimport numpy as np \n\n# reading dataset\ndata = pd.read_csv('/data/training/dataset.csv')\n\n# dropping the mentioned columns\ndrop_col = [\n    'VehicleID' , 'IncidentAddress' , 'Country', \"InsurancePolicyNumber\" , 'DateOfPolicyCoverage' , 'DateOfIncident'\n]\ndata.drop(columns = drop_col, inplace = True , errors= 'ignore')\n\n# Replacing the mentioned values with null vales\nmissing_val = ['?' , '???','-1','-5','mode','MISSINGVALUE']\ndata.replace(missing_val, np.nan , inplace=True)\n\n# Drop columns with null value more than 30%\nthreshold = 0.3*len(data)\ndata.dropna(axis = 1 , thresh = int(len(data) - threshold),inplace=True)\n\n# Imputing missing values\nfor col in data.select_dtypes(include='object').columns:\n    if data[col].isnull().sum() >0:\n        data[col].fillna(data[col].mode()[0] , inplace=True)\n\nfor col in data.select_dtypes(include = ['int64' , 'float64']).columns:\n    if data[col].isnull().sum() > 0:\n        data[col].fillna(data[col].mean() , inplace=True)\n\n# Replacing column 'TypeOfIncident' values\nincident_map = {\n    'Single Vehicle Collision':1,\n    'Multi-vehicle Collision' : 2,\n    'Parked Car': 3,\n    'Vehicle Theft' :4\n}\nif 'TypeOfIncident' in data.columns:\n    data['TypeOfIncident'] = data['TypeOfIncident'].map(incident_map)\n\n\n# Replacing column 'TypeOfCollission' values\ncollision_map = {\n    'Side Collision' : 1,\n    'Rear Collision' : 2,\n    'Front Collision' : 3\n}\n\nif 'TypeOfCollission' in data.columns:\n    data['TypeOfCollission'] = data['TypeOfCollission'].map(collision_map)\n\n# saving the output\n# final_df.to_csv('/code/output.csv', index=False)\nfinal_col = [\n    'CustomerID',\n    'TypeOfIncident',\n    'TypeOfCollission',\n    'SeverityOfIncident',\n    'VehicleModel',\n    'VehicleYOM',\n    'ReportedFraud'\n]\n\nfinal_df = data.loc[:,[col for col in final_col if col in data.columns]]\nfinal_df.to_csv('/code/output.csv' , index=False)", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Data Prep Odyssey: Insurance Analytics", 
    "full_name": "Darshan Badgujar", 
    "run_details": {
      "status": "PAC", 
      "testcases_total": 6, 
      "solution_id": 228116969, 
      "sid": "DSC:2025-07-30:dfa85c73-005b-4f00-ae63-5abc11efc3a2", 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 1, 
      "evaluation_status": "completed", 
      "assessment_id": 0, 
      "testcases_passed": 5, 
      "testcases": {
        "1820966": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "85MB", 
          "cputime": "2s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.38s", 
          "id": 1820966, 
          "name": "Testcase #4"
        }, 
        "1820965": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "89MB", 
          "cputime": "2s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.27s", 
          "id": 1820965, 
          "name": "Testcase #3"
        }, 
        "1820970": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "90MB", 
          "cputime": "2s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.29s", 
          "id": 1820970, 
          "name": "Testcase #6"
        }, 
        "1820969": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "90MB", 
          "cputime": "2s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.38s", 
          "id": 1820969, 
          "name": "Testcase #5"
        }, 
        "1820349": {
          "status": "NC", 
          "description": "Testcase failed.", 
          "weight": 1, 
          "memory_usage": "90MB", 
          "cputime": "2s", 
          "is_sample": false, 
          "output": "The columns of expected output and your output does not match!\nTraceback (most recent call last):\n  File \"/code/eval.py3\", line 18, in <module>\n    assert (False)\nAssertionError\n", 
          "running_time": "2.31s", 
          "id": 1820349, 
          "name": "Testcase #1"
        }, 
        "1820918": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "87MB", 
          "cputime": "2s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.26s", 
          "id": 1820918, 
          "name": "Testcase #2"
        }
      }, 
      "score": 12.5, 
      "evaluation_started": "2025-07-30T17:25:58Z", 
      "evaluation_ended": "2025-07-30T17:26:28Z", 
      "tid": "8a237e8d4e6891bd20288a0a167c2cd2", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "darshanbadgujar101@gmail.com"
  }, 
  {
    "proctor_verdict": "Severe", 
    "code": "def is_member(val,x):\n    for item in x:\n        if item ==val:\n            return True\n    return False\n\nT = int(input())\nx = []\nfor _ in range(T):\n    x.append(input())\n\nN = int(input())\nA = []\nfor _ in range(N):\n    A.append(input())\n\nfor val in A:\n    if is_member (val , x):\n        print('true')\n    else:\n        print('false')", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Member or Not", 
    "full_name": "Darshan Badgujar", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 3, 
      "solution_id": 228115308, 
      "sid": "SCR:2025-07-30:f5992a92-c35a-4be9-b7ff-e79abdf4788c", 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "assessment_id": 0, 
      "testcases_passed": 3, 
      "queue": "code-eval", 
      "testcases": {
        "33001": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "116kB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33001, 
          "name": "Testcase #3"
        }, 
        "33000": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "6MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33000, 
          "name": "Testcase #2"
        }, 
        "32999": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 0, 
          "expected_output": "true\nfalse\nfalse", 
          "memory_usage": "7MB", 
          "cputime": "0s", 
          "is_sample": true, 
          "input": "2\nhello\nbug\n3\nbug\nin\nproduction", 
          "output": "", 
          "running_time": "0.00s", 
          "id": 32999, 
          "name": "Testcase #1"
        }
      }, 
      "score": 5.0, 
      "evaluation_started": "2025-07-30T16:52:47Z", 
      "evaluation_ended": "2025-07-30T16:52:49Z", 
      "tid": "a0dd48fd6421b4206c9c4f8f715e9566", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "darshanbadgujar101@gmail.com"
  }, 
  {
    "proctor_verdict": "Severe", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Binary Classification: Loan Approval", 
    "full_name": "Rohit Prakash Chavan", 
    "run_details": {}, 
    "jupyter_data": {
      "Questions.ipynb": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/314r3mo4/Questions.ipynb"
      }, 
      "output.csv": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/314r3mo4/output.csv"
      }, 
      "jupyter_notebook_access_url": "https://servercreator.doselect.com/djp/user/214fb16e65acaaa6cd1810feca84512a/lab/tree/Binary Classification: Loan Approval/Questions.ipynb?token=ed5fec5919e44c67a717f34bcc7e53e2&reset", 
      "recall": 0.855, 
      "problem_extra_data": {
        "negetive_class": "0", 
        "positive_class": "1", 
        "evaluation_type": "accuracy", 
        "choices": {
          "positive_classes": [
            "0", 
            "1"
          ], 
          "columns": [
            "ID", 
            "ApplicationDate", 
            "EmploymentStatus", 
            "EducationLevel", 
            "MaritalStatus", 
            "HomeOwnershipStatus", 
            "LoanPurpose", 
            "AnnualIncome", 
            "BaseInterestRate", 
            "LoanAmount", 
            "NetWorth", 
            "MonthlyLoanPayment", 
            "CreditScore", 
            "Age", 
            "Experience", 
            "LoanDuration", 
            "CreditCardUtilizationRate", 
            "NumberOfCreditInquiries", 
            "JobTenure", 
            "NumberOfOpenCreditLines", 
            "CheckingAccountBalance", 
            "DebtToIncomeRatio", 
            "BankruptcyHistory", 
            "LoanApproved"
          ]
        }, 
        "target_column": "LoanApproved", 
        "problem_type": "Binary Classification", 
        "id_column": "ID"
      }, 
      "precision": 0.704, 
      "is_ready": false, 
      "user": "214fb16e65acaaa6cd1810feca84512a", 
      "fscore": 0.772, 
      "accuracy": 0.897
    }, 
    "mcq_choice": null, 
    "email": "chavanrohitp45@gmail.com"
  }, 
  {
    "proctor_verdict": "Severe", 
    "code": "#importing libraries\nimport pandas as pd\nimport numpy as np\n\n#reading the dataset\ndata = pd.read_csv('/data/training/dataset.csv',encoding='utf-8')\ndata = data.applymap(lambda x: x.encode('ascii', 'ignore').decode('ascii') if isinstance(x, str) else x)\nprint(data)\n\ndf = data\n\n# task 1: top 5 sports that have awarded the most medals\ntask1 = df['Sport'].value_counts().head(5).reset_index()\ntask1.columns = ['Sport', 'Medal']\n\n# saving task1 output\ntask1.to_csv('/code/task1.csv', index=False)\n\n# task 2: top 5 athletes who have won the most gold medals.\ngold_df = df[df['Medal'] == 'Gold']\ntask2=gold_df['Athlete'].value_counts().head(5).reset_index()\ntask2.columns = ['Athlete', 'Medal']\n\n# saving task2 output\ntask2.to_csv('/code/task2.csv', index=False)\n\n# task 3: top 5 Olympic events that have attracted the largest number of athletes.\ntask3 = df.groupby('Event')['Athlete'].nunique().sort_values(ascending=False).head(5).reset_index()\ntask3.columns=['Event', 'Athlete']\n\n# saving task3 output\ntask3.to_csv('/code/task3.csv', index=False)\n\n# task 4: top 5 sports with the most number of female gold medalists.\nfemale_gold = gold_df[gold_df['Gender'] == 'Women']\ntask4 = female_gold.groupby('Sport')['Athlete'].nunique().reset_index()\ntask4.columns=['Sport','Women']\ntask4['Women']=task4['Women'].astype(int)\ntask4 = task4.sort_values(by='Women', ascending=False).head(5).reset_index(drop=True)\n\n\n# saving task4 output\ntask4.to_csv('/code/task4.csv', index=False)\n", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Olympics Analysis", 
    "full_name": "Rohit Prakash Chavan", 
    "run_details": {
      "status": "PAC", 
      "testcases_total": 4, 
      "solution_id": 228112604, 
      "score": 11.25, 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 1, 
      "evaluation_status": "completed", 
      "evaluation_ended": "2025-07-30T17:49:24Z", 
      "testcases_passed": 3, 
      "testcases": {
        "1498964": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "1s", 
          "name": "Testcase #1", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.17s", 
          "id": 1498964, 
          "memory_usage": "88MB"
        }, 
        "1831468": {
          "status": "NC", 
          "description": "Testcase failed.", 
          "weight": 1, 
          "cputime": "1s", 
          "name": "Testcase #4", 
          "is_sample": false, 
          "output": "Traceback (most recent call last):\n  File \"/code/eval.py3\", line 28, in <module>\n    assert (expected_output.equals(output))\nAssertionError\n", 
          "running_time": "2.18s", 
          "id": 1831468, 
          "memory_usage": "89MB"
        }, 
        "1831466": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "1s", 
          "name": "Testcase #2", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.16s", 
          "id": 1831466, 
          "memory_usage": "88MB"
        }, 
        "1831467": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "1s", 
          "name": "Testcase #3", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.07s", 
          "id": 1831467, 
          "memory_usage": "89MB"
        }
      }, 
      "assessment_id": 0, 
      "evaluation_started": "2025-07-30T17:49:06Z", 
      "sid": "DSC:2025-07-30:2fe106bd-0924-427c-8a1a-b9940cfcc47e", 
      "tid": "", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "chavanrohitp45@gmail.com"
  }, 
  {
    "proctor_verdict": "Severe", 
    "code": "import pandas as pd\nimport numpy as np\n\n\n\n\ndef additionalID(array_1, array_2):\n    # Write your code here and Return the Numpy Array\n    extra_ids = list(set(array_2) - set(array_1))\n    extra_ids.sort()\n\n    return np.array(extra_ids)\n    \nif __name__ == '__main__':\n    ls1 = np.array(list(map(int,input().split())))\n    ls2 = np.array(list(map(int,input().split())))\n    ans = additionalID(ls1, ls2)\n    ans = list(ans.tolist());\n    ans.sort()\n    print(*ans,sep=\" \")", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Find the odd man out", 
    "full_name": "Rohit Prakash Chavan", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 5, 
      "solution_id": 228120757, 
      "score": 5.0, 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "evaluation_ended": "2025-07-30T17:35:17Z", 
      "testcases_passed": 5, 
      "queue": "code-eval", 
      "testcases": {
        "573861": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #2", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 573861, 
          "memory_usage": "62MB"
        }, 
        "573860": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 0, 
          "expected_output": "2 5 6", 
          "cputime": "0s", 
          "name": "Testcase #1", 
          "is_sample": true, 
          "output": "", 
          "input": "1 4 7 3\n1 2 3 4 5 6 7", 
          "running_time": "0.00s", 
          "id": 573860, 
          "memory_usage": "63MB"
        }, 
        "2158098": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #4", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2158098, 
          "memory_usage": "60MB"
        }, 
        "2158103": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #5", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2158103, 
          "memory_usage": "64MB"
        }, 
        "573864": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #3", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 573864, 
          "memory_usage": "61MB"
        }
      }, 
      "assessment_id": 0, 
      "evaluation_started": "2025-07-30T17:35:12Z", 
      "sid": "SCR:2025-07-30:326af7ec-3dbf-4aac-b2a1-51da0fb6c2b1", 
      "tid": "cef3533af83d587e1b76e4e0f9fa454d", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "chavanrohitp45@gmail.com"
  }, 
  {
    "proctor_verdict": "Severe", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Django: Contact Manager Application", 
    "full_name": "Rohit Prakash Chavan", 
    "run_details": {
      "status": "REJ", 
      "testcases_total": 7, 
      "solution_id": 228107894, 
      "testcases_failed": 7, 
      "total_score": 5.0, 
      "testcases_passed": 0, 
      "testcases": {
        "1": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_create_contact", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_create_contact>\n\n    def test_create_contact(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        response = self.client.post('/contacts/', json.dumps(contact_by_alexia), content_type='application/json')\n>       self.assertEqual(response.status_code, 201)\nE       AssertionError: 404 != 201\n\ncontact/tests.py:77: AssertionError", 
          "id": 1, 
          "running_time": "0.004"
        }, 
        "3": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_get_all_contacts", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_get_all_contacts>\n\n    def test_get_all_contacts(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        self.client.post('/users/', json.dumps(user_thalia), content_type='application/json')\n    \n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n    \n        response = self.client.get('/contacts/')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\ncontact/tests.py:90: AssertionError", 
          "id": 3, 
          "running_time": "0.007"
        }, 
        "2": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_patch_with_invalid_id", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_patch_with_invalid_id>\n\n    def test_patch_with_invalid_id(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n    \n        contact_id = 9\n        update_json = {\n            'email': 'alexia@alexia.com',\n            'phone_number': '0001237869',\n            'address': '123 Main, St. Peterson Lane, NY 120276',\n        }\n        response = self.client.patch(f'/contacts/{contact_id}/', json.dumps(update_json), content_type='application/json')\n        self.assertEqual(response.status_code, 404)\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:134: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f4cd12b2220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 2, 
          "running_time": "0.009"
        }, 
        "5": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_patch_with_id", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_patch_with_id>\n\n    def test_patch_with_id(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        contact = self.client.post('/contacts/', json.dumps(contact_by_alexia), content_type='application/json')\n>       contact_data = json.loads(contact.content)\n\ncontact/tests.py:102: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f4cd12b2220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 5, 
          "running_time": "0.004"
        }, 
        "4": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_delete_contact", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_delete_contact>\n\n    def test_delete_contact(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n        contact_id = 1\n        response = self.client.delete(f'/contacts/{contact_id}/')\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:150: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f4cd12b2220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 4, 
          "running_time": "0.007"
        }, 
        "7": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_delete_with_invalid_id", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_delete_with_invalid_id>\n\n    def test_delete_with_invalid_id(self):\n        contact_id = 10\n        response = self.client.delete(f'/contacts/{contact_id}/')\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:157: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f4cd12b2220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 7, 
          "running_time": "0.005"
        }, 
        "6": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_user_creation", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestUserModel testMethod=test_user_creation>\n\n    def test_user_creation(self):\n        response = self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n>       self.assertEqual(response.status_code, 201)\nE       AssertionError: 404 != 201\n\ncontact/tests.py:65: AssertionError", 
          "id": 6, 
          "running_time": "0.339"
        }
      }, 
      "score": 0.0
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "chavanrohitp45@gmail.com"
  }, 
  {
    "proctor_verdict": "Minor", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Django: Contact Manager Application", 
    "full_name": "Hriday Sekhani", 
    "run_details": {
      "status": "REJ", 
      "testcases_total": 7, 
      "solution_id": 228108250, 
      "testcases_failed": 7, 
      "total_score": 5.0, 
      "testcases_passed": 0, 
      "testcases": {
        "1": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestUserModel testMethod=test_user_creation>\n\n    def test_user_creation(self):\n        response = self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n>       self.assertEqual(response.status_code, 201)\nE       AssertionError: 404 != 201\n\ncontact/tests.py:65: AssertionError", 
          "running_time": "0.403", 
          "id": 1, 
          "name": "test_user_creation"
        }, 
        "3": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_delete_contact>\n\n    def test_delete_contact(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n        contact_id = 1\n        response = self.client.delete(f'/contacts/{contact_id}/')\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:150: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f9bbcde51f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.008", 
          "id": 3, 
          "name": "test_delete_contact"
        }, 
        "2": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_create_contact>\n\n    def test_create_contact(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        response = self.client.post('/contacts/', json.dumps(contact_by_alexia), content_type='application/json')\n>       self.assertEqual(response.status_code, 201)\nE       AssertionError: 404 != 201\n\ncontact/tests.py:77: AssertionError", 
          "running_time": "0.005", 
          "id": 2, 
          "name": "test_create_contact"
        }, 
        "5": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_get_all_contacts>\n\n    def test_get_all_contacts(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        self.client.post('/users/', json.dumps(user_thalia), content_type='application/json')\n    \n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n    \n        response = self.client.get('/contacts/')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\ncontact/tests.py:90: AssertionError", 
          "running_time": "0.017", 
          "id": 5, 
          "name": "test_get_all_contacts"
        }, 
        "4": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_delete_with_invalid_id>\n\n    def test_delete_with_invalid_id(self):\n        contact_id = 10\n        response = self.client.delete(f'/contacts/{contact_id}/')\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:157: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f9bbcde51f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.004", 
          "id": 4, 
          "name": "test_delete_with_invalid_id"
        }, 
        "7": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_patch_with_invalid_id>\n\n    def test_patch_with_invalid_id(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n    \n        contact_id = 9\n        update_json = {\n            'email': 'alexia@alexia.com',\n            'phone_number': '0001237869',\n            'address': '123 Main, St. Peterson Lane, NY 120276',\n        }\n        response = self.client.patch(f'/contacts/{contact_id}/', json.dumps(update_json), content_type='application/json')\n        self.assertEqual(response.status_code, 404)\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:134: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f9bbcde51f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.014", 
          "id": 7, 
          "name": "test_patch_with_invalid_id"
        }, 
        "6": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_patch_with_id>\n\n    def test_patch_with_id(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        contact = self.client.post('/contacts/', json.dumps(contact_by_alexia), content_type='application/json')\n>       contact_data = json.loads(contact.content)\n\ncontact/tests.py:102: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f9bbcde51f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.005", 
          "id": 6, 
          "name": "test_patch_with_id"
        }
      }, 
      "score": 0.0
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "hridaysekhani2847@gmail.com"
  }, 
  {
    "proctor_verdict": "Minor", 
    "code": "#importing libraries\nimport pandas as pd\nimport numpy as np\n\n#reading the dataset\ndata = pd.read_csv('/data/training/dataset.csv',encoding='utf-8')\ndata = data.applymap(lambda x: x.encode('ascii', 'ignore').decode('ascii') if isinstance(x, str) else x)\n\n# task 1: top 5 sports that have awarded the most medals\nresult_df = data['Sport'].value_counts().nlargest(5)\n\ntask1 = result_df.reset_index()\ntask1.columns = ['Sport','Medal']\n\n# saving task1 output\ntask1.to_csv('/code/task1.csv', index=False)\n\n# task 2: top 5 athletes who have won the most gold medals.\ngoldmedal_data = data[data['Medal'] == 'Gold']\nresult_df_two = goldmedal_data['Athlete'].value_counts().nlargest(5)\n\ntask2 = result_df_two.reset_index()\ntask2.columns = ['Athlete','Medal']\n\n# saving task2 output\ntask2.to_csv('/code/task2.csv', index=False)\n\n# task 3: top 5 Olympic events that have attracted the largest number of athletes.\nresult_df_three = data.groupby('Event')['Athlete'].nunique().nlargest(5)\n\ntask3 = result_df_three.reset_index()\ntask3.columns = ['Event','Athlete']\n\n# saving task3 output\ntask3.to_csv('/code/task3.csv', index=False)\n\n# task 4: top 5 sports with the most number of female gold medalists.\nfemale_data_with_gold_medal = data[(data['Gender'] == 'Women') & (data['Medal'] == 'Gold')]\nresult_df_four = female_data_with_gold_medal['Sport'].value_counts().nlargest(5)\n\ntask4 = result_df_four.reset_index()\ntask4.columns = ['Sport','Women']\n\n# saving task4 output\ntask4.to_csv('/code/task4.csv', index=False)\n", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Olympics Analysis", 
    "full_name": "Hriday Sekhani", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 4, 
      "solution_id": 228109299, 
      "sid": "DSC:2025-07-30:4a0b8c63-2f51-4b27-bd30-b9871154fa58", 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "assessment_id": 0, 
      "testcases_passed": 4, 
      "testcases": {
        "1498964": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "89MB", 
          "cputime": "1s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.06s", 
          "id": 1498964, 
          "name": "Testcase #1"
        }, 
        "1831468": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "89MB", 
          "cputime": "1s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.19s", 
          "id": 1831468, 
          "name": "Testcase #4"
        }, 
        "1831466": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "89MB", 
          "cputime": "1s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.18s", 
          "id": 1831466, 
          "name": "Testcase #2"
        }, 
        "1831467": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "90MB", 
          "cputime": "1s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.16s", 
          "id": 1831467, 
          "name": "Testcase #3"
        }
      }, 
      "score": 15.0, 
      "evaluation_started": "2025-07-30T16:38:17Z", 
      "evaluation_ended": "2025-07-30T16:38:35Z", 
      "tid": "418de92f67aeaa807434295bf7f91bf1", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "hridaysekhani2847@gmail.com"
  }, 
  {
    "proctor_verdict": "Minor", 
    "code": "#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'count_word' function below.\n# \n# The function is expected to return an INTEGER ARRAY.\n# The function accepts STRING ARRAY ss as parameter.\n#\n\ndef count_word(ss):\n\t# Write your code here\n\tlenghts_of_words_list = []\n\n\tfor word in ss:\n\t\tlenghts_of_words_list.append(len(word))\n\n\treturn lenghts_of_words_list\t\n\t\n\t\n\nif __name__ == '__main__':\n\tss_count = int(input().strip())\n\n\tss = []\n\n\tfor _ in range(ss_count):\n\t\tss_item = input()\n\t\tss.append(ss_item)\n\n\tresult = count_word(ss)\n\n\tprint('\\n'.join(map(str, result)))\n", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Word Length", 
    "full_name": "Hriday Sekhani", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 6, 
      "solution_id": 228108742, 
      "sid": "SCR:2025-07-30:4122878e-fdd6-4fd6-891b-861c09f4037a", 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "assessment_id": 0, 
      "testcases_passed": 6, 
      "queue": "code-eval", 
      "testcases": {
        "1935862": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "116kB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 1935862, 
          "name": "Testcase #6"
        }, 
        "33067": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "7MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33067, 
          "name": "Testcase #2"
        }, 
        "33066": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 0, 
          "expected_output": "3\n3\n5", 
          "memory_usage": "7MB", 
          "cputime": "0s", 
          "is_sample": true, 
          "input": "3\none\ntwo\nthree", 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33066, 
          "name": "Testcase #1"
        }, 
        "33068": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "7MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33068, 
          "name": "Testcase #3"
        }, 
        "1935750": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "7MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 1935750, 
          "name": "Testcase #4"
        }, 
        "1935803": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "7MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 1935803, 
          "name": "Testcase #5"
        }
      }, 
      "score": 5.0, 
      "evaluation_started": "2025-07-30T16:04:01Z", 
      "evaluation_ended": "2025-07-30T16:04:04Z", 
      "tid": "2185472c89fdaf22912d7e74f834d97c", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "hridaysekhani2847@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Django: Contact Manager Application", 
    "full_name": "Bhavya Agarwal", 
    "run_details": {
      "status": "REJ", 
      "testcases_total": 7, 
      "solution_id": 228117698, 
      "testcases_failed": 7, 
      "total_score": 5.0, 
      "testcases_passed": 0, 
      "testcases": {
        "1": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_create_contact", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_create_contact>\n\n    def test_create_contact(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        response = self.client.post('/contacts/', json.dumps(contact_by_alexia), content_type='application/json')\n>       self.assertEqual(response.status_code, 201)\nE       AssertionError: 404 != 201\n\ncontact/tests.py:77: AssertionError", 
          "id": 1, 
          "running_time": "0.004"
        }, 
        "3": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_get_all_contacts", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_get_all_contacts>\n\n    def test_get_all_contacts(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        self.client.post('/users/', json.dumps(user_thalia), content_type='application/json')\n    \n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n    \n        response = self.client.get('/contacts/')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\ncontact/tests.py:90: AssertionError", 
          "id": 3, 
          "running_time": "0.007"
        }, 
        "2": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_patch_with_invalid_id", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_patch_with_invalid_id>\n\n    def test_patch_with_invalid_id(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n    \n        contact_id = 9\n        update_json = {\n            'email': 'alexia@alexia.com',\n            'phone_number': '0001237869',\n            'address': '123 Main, St. Peterson Lane, NY 120276',\n        }\n        response = self.client.patch(f'/contacts/{contact_id}/', json.dumps(update_json), content_type='application/json')\n        self.assertEqual(response.status_code, 404)\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:134: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f4cd12b2220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 2, 
          "running_time": "0.009"
        }, 
        "5": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_patch_with_id", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_patch_with_id>\n\n    def test_patch_with_id(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        contact = self.client.post('/contacts/', json.dumps(contact_by_alexia), content_type='application/json')\n>       contact_data = json.loads(contact.content)\n\ncontact/tests.py:102: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f4cd12b2220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 5, 
          "running_time": "0.004"
        }, 
        "4": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_delete_contact", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_delete_contact>\n\n    def test_delete_contact(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n        contact_id = 1\n        response = self.client.delete(f'/contacts/{contact_id}/')\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:150: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f4cd12b2220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 4, 
          "running_time": "0.007"
        }, 
        "7": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_delete_with_invalid_id", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_delete_with_invalid_id>\n\n    def test_delete_with_invalid_id(self):\n        contact_id = 10\n        response = self.client.delete(f'/contacts/{contact_id}/')\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:157: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f4cd12b2220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 7, 
          "running_time": "0.005"
        }, 
        "6": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_user_creation", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestUserModel testMethod=test_user_creation>\n\n    def test_user_creation(self):\n        response = self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n>       self.assertEqual(response.status_code, 201)\nE       AssertionError: 404 != 201\n\ncontact/tests.py:65: AssertionError", 
          "id": 6, 
          "running_time": "0.339"
        }
      }, 
      "score": 0.0
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "agarwal.bhavya2204@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "# importing libraries\nimport pandas as pd \nimport numpy as np \n\n# reading dataset\ndata = pd.read_csv('/data/training/dataset.csv')\n\n# dropping the mentioned columns\n\ncols_to_remove=['VehicleID','IncidentAddress','Country','InsurancePolicyNumber','DateOfPolicyCoverage','DateOfIncident']\ndata.drop(columns=cols_to_remove,inplace=True,errors='ignore')\n# Replacing the mentioned values with null vales\nmissing_values=['?','???','-1','-5','MISSINGVALUE','mode']\ndata.replace(missing_values,np.nan,inplace=True)\n\n# Drop columns with null value more than 30%\nthreshold=len(data)*0.3\ndata.dropna(axis=1,thresh=len(data)-threshold,inplace=True)\n\n# Imputing missing values\nfor col in data.columns:\n    if data[col].dtype=='object':\n        mode=data[col].mode(dropna=True)\n        if not mode.empty:\n            data[col].fillna(mode[0],inplace=True)\n        else:\n            mean=data[col].mean()\n            data[col].fillna(mean,inplace=True)\n\n# Replacing column 'TypeOfIncident' values\nincident_map={'Single Vehicle Collision':1,'Multi-vehicle Collision':2,'Parked Car':3,'Vehicle Theft':4}\ndata['TypeOfIncident']=data['TypeOfIncident'].map(incident_map)\n\n# Replacing column 'TypeOfCollission' values\ncollision_map={'Side Collision':1,'Rear Collision':2,'Front Collision':3}\ndata['TypeOfCollission']=data['TypeOfCollission'].map(collision_map)\n\n# saving the output\ndata.to_csv('/code/output.csv', index=False)", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Data Prep Odyssey: Insurance Analytics", 
    "full_name": "Bhavya Agarwal", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 6, 
      "solution_id": 228116014, 
      "score": 15.0, 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "evaluation_ended": "2025-07-30T17:06:48Z", 
      "testcases_passed": 6, 
      "testcases": {
        "1820966": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #4", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.90s", 
          "id": 1820966, 
          "memory_usage": "90MB"
        }, 
        "1820965": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #3", 
          "is_sample": false, 
          "output": "", 
          "running_time": "3.02s", 
          "id": 1820965, 
          "memory_usage": "90MB"
        }, 
        "1820970": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #6", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.99s", 
          "id": 1820970, 
          "memory_usage": "86MB"
        }, 
        "1820969": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #5", 
          "is_sample": false, 
          "output": "", 
          "running_time": "3.00s", 
          "id": 1820969, 
          "memory_usage": "88MB"
        }, 
        "1820918": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #2", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.91s", 
          "id": 1820918, 
          "memory_usage": "86MB"
        }, 
        "1820349": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #1", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.92s", 
          "id": 1820349, 
          "memory_usage": "90MB"
        }
      }, 
      "assessment_id": 0, 
      "evaluation_started": "2025-07-30T17:06:14Z", 
      "sid": "DSC:2025-07-30:e702430b-1d5a-4593-8f6b-a2f281f304f6", 
      "tid": "882e493a3fd6149ea4d72ea3b5e67adb", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "agarwal.bhavya2204@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'count_word' function below.\n# \n# The function is expected to return an INTEGER ARRAY.\n# The function accepts STRING ARRAY ss as parameter.\n#\n\ndef count_word(ss):\n\treturn [len(word) for word in ss]\n\t\n\t\n\nif __name__ == '__main__':\n\tss_count = int(input().strip())\n\n\tss = []\n\n\tfor _ in range(ss_count):\n\t\tss_item = input()\n\t\tss.append(ss_item)\n\n\tresult = count_word(ss)\n\n\tprint('\\n'.join(map(str, result)))\n", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Word Length", 
    "full_name": "Bhavya Agarwal", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 6, 
      "solution_id": 228112599, 
      "sid": "SCR:2025-07-30:86ada6de-896b-4c5f-b3d9-cb7884cb4b13", 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "assessment_id": 0, 
      "testcases_passed": 6, 
      "queue": "code-eval", 
      "testcases": {
        "1935862": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "116kB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 1935862, 
          "name": "Testcase #6"
        }, 
        "33067": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "7MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33067, 
          "name": "Testcase #2"
        }, 
        "33066": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 0, 
          "expected_output": "3\n3\n5", 
          "memory_usage": "6MB", 
          "cputime": "0s", 
          "is_sample": true, 
          "input": "3\none\ntwo\nthree", 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33066, 
          "name": "Testcase #1"
        }, 
        "33068": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "6MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33068, 
          "name": "Testcase #3"
        }, 
        "1935750": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "6MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 1935750, 
          "name": "Testcase #4"
        }, 
        "1935803": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "7MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 1935803, 
          "name": "Testcase #5"
        }
      }, 
      "score": 5.0, 
      "evaluation_started": "2025-07-30T16:33:30Z", 
      "evaluation_ended": "2025-07-30T16:33:32Z", 
      "tid": "0c1aed7c4de1fed8963bcdf4ebfd9cc2", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "agarwal.bhavya2204@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Binary Classification: Loan Approval", 
    "full_name": "Bhavya Agarwal", 
    "run_details": {}, 
    "jupyter_data": {
      "Questions.ipynb": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/nmr0aoyy/Questions.ipynb"
      }, 
      "problem_extra_data": {
        "negetive_class": "0", 
        "positive_class": "1", 
        "evaluation_type": "accuracy", 
        "choices": {
          "positive_classes": [
            "0", 
            "1"
          ], 
          "columns": [
            "ID", 
            "ApplicationDate", 
            "EmploymentStatus", 
            "EducationLevel", 
            "MaritalStatus", 
            "HomeOwnershipStatus", 
            "LoanPurpose", 
            "AnnualIncome", 
            "BaseInterestRate", 
            "LoanAmount", 
            "NetWorth", 
            "MonthlyLoanPayment", 
            "CreditScore", 
            "Age", 
            "Experience", 
            "LoanDuration", 
            "CreditCardUtilizationRate", 
            "NumberOfCreditInquiries", 
            "JobTenure", 
            "NumberOfOpenCreditLines", 
            "CheckingAccountBalance", 
            "DebtToIncomeRatio", 
            "BankruptcyHistory", 
            "LoanApproved"
          ]
        }, 
        "id_column": "ID", 
        "problem_type": "Binary Classification", 
        "target_column": "LoanApproved"
      }, 
      "jupyter_notebook_access_url": "https://servercreator.doselect.com/djp/user/723e6456cfb0da16327cdce347ae8f1c/lab/tree/Binary Classification: Loan Approval/Questions.ipynb?token=efde07a5881549d1871adfab899f365b&reset", 
      "recall": 0.857, 
      "output.csv": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/nmr0aoyy/output.csv"
      }, 
      "precision": 0.74, 
      "is_ready": false, 
      "user": "723e6456cfb0da16327cdce347ae8f1c", 
      "fscore": 0.794, 
      "accuracy": 0.906
    }, 
    "mcq_choice": null, 
    "email": "agarwal.bhavya2204@gmail.com"
  }, 
  {
    "proctor_verdict": "Minor", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Predicting Cyber Attack Incidents", 
    "full_name": "Divya Agarwal", 
    "run_details": {}, 
    "jupyter_data": {
      "Questions.ipynb": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/l1b9a001/Questions.ipynb"
      }, 
      "output.csv": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/l1b9a001/output.csv"
      }, 
      "jupyter_notebook_access_url": "https://servercreator.doselect.com/djp/user/ff18496102c4b05ead9a8b8bc547db88/lab/tree/Predicting Cyber Attack Incidents/Questions.ipynb?token=57013440e1d042178fe19be555220fd4&reset", 
      "recall": 0.983, 
      "problem_extra_data": {
        "negetive_class": "0", 
        "positive_class": "1", 
        "evaluation_type": "accuracy", 
        "choices": {
          "positive_classes": [
            "0", 
            "1"
          ], 
          "columns": [
            "ID", 
            "INCIDENT_ID", 
            "DATE", 
            "X_1", 
            "X_2", 
            "X_3", 
            "X_4", 
            "X_5", 
            "X_6", 
            "X_7", 
            "X_8", 
            "X_9", 
            "X_10", 
            "X_11", 
            "X_12", 
            "X_13", 
            "X_14", 
            "X_15", 
            "MALICIOUS_OFFENSE"
          ]
        }, 
        "id_column": "ID", 
        "problem_type": "Binary Classification", 
        "target_column": "MALICIOUS_OFFENSE"
      }, 
      "precision": 0.997, 
      "is_ready": false, 
      "user": "ff18496102c4b05ead9a8b8bc547db88", 
      "fscore": 0.99, 
      "accuracy": 0.981
    }, 
    "mcq_choice": null, 
    "email": "divya.agarwal9082@gmail.com"
  }, 
  {
    "proctor_verdict": "Minor", 
    "code": "#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'findLongestWord' function below.\n# \n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n# 1. INTEGER n\n# 2. STRING ARRAY arr\n#\n\ndef findLongestWord(n, arr):\n\t# Write your code here\n\tmax_length=0\n\tfor word in arr:\n\t\tmax_length=max(max_length,len(word))\n\treturn max_length\n\t\n\nif __name__ == '__main__':\n\tn = int(input().strip())\n\n\tarr = []\n\n\tfor _ in range(n):\n\t\tarr_item = input()\n\t\tarr.append(arr_item)\n\n\tresult = findLongestWord(n, arr)\n\n\tprint(str(result))\n", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Longest Word", 
    "full_name": "Divya Agarwal", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 3, 
      "solution_id": 228109264, 
      "sid": "SCR:2025-07-30:b6093d8a-d1a8-414f-ac5d-3fe591dcb726", 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "assessment_id": 0, 
      "testcases_passed": 3, 
      "queue": "code-eval", 
      "testcases": {
        "33069": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 0, 
          "expected_output": "7", 
          "memory_usage": "6MB", 
          "cputime": "0s", 
          "is_sample": true, 
          "input": "3\nwhich\nis\nlargest", 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33069, 
          "name": "Testcase #1"
        }, 
        "33070": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "7MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33070, 
          "name": "Testcase #2"
        }, 
        "33071": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "116kB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33071, 
          "name": "Testcase #3"
        }
      }, 
      "score": 5.0, 
      "evaluation_started": "2025-07-30T16:04:51Z", 
      "evaluation_ended": "2025-07-30T16:04:53Z", 
      "tid": "c1d4e05751dc1e35227a5ae56756fc02", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "divya.agarwal9082@gmail.com"
  }, 
  {
    "proctor_verdict": "Minor", 
    "code": "#importing libraries\nimport pandas as pd\nimport numpy as np\n\n#reading the dataset\ndata = pd.read_csv('/data/training/dataset.csv',encoding='utf-8')\ndata = data.applymap(lambda x: x.encode('ascii', 'ignore').decode('ascii') if isinstance(x, str) else x)\n\n# task 1: top 5 sports that have awarded the most medals\ntask1=data.groupby('Sport')['Medal'].count().reset_index(name='Medal')\ntask1=task1.sort_values(by='Medal', ascending=False).head(5)\n\n# saving task1 output\ntask1.to_csv('/code/task1.csv', index=False)\n\n# task 2: top 5 athletes who have won the most gold medals.\ngold_data=data[data['Medal']=='Gold']\ntask2=gold_data.groupby('Athlete')['Medal'].count().reset_index(name='Medal')\ntask2=task2.sort_values(by='Medal', ascending=False).head(5)\n\n# saving task2 output\ntask2.to_csv('/code/task2.csv', index=False)\n\n# task 3: top 5 Olympic events that have attracted the largest number of athletes.\ntask3_data=data[['Event','Athlete']].drop_duplicates()\ntask3=task3_data.groupby('Event')['Athlete'].count().reset_index(name='Athlete')\ntask3=task3.sort_values(by='Athlete', ascending=False).head(5)\n\n\n# saving task3 output\ntask3.to_csv('/code/task3.csv', index=False)\n\n# task 4: top 5 sports with the most number of female gold medalists.\nfemale_gold=data[(data['Gender']=='Women') & (data['Medal']=='Gold')]\ntask4=female_gold.groupby('Sport')['Athlete'].nunique().reset_index()\ntask4.columns=['Sport','Medal']\ntask4=task4.sort_values(by='Medal', ascending=False).head(5)\n\n\n# saving task4 output\ntask4.to_csv('/code/task4.csv', index=False)\n", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Olympics Analysis", 
    "full_name": "Divya Agarwal", 
    "run_details": {
      "status": "PAC", 
      "testcases_total": 4, 
      "solution_id": 228110193, 
      "score": 11.25, 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 1, 
      "evaluation_status": "completed", 
      "evaluation_ended": "2025-07-30T16:27:59Z", 
      "testcases_passed": 3, 
      "testcases": {
        "1498964": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #1", 
          "is_sample": false, 
          "output": "", 
          "running_time": "3.03s", 
          "id": 1498964, 
          "memory_usage": "88MB"
        }, 
        "1831468": {
          "status": "NC", 
          "description": "Testcase failed.", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #4", 
          "is_sample": false, 
          "output": "Task 4: The columns of expected output and your output does not match!\nTraceback (most recent call last):\n  File \"/code/eval.py3\", line 18, in <module>\n    assert (False)\nAssertionError\n", 
          "running_time": "3.09s", 
          "id": 1831468, 
          "memory_usage": "88MB"
        }, 
        "1831466": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #2", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.78s", 
          "id": 1831466, 
          "memory_usage": "89MB"
        }, 
        "1831467": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #3", 
          "is_sample": false, 
          "output": "", 
          "running_time": "8.38s", 
          "id": 1831467, 
          "memory_usage": "88MB"
        }
      }, 
      "assessment_id": 0, 
      "evaluation_started": "2025-07-30T16:27:27Z", 
      "sid": "DSC:2025-07-30:dbd0ade7-8fbf-4de9-a3b2-072ebb8d6f3e", 
      "tid": "927e3d31ca399a96b0d94878677abe6c", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "divya.agarwal9082@gmail.com"
  }, 
  {
    "proctor_verdict": "Minor", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Django: Student Management API", 
    "full_name": "Divya Agarwal", 
    "run_details": {
      "status": "REJ", 
      "testcases_total": 6, 
      "solution_id": 228109832, 
      "testcases_failed": 6, 
      "total_score": 5.0, 
      "testcases_passed": 0, 
      "testcases": {
        "1": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_update_existing_student", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_update_existing_student>\n\n    def test_update_existing_student(self):\n        updated_data = {\n            \"first_name\": \"Alice_updated\",\n            \"last_name\": \"Smith_updated\",\n            \"date_of_birth\": \"1998-05-16\",\n            \"grade\": 11,\n            \"phone\": \"1234567899\",\n            \"email\": \"alice.updated@example.com\"\n        }\n        student_id = Students.objects.first().id\n        response = self.client.patch(f'/students/{student_id}', json.dumps(updated_data), content_type='application/json')\n    \n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:124: AssertionError", 
          "id": 1, 
          "running_time": "0.005"
        }, 
        "3": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_get_all_students", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_all_students>\n\n    def test_get_all_students(self):\n        response = self.client.get('/students')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:66: AssertionError", 
          "id": 3, 
          "running_time": "0.004"
        }, 
        "2": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_get_existing_student", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_existing_student>\n\n    def test_get_existing_student(self):\n        student_id = Students.objects.first().id\n        response = self.client.get(f'/students/{student_id}')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:90: AssertionError", 
          "id": 2, 
          "running_time": "0.005"
        }, 
        "5": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_get_non_existent_student", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_non_existent_student>\n\n    def test_get_non_existent_student(self):\n        non_existent_id = 9999\n        response = self.client.get(f'/students/{non_existent_id}')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:105: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fd08ba2e220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 5, 
          "running_time": "0.004"
        }, 
        "4": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_update_non_existent_student", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_update_non_existent_student>\n\n    def test_update_non_existent_student(self):\n        updated_data = {\n            \"first_name\": \"Charlie\",\n            \"last_name\": \"Brown\",\n            \"date_of_birth\": \"2000-01-01\",\n            \"grade\": 12,\n            \"phone\": \"9999999999\",\n            \"email\": \"charlie.brown@example.com\"\n        }\n        non_existent_id = 9999\n        response = self.client.patch(f'/students/{non_existent_id}', json.dumps(updated_data), content_type='application/json')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:145: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fd08ba2e220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 4, 
          "running_time": "0.006"
        }, 
        "6": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_create_student", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_create_student>\n\n    def test_create_student(self):\n        student_data = {\n            \"first_name\": \"John\",\n            \"last_name\": \"Doe\",\n            \"date_of_birth\": \"2000-01-01\",\n            \"grade\": 8,\n            \"phone\": \"1234567890\",\n            \"email\": \"john.doe@example.com\"\n        }\n    \n        response = self.client.post('/students', json.dumps(student_data), content_type='application/json')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fd08ba2e220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 6, 
          "running_time": "0.376"
        }
      }, 
      "score": 0.0
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "divya.agarwal9082@gmail.com"
  }, 
  {
    "proctor_verdict": "Severe", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Predicting Cyber Attack Incidents", 
    "full_name": "Shrutik Vinod Patil", 
    "run_details": {}, 
    "jupyter_data": {
      "Questions.ipynb": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/693g6dab/Questions.ipynb"
      }, 
      "problem_extra_data": {
        "negetive_class": "0", 
        "positive_class": "1", 
        "evaluation_type": "accuracy", 
        "choices": {
          "positive_classes": [
            "0", 
            "1"
          ], 
          "columns": [
            "ID", 
            "INCIDENT_ID", 
            "DATE", 
            "X_1", 
            "X_2", 
            "X_3", 
            "X_4", 
            "X_5", 
            "X_6", 
            "X_7", 
            "X_8", 
            "X_9", 
            "X_10", 
            "X_11", 
            "X_12", 
            "X_13", 
            "X_14", 
            "X_15", 
            "MALICIOUS_OFFENSE"
          ]
        }, 
        "target_column": "MALICIOUS_OFFENSE", 
        "problem_type": "Binary Classification", 
        "id_column": "ID"
      }, 
      "jupyter_notebook_access_url": "https://servercreator.doselect.com/djp/user/4b0a831331c04905ed2876497af2f064/lab/tree/Predicting Cyber Attack Incidents/Questions.ipynb?token=e7e67c637a8741998f8cc298eb96e2f7&reset", 
      "recall": 0.956, 
      "output.csv": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/693g6dab/output.csv"
      }, 
      "precision": 0.998, 
      "is_ready": false, 
      "user": "4b0a831331c04905ed2876497af2f064", 
      "fscore": 0.977, 
      "accuracy": 0.954
    }, 
    "mcq_choice": null, 
    "email": "shrutikpatil.iitkgp25@gmail.com"
  }, 
  {
    "proctor_verdict": "Severe", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Django: Student Management API", 
    "full_name": "Shrutik Vinod Patil", 
    "run_details": {
      "status": "REJ", 
      "testcases_total": 6, 
      "solution_id": 228118808, 
      "testcases_failed": 6, 
      "total_score": 5.0, 
      "testcases_passed": 0, 
      "testcases": {
        "1": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_create_student>\n\n    def test_create_student(self):\n        student_data = {\n            \"first_name\": \"John\",\n            \"last_name\": \"Doe\",\n            \"date_of_birth\": \"2000-01-01\",\n            \"grade\": 8,\n            \"phone\": \"1234567890\",\n            \"email\": \"john.doe@example.com\"\n        }\n    \n        response = self.client.post('/students', json.dumps(student_data), content_type='application/json')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f633f18b1f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.377", 
          "id": 1, 
          "name": "test_create_student"
        }, 
        "3": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_existing_student>\n\n    def test_get_existing_student(self):\n        student_id = Students.objects.first().id\n        response = self.client.get(f'/students/{student_id}')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:90: AssertionError", 
          "running_time": "0.005", 
          "id": 3, 
          "name": "test_get_existing_student"
        }, 
        "2": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_all_students>\n\n    def test_get_all_students(self):\n        response = self.client.get('/students')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:66: AssertionError", 
          "running_time": "0.005", 
          "id": 2, 
          "name": "test_get_all_students"
        }, 
        "5": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_update_existing_student>\n\n    def test_update_existing_student(self):\n        updated_data = {\n            \"first_name\": \"Alice_updated\",\n            \"last_name\": \"Smith_updated\",\n            \"date_of_birth\": \"1998-05-16\",\n            \"grade\": 11,\n            \"phone\": \"1234567899\",\n            \"email\": \"alice.updated@example.com\"\n        }\n        student_id = Students.objects.first().id\n        response = self.client.patch(f'/students/{student_id}', json.dumps(updated_data), content_type='application/json')\n    \n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:124: AssertionError", 
          "running_time": "0.005", 
          "id": 5, 
          "name": "test_update_existing_student"
        }, 
        "4": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_non_existent_student>\n\n    def test_get_non_existent_student(self):\n        non_existent_id = 9999\n        response = self.client.get(f'/students/{non_existent_id}')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:105: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f633f18b1f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.004", 
          "id": 4, 
          "name": "test_get_non_existent_student"
        }, 
        "6": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_update_non_existent_student>\n\n    def test_update_non_existent_student(self):\n        updated_data = {\n            \"first_name\": \"Charlie\",\n            \"last_name\": \"Brown\",\n            \"date_of_birth\": \"2000-01-01\",\n            \"grade\": 12,\n            \"phone\": \"9999999999\",\n            \"email\": \"charlie.brown@example.com\"\n        }\n        non_existent_id = 9999\n        response = self.client.patch(f'/students/{non_existent_id}', json.dumps(updated_data), content_type='application/json')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:145: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f633f18b1f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.006", 
          "id": 6, 
          "name": "test_update_non_existent_student"
        }
      }, 
      "score": 0.0
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "shrutikpatil.iitkgp25@gmail.com"
  }, 
  {
    "proctor_verdict": "Severe", 
    "code": "#importing libraries\nimport pandas as pd\nimport numpy as np\n#reading the dataset\ndata = pd.read_csv('/data/training/dataset.csv',encoding='utf-8')\ndata = data.applymap(lambda x: x.encode('ascii', 'ignore').decode('ascii') if isinstance(x, str) else x)\n\n# task 1: top 5 sports that have awarded the most medals\ntask1 = data.groupby('Sport').size().reset_index(name='Medal').sort_values(by = 'Medal', ascending=False).head(5)\n\n# saving task1 output\ntask1.to_csv('/code/task1.csv', index=False)\n\n# task 2: top 5 athletes who have won the most gold medals.\ngold_medalist_df = data[data['Medal']=='Gold']\ntask2 = gold_medalist_df.groupby('Athlete').size().reset_index(name = 'Medal').sort_values(by ='Medal' ,ascending=False).head(5)\n\n# saving task2 output\ntask2.to_csv('/code/task2.csv', index=False)\n\n# task 3: top 5 Olympic events that have attracted the largest number of athletes.\ntask3 = data.groupby('Event')['Athlete'].nunique().reset_index(name = 'Athlete').sort_values(by = 'Athlete',ascending=False).head(5)\n\n# saving task3 output\ntask3.to_csv('/code/task3.csv', index=False)\n\n# task 4: top 5 sports with the most number of female gold medalists.\ntask4 = data[(data['Medal']=='Gold') & (data['Gender']=='female')].groupby('Sport').size().reset_index(name = 'Medal').sort_values(by = 'Medal', ascending=False).head(5)\n\n# saving task4 output\ntask4.to_csv('/code/task4.csv', index=False)\n\n", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Olympics Analysis", 
    "full_name": "Shrutik Vinod Patil", 
    "run_details": {
      "status": "PAC", 
      "testcases_total": 4, 
      "solution_id": 228110297, 
      "sid": "DSC:2025-07-30:9d034d26-d235-48c4-9068-21dc0c6895ea", 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 1, 
      "evaluation_status": "completed", 
      "assessment_id": 0, 
      "testcases_passed": 3, 
      "testcases": {
        "1498964": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "88MB", 
          "cputime": "1s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.07s", 
          "id": 1498964, 
          "name": "Testcase #1"
        }, 
        "1831468": {
          "status": "NC", 
          "description": "Testcase failed.", 
          "weight": 1, 
          "memory_usage": "88MB", 
          "cputime": "1s", 
          "is_sample": false, 
          "output": "Task 4: The size of expected output and your output does not match!\nTraceback (most recent call last):\n  File \"/code/eval.py3\", line 11, in <module>\n    assert (False)\nAssertionError\n", 
          "running_time": "2.08s", 
          "id": 1831468, 
          "name": "Testcase #4"
        }, 
        "1831466": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "88MB", 
          "cputime": "1s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.10s", 
          "id": 1831466, 
          "name": "Testcase #2"
        }, 
        "1831467": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "88MB", 
          "cputime": "1s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.09s", 
          "id": 1831467, 
          "name": "Testcase #3"
        }
      }, 
      "score": 11.25, 
      "evaluation_started": "2025-07-30T17:58:57Z", 
      "evaluation_ended": "2025-07-30T17:59:14Z", 
      "tid": "1e7822f55e96dde4a2e9ce814996c640", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "shrutikpatil.iitkgp25@gmail.com"
  }, 
  {
    "proctor_verdict": "Severe", 
    "code": "#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'count_word' function below.\n# \n# The function is expected to return an INTEGER ARRAY.\n# The function accepts STRING ARRAY ss as parameter.\n#\n\ndef count_word(ss):\n\t# Write your code here\n\tres = []\n\tfor i in range(len(ss)):\n\t\tans = len(ss[i])\n\t\tres.append(ans)\n\treturn res\n\t\n\nif __name__ == '__main__':\n\tss_count = int(input().strip())\n\n\tss = []\n\n\tfor _ in range(ss_count):\n\t\tss_item = input()\n\t\tss.append(ss_item)\n\n\tresult = count_word(ss)\n\n\tprint('\\n'.join(map(str, result)))\n", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Word Length", 
    "full_name": "Shrutik Vinod Patil", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 6, 
      "solution_id": 228118409, 
      "score": 5.0, 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "evaluation_ended": "2025-07-30T17:29:03Z", 
      "testcases_passed": 6, 
      "queue": "code-eval", 
      "testcases": {
        "1935862": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #6", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 1935862, 
          "memory_usage": "116kB"
        }, 
        "33067": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #2", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33067, 
          "memory_usage": "7MB"
        }, 
        "33066": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 0, 
          "expected_output": "3\n3\n5", 
          "cputime": "0s", 
          "name": "Testcase #1", 
          "is_sample": true, 
          "output": "", 
          "input": "3\none\ntwo\nthree", 
          "running_time": "0.00s", 
          "id": 33066, 
          "memory_usage": "6MB"
        }, 
        "33068": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #3", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33068, 
          "memory_usage": "6MB"
        }, 
        "1935750": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #4", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 1935750, 
          "memory_usage": "6MB"
        }, 
        "1935803": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #5", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 1935803, 
          "memory_usage": "9MB"
        }
      }, 
      "assessment_id": 0, 
      "evaluation_started": "2025-07-30T17:29:00Z", 
      "sid": "SCR:2025-07-30:c28ed29b-dbb1-4afd-8844-8c3e0d4f6098", 
      "tid": "d49e6612d1a353ef9bedd59e657c329d", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "shrutikpatil.iitkgp25@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "# importing libraries\nimport pandas as pd \nimport numpy as np \n\n# reading dataset\ndata = pd.read_csv('/data/training/dataset.csv')\n\n# dropping the mentioned columns\ncolumns_to_drop=['VehicleID','IncidentAddress','Country','InsurancePolicyNumber',\n                 'DateOfPolicyCoverage','DateOfIncident']\ndata.drop(columns=columns_to_drop,inplace=True)\n# Replacing the mentioned values with null vales\nmissing_values=['?','???','-1','-5','MISSINGVALUE','mode']\ndata.replace(missing_values,np.nan,inplace=True)\n\n# Drop columns with null value more than 30%\nthreshold=0.3*len(data)\ndata.dropna(axis=1,thresh=len(data)-threshold,inplace=True)\n\n\n# Imputing missing values\nfor col in data.columns:\n    if data[col].dtype=='object':\n        data[col].fillna(data[col].mode()[0],inplace=True)\n    else:\n        data[col].fillna(data[col].astype(float).mean(),inplace=True)\n\n\n# Replacing column 'TypeOfIncident' values\nincident_mapping={'Single Vehicle Collision':1,'Multi-vehicle Collision':2,'Parked Car':3,'Vehicle Theft':4}\ndata['TypeOfIncident']=data['TypeOfIncident'].map(incident_mapping)\n\n# Replacing column 'TypeOfCollission' values\ncollision_mapping={'Side Collision':1,'Rear Collision':2,'Front Collision':3}\ndata['TypeOfCollission']=data['TypeOfCollission'].map(collision_mapping)\n\n\n# saving the output\n# final_df.to_csv('/code/output.csv', index=False)\ndata.to_csv('/code/output.csv',index=False)", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Data Prep Odyssey: Insurance Analytics", 
    "full_name": "Mallela Chandra Bharath Kumar Reddy", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 6, 
      "solution_id": 228110070, 
      "score": 15.0, 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "evaluation_ended": "2025-07-30T16:32:49Z", 
      "testcases_passed": 6, 
      "testcases": {
        "1820966": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "3s", 
          "name": "Testcase #4", 
          "is_sample": false, 
          "output": "", 
          "running_time": "4.45s", 
          "id": 1820966, 
          "memory_usage": "90MB"
        }, 
        "1820965": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "3s", 
          "name": "Testcase #3", 
          "is_sample": false, 
          "output": "", 
          "running_time": "4.51s", 
          "id": 1820965, 
          "memory_usage": "90MB"
        }, 
        "1820970": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "3s", 
          "name": "Testcase #6", 
          "is_sample": false, 
          "output": "", 
          "running_time": "4.45s", 
          "id": 1820970, 
          "memory_usage": "90MB"
        }, 
        "1820969": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "3s", 
          "name": "Testcase #5", 
          "is_sample": false, 
          "output": "", 
          "running_time": "4.34s", 
          "id": 1820969, 
          "memory_usage": "91MB"
        }, 
        "1820918": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "3s", 
          "name": "Testcase #2", 
          "is_sample": false, 
          "output": "", 
          "running_time": "4.49s", 
          "id": 1820918, 
          "memory_usage": "89MB"
        }, 
        "1820349": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "3s", 
          "name": "Testcase #1", 
          "is_sample": false, 
          "output": "", 
          "running_time": "4.23s", 
          "id": 1820349, 
          "memory_usage": "90MB"
        }
      }, 
      "assessment_id": 0, 
      "evaluation_started": "2025-07-30T16:31:58Z", 
      "sid": "DSC:2025-07-30:cc82141e-c09a-40f1-86a7-0c9ebef5f279", 
      "tid": "fbebd2c5f1cb45a844ec7e0830d46b70", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "chandrabharathkumarreddy11@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "def print_numbers_in_range(start, end):\n    # Write your code here\n    if start<1 or end>100:\n        print(\"Out of Range\")\n    elif (end-start+1)!=10:\n        print(\"Difference Not in Range\")\n    else:\n        print(list(range(start,end+1)))\n\nT = int(input())\n\nfor _ in range(T):\n    # Input: start and end points for each test case\n    start, end = map(int, input().split())\n    print_numbers_in_range(start, end)", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Algorithms: Numbered Lists", 
    "full_name": "Mallela Chandra Bharath Kumar Reddy", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 12, 
      "solution_id": 228118270, 
      "score": 5.0, 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "evaluation_ended": "2025-07-30T17:12:28Z", 
      "testcases_passed": 12, 
      "queue": "code-eval", 
      "testcases": {
        "2238787": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #4", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238787, 
          "memory_usage": "7MB"
        }, 
        "2238795": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #10", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238795, 
          "memory_usage": "6MB"
        }, 
        "2238796": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #11", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238796, 
          "memory_usage": "7MB"
        }, 
        "2238797": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #12", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238797, 
          "memory_usage": "112kB"
        }, 
        "2238790": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #7", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238790, 
          "memory_usage": "7MB"
        }, 
        "2238791": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #8", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238791, 
          "memory_usage": "7MB"
        }, 
        "2238792": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #9", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238792, 
          "memory_usage": "6MB"
        }, 
        "2238789": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #6", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238789, 
          "memory_usage": "7MB"
        }, 
        "2238788": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #5", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238788, 
          "memory_usage": "7MB"
        }, 
        "60957": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 0, 
          "expected_output": "Difference Not in Range\n[3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", 
          "cputime": "0s", 
          "name": "Testcase #2", 
          "is_sample": true, 
          "output": "", 
          "input": "2\n2 4\n3 12", 
          "running_time": "0.00s", 
          "id": 60957, 
          "memory_usage": "6MB"
        }, 
        "60952": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 0, 
          "expected_output": "Difference Not in Range\n[22, 23, 24, 25, 26, 27, 28, 29, 30, 31]\nOut of Range", 
          "cputime": "0s", 
          "name": "Testcase #1", 
          "is_sample": true, 
          "output": "", 
          "input": "3\n1 9\n22 31\n90 103", 
          "running_time": "0.00s", 
          "id": 60952, 
          "memory_usage": "8MB"
        }, 
        "60961": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #3", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 60961, 
          "memory_usage": "7MB"
        }
      }, 
      "assessment_id": 0, 
      "evaluation_started": "2025-07-30T17:12:24Z", 
      "sid": "SCR:2025-07-30:8456ce98-e6ee-44ec-8f1f-de20397b0345", 
      "tid": "18ef01b28eac96420333ae47b85c93d2", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "chandrabharathkumarreddy11@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Django: Student Management API", 
    "full_name": "Mallela Chandra Bharath Kumar Reddy", 
    "run_details": {
      "status": "REJ", 
      "testcases_total": 6, 
      "solution_id": 228106291, 
      "testcases_failed": 6, 
      "total_score": 5.0, 
      "testcases_passed": 0, 
      "testcases": {
        "1": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_create_student>\n\n    def test_create_student(self):\n        student_data = {\n            \"first_name\": \"John\",\n            \"last_name\": \"Doe\",\n            \"date_of_birth\": \"2000-01-01\",\n            \"grade\": 8,\n            \"phone\": \"1234567890\",\n            \"email\": \"john.doe@example.com\"\n        }\n    \n        response = self.client.post('/students', json.dumps(student_data), content_type='application/json')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fec84b30550>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.226", 
          "id": 1, 
          "name": "test_create_student"
        }, 
        "3": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_existing_student>\n\n    def test_get_existing_student(self):\n        student_id = Students.objects.first().id\n        response = self.client.get(f'/students/{student_id}')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:90: AssertionError", 
          "running_time": "0.003", 
          "id": 3, 
          "name": "test_get_existing_student"
        }, 
        "2": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_all_students>\n\n    def test_get_all_students(self):\n        response = self.client.get('/students')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:66: AssertionError", 
          "running_time": "0.003", 
          "id": 2, 
          "name": "test_get_all_students"
        }, 
        "5": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_update_existing_student>\n\n    def test_update_existing_student(self):\n        updated_data = {\n            \"first_name\": \"Alice_updated\",\n            \"last_name\": \"Smith_updated\",\n            \"date_of_birth\": \"1998-05-16\",\n            \"grade\": 11,\n            \"phone\": \"1234567899\",\n            \"email\": \"alice.updated@example.com\"\n        }\n        student_id = Students.objects.first().id\n        response = self.client.patch(f'/students/{student_id}', json.dumps(updated_data), content_type='application/json')\n    \n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:124: AssertionError", 
          "running_time": "0.003", 
          "id": 5, 
          "name": "test_update_existing_student"
        }, 
        "4": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_non_existent_student>\n\n    def test_get_non_existent_student(self):\n        non_existent_id = 9999\n        response = self.client.get(f'/students/{non_existent_id}')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:105: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fec84b30550>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.002", 
          "id": 4, 
          "name": "test_get_non_existent_student"
        }, 
        "6": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_update_non_existent_student>\n\n    def test_update_non_existent_student(self):\n        updated_data = {\n            \"first_name\": \"Charlie\",\n            \"last_name\": \"Brown\",\n            \"date_of_birth\": \"2000-01-01\",\n            \"grade\": 12,\n            \"phone\": \"9999999999\",\n            \"email\": \"charlie.brown@example.com\"\n        }\n        non_existent_id = 9999\n        response = self.client.patch(f'/students/{non_existent_id}', json.dumps(updated_data), content_type='application/json')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:145: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fec84b30550>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.003", 
          "id": 6, 
          "name": "test_update_non_existent_student"
        }
      }, 
      "score": 0.0
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "chandrabharathkumarreddy11@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Binary Classification: Deposit Subscriptions", 
    "full_name": "P.M.SALMAN KHAN", 
    "run_details": {}, 
    "jupyter_data": {
      "Questions.ipynb": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/84plxge3/Questions.ipynb"
      }, 
      "output.csv": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/84plxge3/output.csv"
      }, 
      "jupyter_notebook_access_url": "https://servercreator.doselect.com/djp/user/c76de8f444084ad0c4ad9c6c1a2040b1/lab/tree/Binary Classification: Deposit Subscriptions/Questions.ipynb?token=2c585d6071da4feab9125fbc1c9652ae&reset", 
      "recall": 0.656, 
      "problem_extra_data": {
        "negetive_class": "no", 
        "positive_class": "yes", 
        "evaluation_type": "accuracy", 
        "choices": {
          "positive_classes": [
            "no", 
            "yes"
          ], 
          "columns": [
            "ID", 
            "age", 
            "job", 
            "marital", 
            "education", 
            "default", 
            "balance", 
            "housing", 
            "loan", 
            "contact", 
            "day", 
            "month", 
            "duration", 
            "campaign", 
            "pdays", 
            "previous", 
            "poutcome", 
            "y"
          ]
        }, 
        "target_column": "y", 
        "problem_type": "Binary Classification", 
        "id_column": "ID"
      }, 
      "precision": 0.324, 
      "is_ready": false, 
      "user": "c76de8f444084ad0c4ad9c6c1a2040b1", 
      "fscore": 0.434, 
      "accuracy": 0.901
    }, 
    "mcq_choice": null, 
    "email": "patanmohammadsalmankhan@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "# importing libraries\nimport pandas as pd \nimport numpy as np \n\n# reading dataset\ndata = pd.read_csv('/data/training/dataset.csv')\ndf = pd.DataFrame(data)\n# dropping the mentioned columns\n#cols_remove = ['VehicleID', 'DataOfPolicyCoverage', 'Country', 'InsuredZipCode', 'IncidentAddress', 'InsurancePolicyNumber', '']\ncols_remove = ['VehicleID', 'IncidentAddress', 'Country', 'InsurancePolicyNumber', 'DateOfPolicyCoverage', 'DateOfIncident']\ndf = df.drop(columns=cols_remove, errors='ignore')\n\n\n# Replacing the mentioned values with null vales\ndf = df.replace(['?', '??', '???', '-1', '-5', 'MISSINGVALUE', 'mode'], np.nan)\n\n# Drop columns with null value more than 30%\nthres = len(df) * 0.7\ndf = df.dropna(axis=1, thresh=thres)\n\n# Imputing missing values\nfor c in df.columns:\n    if df[c].dtype == 'object':\n        mode = df[c].mode(dropna=True)\n        if not mode.empty:\n            df[c] = df[c].fillna(mode[0])\n        else:\n            df[c] = df[c].fillna('MISSINGVALUE')\n    else :\n        df[c] = df[c].fillna(df[c].mean())\n\n\n# Replacing column 'TypeOfIncident' values\nim ={\n    'Single Vehicle Collision' : 1,\n    'Multi-vehicle Collision' : 2,\n    'Parked Car' : 3,\n    'Vehicle Theft' : 4\n}\n\ndf['TypeOfIncident'] = df['TypeOfIncident'].map(im)\n\n# Replacing column 'TypeOfCollission' values\ncm = {\n    'Side Collision' : 1,\n    'Rear Collision' : 2,\n    'Front Collision' : 3\n}\n\ndf['TypeOfCollission'] = df['TypeOfCollission'].map(cm)\n\n\n# saving the output\ndf.to_csv('/code/output.csv', index=False)", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Data Prep Odyssey: Insurance Analytics", 
    "full_name": "P.M.SALMAN KHAN", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 6, 
      "solution_id": 228111365, 
      "sid": "DSC:2025-07-30:41ff1fb4-0dc2-46a2-829c-5ae82004013a", 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "assessment_id": 0, 
      "testcases_passed": 6, 
      "testcases": {
        "1820966": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "98MB", 
          "cputime": "2s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.98s", 
          "id": 1820966, 
          "name": "Testcase #4"
        }, 
        "1820965": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "99MB", 
          "cputime": "2s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "3.00s", 
          "id": 1820965, 
          "name": "Testcase #3"
        }, 
        "1820970": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "99MB", 
          "cputime": "2s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.97s", 
          "id": 1820970, 
          "name": "Testcase #6"
        }, 
        "1820969": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "99MB", 
          "cputime": "2s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.90s", 
          "id": 1820969, 
          "name": "Testcase #5"
        }, 
        "1820349": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "99MB", 
          "cputime": "2s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.97s", 
          "id": 1820349, 
          "name": "Testcase #1"
        }, 
        "1820918": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "98MB", 
          "cputime": "2s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "3.00s", 
          "id": 1820918, 
          "name": "Testcase #2"
        }
      }, 
      "score": 15.0, 
      "evaluation_started": "2025-07-30T17:11:19Z", 
      "evaluation_ended": "2025-07-30T17:11:53Z", 
      "tid": "9c6186a3f41f20a6acf338df4ced6d72", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "patanmohammadsalmankhan@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "import math\nimport os\nimport random\nimport re\nimport sys\n#\n# Complete the 'findLongestWord' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n# 1. INTEGER n\n# 2. STRING ARRAY arr\n#\n\ndef findLongestWord(n, arr):\n    # Write your code here\n    sum = []\n    for i in arr:\n        sum.append(len(i))\n    return max(sum)\n\n\nif __name__ == '__main__':\n    n = int(raw_input().strip())\n    arr = []\n    for _ in range(n):\n        arr_item = raw_input()\n        arr.append(arr_item)\n    result = findLongestWord(n, arr)\n    print str(result)", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Longest Word", 
    "full_name": "P.M.SALMAN KHAN", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 3, 
      "solution_id": 228111095, 
      "score": 5.0, 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "evaluation_ended": "2025-07-30T16:16:36Z", 
      "testcases_passed": 3, 
      "queue": "code-eval", 
      "testcases": {
        "33069": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 0, 
          "expected_output": "7", 
          "cputime": "0s", 
          "name": "Testcase #1", 
          "is_sample": true, 
          "output": "", 
          "input": "3\nwhich\nis\nlargest", 
          "running_time": "0.00s", 
          "id": 33069, 
          "memory_usage": "0kB"
        }, 
        "33070": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #2", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33070, 
          "memory_usage": "8MB"
        }, 
        "33071": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #3", 
          "is_sample": false, 
          "output": "", 
          "running_time": "3.00s", 
          "id": 33071, 
          "memory_usage": "6MB"
        }
      }, 
      "assessment_id": 0, 
      "evaluation_started": "2025-07-30T16:16:31Z", 
      "sid": "SCR:2025-07-30:fabfc7a1-4c8e-40f7-85b4-e123df28f187", 
      "tid": "77dd2c69786f6176edf09468f9b2848d", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "patanmohammadsalmankhan@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Django: Student Management API", 
    "full_name": "P.M.SALMAN KHAN", 
    "run_details": {
      "status": "REJ", 
      "testcases_total": 6, 
      "solution_id": 228111296, 
      "testcases_failed": 6, 
      "total_score": 5.0, 
      "testcases_passed": 0, 
      "testcases": {
        "1": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_create_student>\n\n    def test_create_student(self):\n        student_data = {\n            \"first_name\": \"John\",\n            \"last_name\": \"Doe\",\n            \"date_of_birth\": \"2000-01-01\",\n            \"grade\": 8,\n            \"phone\": \"1234567890\",\n            \"email\": \"john.doe@example.com\"\n        }\n    \n        response = self.client.post('/students', json.dumps(student_data), content_type='application/json')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f13117c0550>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.213", 
          "id": 1, 
          "name": "test_create_student"
        }, 
        "3": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_existing_student>\n\n    def test_get_existing_student(self):\n        student_id = Students.objects.first().id\n        response = self.client.get(f'/students/{student_id}')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:90: AssertionError", 
          "running_time": "0.003", 
          "id": 3, 
          "name": "test_get_existing_student"
        }, 
        "2": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_all_students>\n\n    def test_get_all_students(self):\n        response = self.client.get('/students')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:66: AssertionError", 
          "running_time": "0.003", 
          "id": 2, 
          "name": "test_get_all_students"
        }, 
        "5": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_update_existing_student>\n\n    def test_update_existing_student(self):\n        updated_data = {\n            \"first_name\": \"Alice_updated\",\n            \"last_name\": \"Smith_updated\",\n            \"date_of_birth\": \"1998-05-16\",\n            \"grade\": 11,\n            \"phone\": \"1234567899\",\n            \"email\": \"alice.updated@example.com\"\n        }\n        student_id = Students.objects.first().id\n        response = self.client.patch(f'/students/{student_id}', json.dumps(updated_data), content_type='application/json')\n    \n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:124: AssertionError", 
          "running_time": "0.003", 
          "id": 5, 
          "name": "test_update_existing_student"
        }, 
        "4": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_non_existent_student>\n\n    def test_get_non_existent_student(self):\n        non_existent_id = 9999\n        response = self.client.get(f'/students/{non_existent_id}')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:105: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f13117c0550>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.002", 
          "id": 4, 
          "name": "test_get_non_existent_student"
        }, 
        "6": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_update_non_existent_student>\n\n    def test_update_non_existent_student(self):\n        updated_data = {\n            \"first_name\": \"Charlie\",\n            \"last_name\": \"Brown\",\n            \"date_of_birth\": \"2000-01-01\",\n            \"grade\": 12,\n            \"phone\": \"9999999999\",\n            \"email\": \"charlie.brown@example.com\"\n        }\n        non_existent_id = 9999\n        response = self.client.patch(f'/students/{non_existent_id}', json.dumps(updated_data), content_type='application/json')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:145: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f13117c0550>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.003", 
          "id": 6, 
          "name": "test_update_non_existent_student"
        }
      }, 
      "score": 0.0
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "patanmohammadsalmankhan@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Binary Classification: Loan Approval", 
    "full_name": "Pradhyumna Paloju", 
    "run_details": {}, 
    "jupyter_data": {
      "Questions.ipynb": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/vgy834gx/Questions.ipynb"
      }, 
      "output.csv": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/vgy834gx/output.csv"
      }, 
      "jupyter_notebook_access_url": "https://servercreator.doselect.com/djp/user/f3235dc3092e3ea4d0c61dca6cf81be6/lab/tree/Binary Classification: Loan Approval/Questions.ipynb?token=a75983a6735d432a9a3e0eb00144a93c&reset", 
      "recall": 0.855, 
      "problem_extra_data": {
        "negetive_class": "0", 
        "positive_class": "1", 
        "evaluation_type": "accuracy", 
        "choices": {
          "positive_classes": [
            "0", 
            "1"
          ], 
          "columns": [
            "ID", 
            "ApplicationDate", 
            "EmploymentStatus", 
            "EducationLevel", 
            "MaritalStatus", 
            "HomeOwnershipStatus", 
            "LoanPurpose", 
            "AnnualIncome", 
            "BaseInterestRate", 
            "LoanAmount", 
            "NetWorth", 
            "MonthlyLoanPayment", 
            "CreditScore", 
            "Age", 
            "Experience", 
            "LoanDuration", 
            "CreditCardUtilizationRate", 
            "NumberOfCreditInquiries", 
            "JobTenure", 
            "NumberOfOpenCreditLines", 
            "CheckingAccountBalance", 
            "DebtToIncomeRatio", 
            "BankruptcyHistory", 
            "LoanApproved"
          ]
        }, 
        "id_column": "ID", 
        "problem_type": "Binary Classification", 
        "target_column": "LoanApproved"
      }, 
      "precision": 0.695, 
      "is_ready": false, 
      "user": "f3235dc3092e3ea4d0c61dca6cf81be6", 
      "fscore": 0.767, 
      "accuracy": 0.896
    }, 
    "mcq_choice": null, 
    "email": "pradhyumnapaloju@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Django: Contact Manager Application", 
    "full_name": "Pradhyumna Paloju", 
    "run_details": {
      "status": "REJ", 
      "testcases_total": 7, 
      "solution_id": 228105273, 
      "testcases_failed": 7, 
      "total_score": 5.0, 
      "testcases_passed": 0, 
      "testcases": {
        "1": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_create_contact", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_create_contact>\n\n    def test_create_contact(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        response = self.client.post('/contacts/', json.dumps(contact_by_alexia), content_type='application/json')\n>       self.assertEqual(response.status_code, 201)\nE       AssertionError: 404 != 201\n\ncontact/tests.py:77: AssertionError", 
          "id": 1, 
          "running_time": "0.004"
        }, 
        "3": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_get_all_contacts", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_get_all_contacts>\n\n    def test_get_all_contacts(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        self.client.post('/users/', json.dumps(user_thalia), content_type='application/json')\n    \n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n    \n        response = self.client.get('/contacts/')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\ncontact/tests.py:90: AssertionError", 
          "id": 3, 
          "running_time": "0.007"
        }, 
        "2": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_patch_with_invalid_id", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_patch_with_invalid_id>\n\n    def test_patch_with_invalid_id(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n    \n        contact_id = 9\n        update_json = {\n            'email': 'alexia@alexia.com',\n            'phone_number': '0001237869',\n            'address': '123 Main, St. Peterson Lane, NY 120276',\n        }\n        response = self.client.patch(f'/contacts/{contact_id}/', json.dumps(update_json), content_type='application/json')\n        self.assertEqual(response.status_code, 404)\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:134: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f4cd12b2220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 2, 
          "running_time": "0.009"
        }, 
        "5": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_patch_with_id", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_patch_with_id>\n\n    def test_patch_with_id(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        contact = self.client.post('/contacts/', json.dumps(contact_by_alexia), content_type='application/json')\n>       contact_data = json.loads(contact.content)\n\ncontact/tests.py:102: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f4cd12b2220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 5, 
          "running_time": "0.004"
        }, 
        "4": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_delete_contact", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_delete_contact>\n\n    def test_delete_contact(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n        contact_id = 1\n        response = self.client.delete(f'/contacts/{contact_id}/')\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:150: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f4cd12b2220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 4, 
          "running_time": "0.007"
        }, 
        "7": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_delete_with_invalid_id", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_delete_with_invalid_id>\n\n    def test_delete_with_invalid_id(self):\n        contact_id = 10\n        response = self.client.delete(f'/contacts/{contact_id}/')\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:157: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f4cd12b2220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 7, 
          "running_time": "0.005"
        }, 
        "6": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_user_creation", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestUserModel testMethod=test_user_creation>\n\n    def test_user_creation(self):\n        response = self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n>       self.assertEqual(response.status_code, 201)\nE       AssertionError: 404 != 201\n\ncontact/tests.py:65: AssertionError", 
          "id": 6, 
          "running_time": "0.339"
        }
      }, 
      "score": 0.0
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "pradhyumnapaloju@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "# importing libraries\nimport pandas as pd \nimport numpy as np \n\n# reading dataset\ndata = pd.read_csv('/data/training/dataset.csv')\n\n# dropping the mentioned columns\ncol_drop=['VehicleID','IncidentAddress','Country','InsurancePolicyNumber','DateOfPolicyCoverage','Country','DateOfIncident']\ndata.drop(columns=col_drop,inplace=True,errors='ignore')\n\n# Replacing the mentioned values with null vales\nment_val=['?','???','-1','-5','MISSINGVALUE','mode']\ndata.replace(ment_val,np.nan,inplace=True)\n\n# Drop columns with null value more than 30%\nthreshold=0.3*len(data)\ndata.dropna(thresh=len(data)-threshold,axis=1,inplace=True)\n\n# Imputing missing values\nfor col in data.columns:\n    if data[col].dtype=='object':\n        data[col].fillna(data[col].mode()[0],inplace=True)\n    else:\n        data[col]=pd.to_numeric(data[col],errors='coerce')\n        data[col].fillna(data[col].mean(),inplace=True)\n\n\n# Replacing column 'TypeOfIncident' values\nmap_inc={\n    'Single Vehicle Collision': 1,\n    'Multi-vehicle Collision': 2,\n    'Parked Car': 3,\n    'Vehicle Theft': 4\n}\nif 'TypeOfIncident' in data.columns:\n    data['TypeOfIncident']=data['TypeOfIncident'].map(map_inc).fillna(data['TypeOfIncident'])\n\n# Replacing column 'TypeOfCollission' values\nmap_col={\n    'Side Collision': 1,\n    'Rear Collision': 2,\n    'Front Collision': 3\n}\nif 'TypeOfCollission' in data.columns:\n    data['TypeOfCollission']=data['TypeOfCollission'].map(map_col).fillna(data['TypeOfCollission'])\n\n# saving the output\ndata.to_csv('/code/output.csv', index=False)", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Data Prep Odyssey: Insurance Analytics", 
    "full_name": "Pradhyumna Paloju", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 6, 
      "solution_id": 228108085, 
      "sid": "DSC:2025-07-30:5ab982b1-99ae-440d-8ef1-517d04e87e5d", 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "assessment_id": 0, 
      "testcases_passed": 6, 
      "testcases": {
        "1820966": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "90MB", 
          "cputime": "2s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "3.11s", 
          "id": 1820966, 
          "name": "Testcase #4"
        }, 
        "1820965": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "90MB", 
          "cputime": "3s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "3.24s", 
          "id": 1820965, 
          "name": "Testcase #3"
        }, 
        "1820970": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "90MB", 
          "cputime": "2s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "3.03s", 
          "id": 1820970, 
          "name": "Testcase #6"
        }, 
        "1820969": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "87MB", 
          "cputime": "2s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "3.13s", 
          "id": 1820969, 
          "name": "Testcase #5"
        }, 
        "1820349": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "86MB", 
          "cputime": "2s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "3.24s", 
          "id": 1820349, 
          "name": "Testcase #1"
        }, 
        "1820918": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "89MB", 
          "cputime": "3s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "3.28s", 
          "id": 1820918, 
          "name": "Testcase #2"
        }
      }, 
      "score": 15.0, 
      "evaluation_started": "2025-07-30T16:15:36Z", 
      "evaluation_ended": "2025-07-30T16:16:12Z", 
      "tid": "b8757bf420ffbd9c5bbb5044bbe3ae49", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "pradhyumnapaloju@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'count_word' function below.\n# \n# The function is expected to return an INTEGER ARRAY.\n# The function accepts STRING ARRAY ss as parameter.\n#\n\ndef count_word(ss):\n\t# Write your code here\n\treturn [len(word) for word in ss]\n\t\n\t\n\nif __name__ == '__main__':\n\tss_count = int(input().strip())\n\n\tss = []\n\n\tfor _ in range(ss_count):\n\t\tss_item = input()\n\t\tss.append(ss_item)\n\n\tresult = count_word(ss)\n\n\tprint('\\n'.join(map(str, result)))\n", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Word Length", 
    "full_name": "Pradhyumna Paloju", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 6, 
      "solution_id": 228104826, 
      "score": 5.0, 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "evaluation_ended": "2025-07-30T15:27:06Z", 
      "testcases_passed": 6, 
      "queue": "code-eval", 
      "testcases": {
        "1935862": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #6", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 1935862, 
          "memory_usage": "116kB"
        }, 
        "33067": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #2", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33067, 
          "memory_usage": "6MB"
        }, 
        "33066": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 0, 
          "expected_output": "3\n3\n5", 
          "cputime": "0s", 
          "name": "Testcase #1", 
          "is_sample": true, 
          "output": "", 
          "input": "3\none\ntwo\nthree", 
          "running_time": "0.00s", 
          "id": 33066, 
          "memory_usage": "7MB"
        }, 
        "33068": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #3", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33068, 
          "memory_usage": "6MB"
        }, 
        "1935750": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #4", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 1935750, 
          "memory_usage": "7MB"
        }, 
        "1935803": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #5", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 1935803, 
          "memory_usage": "7MB"
        }
      }, 
      "assessment_id": 0, 
      "evaluation_started": "2025-07-30T15:27:04Z", 
      "sid": "SCR:2025-07-30:2061cd1e-fcf6-4ce6-b85f-44b6891cf8c7", 
      "tid": "091219bc3f1fb83aa65cb6d48e96421a", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "pradhyumnapaloju@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Binary Classification: Loan Approval", 
    "full_name": "Mallela Chandra Bharath Kumar Reddy", 
    "run_details": {}, 
    "jupyter_data": {
      "Questions.ipynb": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/rd6ga3ln/Questions.ipynb"
      }, 
      "output.csv": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/rd6ga3ln/output.csv"
      }, 
      "jupyter_notebook_access_url": "https://servercreator.doselect.com/djp/user/046213c4be4e913a6799d5bc22aeddf7/lab/tree/Binary Classification: Loan Approval/Questions.ipynb?token=91cb7dcc26444fb0964c01ebd907834b&reset", 
      "recall": 0.848, 
      "problem_extra_data": {
        "negetive_class": "0", 
        "positive_class": "1", 
        "evaluation_type": "accuracy", 
        "choices": {
          "positive_classes": [
            "0", 
            "1"
          ], 
          "columns": [
            "ID", 
            "ApplicationDate", 
            "EmploymentStatus", 
            "EducationLevel", 
            "MaritalStatus", 
            "HomeOwnershipStatus", 
            "LoanPurpose", 
            "AnnualIncome", 
            "BaseInterestRate", 
            "LoanAmount", 
            "NetWorth", 
            "MonthlyLoanPayment", 
            "CreditScore", 
            "Age", 
            "Experience", 
            "LoanDuration", 
            "CreditCardUtilizationRate", 
            "NumberOfCreditInquiries", 
            "JobTenure", 
            "NumberOfOpenCreditLines", 
            "CheckingAccountBalance", 
            "DebtToIncomeRatio", 
            "BankruptcyHistory", 
            "LoanApproved"
          ]
        }, 
        "id_column": "ID", 
        "problem_type": "Binary Classification", 
        "target_column": "LoanApproved"
      }, 
      "precision": 0.708, 
      "is_ready": false, 
      "user": "046213c4be4e913a6799d5bc22aeddf7", 
      "fscore": 0.772, 
      "accuracy": 0.897
    }, 
    "mcq_choice": null, 
    "email": "chandrabharathkumarreddy11@gmail.com"
  }, 
  {
    "proctor_verdict": "Severe", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Binary Classification: Loan Approval", 
    "full_name": "Nishith Gupta", 
    "run_details": {}, 
    "jupyter_data": {
      "Questions.ipynb": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/pg3qplo6/Questions.ipynb"
      }, 
      "output.csv": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/pg3qplo6/output.csv"
      }, 
      "jupyter_notebook_access_url": "https://servercreator.doselect.com/djp/user/98915ac21e59f52dfcb8fb582e8dd218/lab/tree/Binary Classification: Loan Approval/Questions.ipynb?token=1e5a6f7849494dc1ad3d17dbb6ffb4f4&reset", 
      "recall": 0.836, 
      "problem_extra_data": {
        "negetive_class": "0", 
        "positive_class": "1", 
        "evaluation_type": "accuracy", 
        "choices": {
          "positive_classes": [
            "0", 
            "1"
          ], 
          "columns": [
            "ID", 
            "ApplicationDate", 
            "EmploymentStatus", 
            "EducationLevel", 
            "MaritalStatus", 
            "HomeOwnershipStatus", 
            "LoanPurpose", 
            "AnnualIncome", 
            "BaseInterestRate", 
            "LoanAmount", 
            "NetWorth", 
            "MonthlyLoanPayment", 
            "CreditScore", 
            "Age", 
            "Experience", 
            "LoanDuration", 
            "CreditCardUtilizationRate", 
            "NumberOfCreditInquiries", 
            "JobTenure", 
            "NumberOfOpenCreditLines", 
            "CheckingAccountBalance", 
            "DebtToIncomeRatio", 
            "BankruptcyHistory", 
            "LoanApproved"
          ]
        }, 
        "id_column": "ID", 
        "problem_type": "Binary Classification", 
        "target_column": "LoanApproved"
      }, 
      "precision": 0.772, 
      "is_ready": false, 
      "user": "98915ac21e59f52dfcb8fb582e8dd218", 
      "fscore": 0.803, 
      "accuracy": 0.906
    }, 
    "mcq_choice": null, 
    "email": "nishith9900@gmail.com"
  }, 
  {
    "proctor_verdict": "Severe", 
    "code": "#importing libraries\nimport pandas as pd\nimport numpy as np\n\n#reading the dataset\ndata = pd.read_csv('/data/training/dataset.csv',encoding='utf-8')\ndata = data.applymap(lambda x: x.encode('ascii', 'ignore').decode('ascii') if isinstance(x, str) else x)\n\n# task 1: top 5 sports that have awarded the most medals\ntask1 = data.dropna(subset=['Medal'])\ntask1 = task1.groupby('Sport').size().reset_index(name='Medal')\ntask1 = task1.sort_values(by='Medal', ascending=False).head(5)\n\n# saving task1 output\ntask1.to_csv('/code/task1.csv', index=False)\n\n# task 2: top 5 athletes who have won the most gold medals.\ntask2 = data[data['Medal'] == 'Gold']\ntask2 = task2.groupby('Athlete').size().reset_index(name='Medal')\ntask2 = task2.sort_values(by='Medal', ascending=False).head(5)\n\n# saving task2 output\ntask2.to_csv('/code/task2.csv', index=False)\n\n# task 3: top 5 Olympic events that have attracted the largest number of athletes.\ntask3 = data[['Event', 'Athlete']].drop_duplicates()\ntask3 = task3.groupby('Event').size().reset_index(name='Athlete')\ntask3 = task3.sort_values(by='Athlete', ascending=False).head(5)\n\n\n# saving task3 output\ntask3.to_csv('/code/task3.csv', index=False)\n\n# task 4: top 5 sports with the most number of female gold medalists.\ntask4 = data[(data['Gender'] == 'Women') & (data['Medal'] == 'Gold')]\ntask4 = task4.groupby('Sport')['Athlete'].nunique().reset_index()\ntask4.rename(columns={'Athlete':'Women'}, inplace=True)\n# task4.columns = ['Sport','Women']\ntask4 = task4.sort_values(by=['Women', 'Sport'], ascending=[False, True]).head(5)\n# saving task4 output\ntask4.to_csv('/code/task4.csv', index=False)\n", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Olympics Analysis", 
    "full_name": "Nishith Gupta", 
    "run_details": {
      "status": "PAC", 
      "testcases_total": 4, 
      "solution_id": 228107814, 
      "sid": "DSC:2025-07-30:005a700c-312a-46fb-8691-882bbbe2d826", 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 1, 
      "evaluation_status": "completed", 
      "assessment_id": 0, 
      "testcases_passed": 3, 
      "testcases": {
        "1498964": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "88MB", 
          "cputime": "1s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.06s", 
          "id": 1498964, 
          "name": "Testcase #1"
        }, 
        "1831468": {
          "status": "NC", 
          "description": "Testcase failed.", 
          "weight": 1, 
          "memory_usage": "89MB", 
          "cputime": "1s", 
          "is_sample": false, 
          "output": "Traceback (most recent call last):\n  File \"/code/eval.py3\", line 28, in <module>\n    assert (expected_output.equals(output))\nAssertionError\n", 
          "running_time": "2.19s", 
          "id": 1831468, 
          "name": "Testcase #4"
        }, 
        "1831466": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "87MB", 
          "cputime": "1s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.18s", 
          "id": 1831466, 
          "name": "Testcase #2"
        }, 
        "1831467": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "88MB", 
          "cputime": "1s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.07s", 
          "id": 1831467, 
          "name": "Testcase #3"
        }
      }, 
      "score": 11.25, 
      "evaluation_started": "2025-07-30T16:42:54Z", 
      "evaluation_ended": "2025-07-30T16:43:12Z", 
      "tid": "71f14eb3fccef38b6f3d98fea9395e40", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "nishith9900@gmail.com"
  }, 
  {
    "proctor_verdict": "Severe", 
    "code": "import pandas as pd\nimport numpy as np\n\n\n\n\ndef additionalID(array_1, array_2):\n    # Write your code here and Return the Numpy Array\n    set1 = set(array_1.tolist())\n    set2 = set(array_2.tolist())\n\n    return np.array(list(set2 - set1))\n\n\n\n\nif __name__ == '__main__':\n    ls1 = np.array(list(map(int,input().split())))\n    ls2 = np.array(list(map(int,input().split())))\n    ans = additionalID(ls1, ls2)\n    ans = list(ans.tolist());\n    ans.sort()\n    print(*ans,sep=\" \")", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Find the odd man out", 
    "full_name": "Nishith Gupta", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 5, 
      "solution_id": 228111039, 
      "score": 5.0, 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "evaluation_ended": "2025-07-30T16:19:10Z", 
      "testcases_passed": 5, 
      "queue": "code-eval", 
      "testcases": {
        "573861": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #2", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 573861, 
          "memory_usage": "62MB"
        }, 
        "573860": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 0, 
          "expected_output": "2 5 6", 
          "cputime": "0s", 
          "name": "Testcase #1", 
          "is_sample": true, 
          "output": "", 
          "input": "1 4 7 3\n1 2 3 4 5 6 7", 
          "running_time": "0.00s", 
          "id": 573860, 
          "memory_usage": "61MB"
        }, 
        "2158098": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #4", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2158098, 
          "memory_usage": "61MB"
        }, 
        "2158103": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #5", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2158103, 
          "memory_usage": "60MB"
        }, 
        "573864": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #3", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 573864, 
          "memory_usage": "62MB"
        }
      }, 
      "assessment_id": 0, 
      "evaluation_started": "2025-07-30T16:19:05Z", 
      "sid": "SCR:2025-07-30:23f314af-b666-49f8-af17-c6a18b5b72a4", 
      "tid": "bba5a6aea00cca3a818707a9d1706f06", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "nishith9900@gmail.com"
  }, 
  {
    "proctor_verdict": "Minor", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Binary Classification: Loan Approval", 
    "full_name": "Hriday Sekhani", 
    "run_details": {}, 
    "jupyter_data": {
      "Questions.ipynb": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/pg3qpmgr/Questions.ipynb"
      }, 
      "problem_extra_data": {
        "negetive_class": "0", 
        "positive_class": "1", 
        "evaluation_type": "accuracy", 
        "choices": {
          "positive_classes": [
            "0", 
            "1"
          ], 
          "columns": [
            "ID", 
            "ApplicationDate", 
            "EmploymentStatus", 
            "EducationLevel", 
            "MaritalStatus", 
            "HomeOwnershipStatus", 
            "LoanPurpose", 
            "AnnualIncome", 
            "BaseInterestRate", 
            "LoanAmount", 
            "NetWorth", 
            "MonthlyLoanPayment", 
            "CreditScore", 
            "Age", 
            "Experience", 
            "LoanDuration", 
            "CreditCardUtilizationRate", 
            "NumberOfCreditInquiries", 
            "JobTenure", 
            "NumberOfOpenCreditLines", 
            "CheckingAccountBalance", 
            "DebtToIncomeRatio", 
            "BankruptcyHistory", 
            "LoanApproved"
          ]
        }, 
        "id_column": "ID", 
        "problem_type": "Binary Classification", 
        "target_column": "LoanApproved"
      }, 
      "jupyter_notebook_access_url": "https://servercreator.doselect.com/djp/user/48dea1a0ffc90ba7e631dbd6f73b48e9/lab/tree/Binary Classification: Loan Approval/Questions.ipynb?token=c14b974b02064e148773a17695f07b04&reset", 
      "recall": 0.855, 
      "output.csv": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/pg3qpmgr/output.csv"
      }, 
      "precision": 0.694, 
      "is_ready": false, 
      "user": "48dea1a0ffc90ba7e631dbd6f73b48e9", 
      "fscore": 0.766, 
      "accuracy": 0.896
    }, 
    "mcq_choice": null, 
    "email": "hridaysekhani2847@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Binary Classification: Deposit Subscriptions", 
    "full_name": "Ekanshu Agrawal", 
    "run_details": {}, 
    "jupyter_data": {
      "Questions.ipynb": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/84plve6l/Questions.ipynb"
      }, 
      "problem_extra_data": {
        "negetive_class": "no", 
        "positive_class": "yes", 
        "evaluation_type": "accuracy", 
        "choices": {
          "positive_classes": [
            "no", 
            "yes"
          ], 
          "columns": [
            "ID", 
            "age", 
            "job", 
            "marital", 
            "education", 
            "default", 
            "balance", 
            "housing", 
            "loan", 
            "contact", 
            "day", 
            "month", 
            "duration", 
            "campaign", 
            "pdays", 
            "previous", 
            "poutcome", 
            "y"
          ]
        }, 
        "id_column": "ID", 
        "problem_type": "Binary Classification", 
        "target_column": "y"
      }, 
      "jupyter_notebook_access_url": "https://servercreator.doselect.com/djp/user/e98a11a27524c51d79bddab33e0e2918/lab/tree/Binary Classification: Deposit Subscriptions/Questions.ipynb?token=3d48f4e8f98d4efe994a8dfd404c3add&reset", 
      "recall": 0.629, 
      "output.csv": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/84plve6l/output.csv"
      }, 
      "precision": 0.385, 
      "is_ready": false, 
      "user": "e98a11a27524c51d79bddab33e0e2918", 
      "fscore": 0.478, 
      "accuracy": 0.901
    }, 
    "mcq_choice": null, 
    "email": "ekanshu20agrawal@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "def print_numbers_in_range(start, end):\n    # Write your code here\n    if start < 1: \n        print(\"Out of Range\")\n        return\n\n    if end > 100:\n        print(\"Out of Range\")\n        return\n        \n    difference = end-start\n    if difference != 9:\n        print(\"Difference Not in Range\")\n        return\n\n    numbers = list(range(start, end + 1))\n    print(numbers)           \n\nT = int(input())\n\nfor _ in range(T):\n    # Input: start and end points for each test case\n    start, end = map(int, input().split())\n    print_numbers_in_range(start, end)", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Algorithms: Numbered Lists", 
    "full_name": "Ekanshu Agrawal", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 12, 
      "solution_id": 228116125, 
      "score": 5.0, 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "evaluation_ended": "2025-07-30T16:59:26Z", 
      "testcases_passed": 12, 
      "queue": "code-eval", 
      "testcases": {
        "2238787": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #4", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238787, 
          "memory_usage": "6MB"
        }, 
        "2238795": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #10", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238795, 
          "memory_usage": "6MB"
        }, 
        "2238796": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #11", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238796, 
          "memory_usage": "6MB"
        }, 
        "2238797": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #12", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238797, 
          "memory_usage": "116kB"
        }, 
        "2238790": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #7", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238790, 
          "memory_usage": "6MB"
        }, 
        "2238791": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #8", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238791, 
          "memory_usage": "6MB"
        }, 
        "2238792": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #9", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238792, 
          "memory_usage": "7MB"
        }, 
        "2238789": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #6", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238789, 
          "memory_usage": "7MB"
        }, 
        "2238788": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #5", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238788, 
          "memory_usage": "6MB"
        }, 
        "60957": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 0, 
          "expected_output": "Difference Not in Range\n[3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", 
          "cputime": "0s", 
          "name": "Testcase #2", 
          "is_sample": true, 
          "output": "", 
          "input": "2\n2 4\n3 12", 
          "running_time": "0.00s", 
          "id": 60957, 
          "memory_usage": "7MB"
        }, 
        "60952": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 0, 
          "expected_output": "Difference Not in Range\n[22, 23, 24, 25, 26, 27, 28, 29, 30, 31]\nOut of Range", 
          "cputime": "0s", 
          "name": "Testcase #1", 
          "is_sample": true, 
          "output": "", 
          "input": "3\n1 9\n22 31\n90 103", 
          "running_time": "0.00s", 
          "id": 60952, 
          "memory_usage": "7MB"
        }, 
        "60961": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #3", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 60961, 
          "memory_usage": "6MB"
        }
      }, 
      "assessment_id": 0, 
      "evaluation_started": "2025-07-30T16:59:21Z", 
      "sid": "SCR:2025-07-30:e5af16b6-318a-4af2-9a7a-b15dfc590d49", 
      "tid": "e5570e52a368300a18455522acf75441", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "ekanshu20agrawal@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "#importing libraries\nimport pandas as pd\nimport numpy as np\n\n#reading the dataset\ndata = pd.read_csv('/data/training/dataset.csv',encoding='utf-8')\ndata = data.applymap(lambda x: x.encode('ascii', 'ignore').decode('ascii') if isinstance(x, str) else x)\n\n# task 1: top 5 sports that have awarded the most medals\ntask1 = data.groupby('Sport')['Medal'].count().sort_values(ascending=False).head(5)\ntask1 = task1.reset_index()\ntask1.columns = ['Sport', 'Medal']\n# saving task1 output\ntask1.to_csv('/code/task1.csv', index=False)\n\n# task 2: top 5 athletes who have won the most gold medals.\ngold_medals = data[data['Medal']=='Gold']\ntask2 = gold_medals.groupby('Athlete')['Medal'].count().sort_values(ascending=False).head(5)\ntask2 = task2.reset_index()\ntask2.columns = ['Athlete','Medal']\n# saving task2 output\ntask2.to_csv('/code/task2.csv', index=False)\n\n# task 3: top 5 Olympic events that have attracted the largest number of athletes.\ntask3 = data.groupby('Event')['Athlete'].nunique().sort_values(ascending=False).head(5)\ntask3 = task3.reset_index()\ntask3.columns = ['Event', 'Athlete']\n\n# saving task3 output\ntask3.to_csv('/code/task3.csv', index=False)\n\n# task 4: top 5 sports with the most number of female gold medalists.\nfemale_gold_medalist = data[(data['Gender'] == 'Women') & (data['Medal']=='Gold')]\ntask4 = female_gold_medalist.groupby('Sport')['Athlete'].count().sort_values(ascending=False).head(5)\ntask4 = task4.reset_index()\ntask4.columns = ['Sport', 'Women']\n\n# saving task4 output\ntask4.to_csv('/code/task4.csv', index=False)\n", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Olympics Analysis", 
    "full_name": "Ekanshu Agrawal", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 4, 
      "solution_id": 228106886, 
      "sid": "DSC:2025-07-30:e47867e6-bba8-4031-b3e0-db79227229e3", 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "assessment_id": 0, 
      "testcases_passed": 4, 
      "testcases": {
        "1498964": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "88MB", 
          "cputime": "2s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.32s", 
          "id": 1498964, 
          "name": "Testcase #1"
        }, 
        "1831468": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "88MB", 
          "cputime": "2s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.42s", 
          "id": 1831468, 
          "name": "Testcase #4"
        }, 
        "1831466": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "88MB", 
          "cputime": "2s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.32s", 
          "id": 1831466, 
          "name": "Testcase #2"
        }, 
        "1831467": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "91MB", 
          "cputime": "2s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.56s", 
          "id": 1831467, 
          "name": "Testcase #3"
        }
      }, 
      "score": 15.0, 
      "evaluation_started": "2025-07-30T15:52:09Z", 
      "evaluation_ended": "2025-07-30T15:52:29Z", 
      "tid": "60e896a45e024b6093e8e7a068f8214e", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "ekanshu20agrawal@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Django: Contact Manager Application", 
    "full_name": "Ekanshu Agrawal", 
    "run_details": {
      "status": "REJ", 
      "testcases_total": 7, 
      "solution_id": 228106144, 
      "testcases_failed": 7, 
      "total_score": 5.0, 
      "testcases_passed": 0, 
      "testcases": {
        "1": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestUserModel testMethod=test_user_creation>\n\n    def test_user_creation(self):\n        response = self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n>       self.assertEqual(response.status_code, 201)\nE       AssertionError: 404 != 201\n\ncontact/tests.py:65: AssertionError", 
          "running_time": "0.409", 
          "id": 1, 
          "name": "test_user_creation"
        }, 
        "3": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_delete_contact>\n\n    def test_delete_contact(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n        contact_id = 1\n        response = self.client.delete(f'/contacts/{contact_id}/')\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:150: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fb4bc78e1f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.009", 
          "id": 3, 
          "name": "test_delete_contact"
        }, 
        "2": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_create_contact>\n\n    def test_create_contact(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        response = self.client.post('/contacts/', json.dumps(contact_by_alexia), content_type='application/json')\n>       self.assertEqual(response.status_code, 201)\nE       AssertionError: 404 != 201\n\ncontact/tests.py:77: AssertionError", 
          "running_time": "0.006", 
          "id": 2, 
          "name": "test_create_contact"
        }, 
        "5": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_get_all_contacts>\n\n    def test_get_all_contacts(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        self.client.post('/users/', json.dumps(user_thalia), content_type='application/json')\n    \n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n    \n        response = self.client.get('/contacts/')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\ncontact/tests.py:90: AssertionError", 
          "running_time": "0.009", 
          "id": 5, 
          "name": "test_get_all_contacts"
        }, 
        "4": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_delete_with_invalid_id>\n\n    def test_delete_with_invalid_id(self):\n        contact_id = 10\n        response = self.client.delete(f'/contacts/{contact_id}/')\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:157: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fb4bc78e1f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.004", 
          "id": 4, 
          "name": "test_delete_with_invalid_id"
        }, 
        "7": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_patch_with_invalid_id>\n\n    def test_patch_with_invalid_id(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n    \n        contact_id = 9\n        update_json = {\n            'email': 'alexia@alexia.com',\n            'phone_number': '0001237869',\n            'address': '123 Main, St. Peterson Lane, NY 120276',\n        }\n        response = self.client.patch(f'/contacts/{contact_id}/', json.dumps(update_json), content_type='application/json')\n        self.assertEqual(response.status_code, 404)\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:134: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fb4bc78e1f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.010", 
          "id": 7, 
          "name": "test_patch_with_invalid_id"
        }, 
        "6": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_patch_with_id>\n\n    def test_patch_with_id(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        contact = self.client.post('/contacts/', json.dumps(contact_by_alexia), content_type='application/json')\n>       contact_data = json.loads(contact.content)\n\ncontact/tests.py:102: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fb4bc78e1f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.005", 
          "id": 6, 
          "name": "test_patch_with_id"
        }
      }, 
      "score": 0.0
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "ekanshu20agrawal@gmail.com"
  }, 
  {
    "proctor_verdict": "Severe", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Django: Student Management API", 
    "full_name": "Nishith Gupta", 
    "run_details": {
      "status": "REJ", 
      "testcases_total": 6, 
      "solution_id": 228103742, 
      "testcases_failed": 6, 
      "total_score": 5.0, 
      "testcases_passed": 0, 
      "testcases": {
        "1": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_create_student>\n\n    def test_create_student(self):\n        student_data = {\n            \"first_name\": \"John\",\n            \"last_name\": \"Doe\",\n            \"date_of_birth\": \"2000-01-01\",\n            \"grade\": 8,\n            \"phone\": \"1234567890\",\n            \"email\": \"john.doe@example.com\"\n        }\n    \n        response = self.client.post('/students', json.dumps(student_data), content_type='application/json')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fe8ac9101f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.410", 
          "id": 1, 
          "name": "test_create_student"
        }, 
        "3": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_existing_student>\n\n    def test_get_existing_student(self):\n        student_id = Students.objects.first().id\n        response = self.client.get(f'/students/{student_id}')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:90: AssertionError", 
          "running_time": "0.005", 
          "id": 3, 
          "name": "test_get_existing_student"
        }, 
        "2": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_all_students>\n\n    def test_get_all_students(self):\n        response = self.client.get('/students')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:66: AssertionError", 
          "running_time": "0.005", 
          "id": 2, 
          "name": "test_get_all_students"
        }, 
        "5": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_update_existing_student>\n\n    def test_update_existing_student(self):\n        updated_data = {\n            \"first_name\": \"Alice_updated\",\n            \"last_name\": \"Smith_updated\",\n            \"date_of_birth\": \"1998-05-16\",\n            \"grade\": 11,\n            \"phone\": \"1234567899\",\n            \"email\": \"alice.updated@example.com\"\n        }\n        student_id = Students.objects.first().id\n        response = self.client.patch(f'/students/{student_id}', json.dumps(updated_data), content_type='application/json')\n    \n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:124: AssertionError", 
          "running_time": "0.005", 
          "id": 5, 
          "name": "test_update_existing_student"
        }, 
        "4": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_non_existent_student>\n\n    def test_get_non_existent_student(self):\n        non_existent_id = 9999\n        response = self.client.get(f'/students/{non_existent_id}')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:105: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fe8ac9101f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.005", 
          "id": 4, 
          "name": "test_get_non_existent_student"
        }, 
        "6": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_update_non_existent_student>\n\n    def test_update_non_existent_student(self):\n        updated_data = {\n            \"first_name\": \"Charlie\",\n            \"last_name\": \"Brown\",\n            \"date_of_birth\": \"2000-01-01\",\n            \"grade\": 12,\n            \"phone\": \"9999999999\",\n            \"email\": \"charlie.brown@example.com\"\n        }\n        non_existent_id = 9999\n        response = self.client.patch(f'/students/{non_existent_id}', json.dumps(updated_data), content_type='application/json')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:145: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fe8ac9101f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.007", 
          "id": 6, 
          "name": "test_update_non_existent_student"
        }
      }, 
      "score": 0.0
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "nishith9900@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Binary Classification: Deposit Subscriptions", 
    "full_name": "Rupa", 
    "run_details": {}, 
    "jupyter_data": {
      "Questions.ipynb": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/g6e8v9y3/Questions.ipynb"
      }, 
      "output.csv": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/g6e8v9y3/output.csv"
      }, 
      "jupyter_notebook_access_url": "https://servercreator.doselect.com/djp/user/054dd6de14d98be032c05354de8bdffb/lab/tree/Binary Classification: Deposit Subscriptions/Questions.ipynb?token=095387f53c7c44acac9c43706980eb03&reset", 
      "recall": 0.674, 
      "problem_extra_data": {
        "negetive_class": "no", 
        "positive_class": "yes", 
        "evaluation_type": "accuracy", 
        "choices": {
          "positive_classes": [
            "no", 
            "yes"
          ], 
          "columns": [
            "ID", 
            "age", 
            "job", 
            "marital", 
            "education", 
            "default", 
            "balance", 
            "housing", 
            "loan", 
            "contact", 
            "day", 
            "month", 
            "duration", 
            "campaign", 
            "pdays", 
            "previous", 
            "poutcome", 
            "y"
          ]
        }, 
        "id_column": "ID", 
        "problem_type": "Binary Classification", 
        "target_column": "y"
      }, 
      "precision": 0.385, 
      "is_ready": false, 
      "user": "054dd6de14d98be032c05354de8bdffb", 
      "fscore": 0.49, 
      "accuracy": 0.906
    }, 
    "mcq_choice": null, 
    "email": "2200031436cseh@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "#importing libraries\nimport pandas as pd\nimport numpy as np\n\n#reading the dataset\ndata = pd.read_csv('/data/training/dataset.csv',encoding='utf-8')\ndata = data.applymap(lambda x: x.encode('ascii', 'ignore').decode('ascii') if isinstance(x, str) else x)\n\n# task 1: top 5 sports that have awarded the most medals\ntask1=data[data['Medal'].notnull()]\\\n     .groupby('Sport')['Medal']\\\n     .count()\\\n     .reset_index()\\\n     .rename(columns={'Medal':'Medal'})\\\n     .sort_values(by='Medal',ascending=False)\\\n     .head(5)\n\n# saving task1 output\ntask1.to_csv('/code/task1.csv', index=False)\n\n# task 2: top 5 athletes who have won the most gold medals.\ntask2=data[data['Medal']=='Gold']\\\n     .groupby('Athlete')['Medal']\\\n     .count()\\\n     .reset_index()\\\n     .sort_values(by='Medal',ascending=False)\\\n     .head(5)\n\n# saving task2 output\ntask2.to_csv('/code/task2.csv', index=False)\n\n# task 3: top 5 Olympic events that have attracted the largest number of athletes.\ntask3=data[['Event','Athlete']].drop_duplicates()\\\n     .groupby('Event')['Athlete']\\\n     .nunique()\\\n     .reset_index()\\\n     .rename(columns={'Athlete':'Athlete'})\\\n     .sort_values(by='Athlete',ascending=False)\\\n     .head(5)\n\n# saving task3 output\ntask3.to_csv('/code/task3.csv', index=False)\n\n# task 4: top 5 sports with the most number of female gold medalists.\ntask4=data[(data['Gender']=='Women')&(data['Medal']=='Gold')]\\\n     .groupby('Sport')['Athlete']\\\n     .count()\\\n     .reset_index()\\\n     .rename(columns={'Athlete':'Women'})\\\n     .sort_values(by='Women',ascending=False)\\\n     .head(5)\n\n# saving task4 output\ntask4.to_csv('/code/task4.csv', index=False)\n", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Olympics Analysis", 
    "full_name": "Rupa", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 4, 
      "solution_id": 228106331, 
      "score": 15.0, 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "evaluation_ended": "2025-07-30T15:43:52Z", 
      "testcases_passed": 4, 
      "testcases": {
        "1498964": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "1s", 
          "name": "Testcase #1", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.21s", 
          "id": 1498964, 
          "memory_usage": "88MB"
        }, 
        "1831468": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #4", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.27s", 
          "id": 1831468, 
          "memory_usage": "88MB"
        }, 
        "1831466": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #2", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.26s", 
          "id": 1831466, 
          "memory_usage": "87MB"
        }, 
        "1831467": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "1s", 
          "name": "Testcase #3", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.19s", 
          "id": 1831467, 
          "memory_usage": "88MB"
        }
      }, 
      "assessment_id": 0, 
      "evaluation_started": "2025-07-30T15:43:34Z", 
      "sid": "DSC:2025-07-30:c2f10728-f05d-4ef9-a3b7-20586fcd4cdd", 
      "tid": "374bb1e3ccce7ac4238db2f596a763c1", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "2200031436cseh@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "import pandas as pd\nimport numpy as np\n\n\n\n\ndef additionalID(array_1, array_2):\n    # Write your code here and Return the Numpy Array\n    additional=np.setdiff1d(array_2,array_1)\n    return additional\n    \nif __name__ == '__main__':\n    ls1 = np.array(list(map(int,input().split())))\n    ls2 = np.array(list(map(int,input().split())))\n    ans = additionalID(ls1, ls2)\n    ans = list(ans.tolist());\n    ans.sort()\n    print(*ans,sep=\" \")", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Find the odd man out", 
    "full_name": "Rupa", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 5, 
      "solution_id": 228104532, 
      "sid": "SCR:2025-07-30:75b370f0-6bf2-4909-8671-9b9e547a6433", 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "assessment_id": 0, 
      "testcases_passed": 5, 
      "queue": "code-eval", 
      "testcases": {
        "573861": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "62MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 573861, 
          "name": "Testcase #2"
        }, 
        "573860": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 0, 
          "expected_output": "2 5 6", 
          "memory_usage": "63MB", 
          "cputime": "0s", 
          "is_sample": true, 
          "input": "1 4 7 3\n1 2 3 4 5 6 7", 
          "output": "", 
          "running_time": "0.00s", 
          "id": 573860, 
          "name": "Testcase #1"
        }, 
        "2158098": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "60MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2158098, 
          "name": "Testcase #4"
        }, 
        "2158103": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "64MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2158103, 
          "name": "Testcase #5"
        }, 
        "573864": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "63MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 573864, 
          "name": "Testcase #3"
        }
      }, 
      "score": 5.0, 
      "evaluation_started": "2025-07-30T15:21:49Z", 
      "evaluation_ended": "2025-07-30T15:21:54Z", 
      "tid": "d9c04d71be904e6a1b526e61ecdce0c7", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "2200031436cseh@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Django: Student Management API", 
    "full_name": "Rupa", 
    "run_details": {
      "status": "REJ", 
      "testcases_total": 6, 
      "solution_id": 228107453, 
      "testcases_failed": 6, 
      "total_score": 5.0, 
      "testcases_passed": 0, 
      "testcases": {
        "1": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_update_existing_student", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_update_existing_student>\n\n    def test_update_existing_student(self):\n        updated_data = {\n            \"first_name\": \"Alice_updated\",\n            \"last_name\": \"Smith_updated\",\n            \"date_of_birth\": \"1998-05-16\",\n            \"grade\": 11,\n            \"phone\": \"1234567899\",\n            \"email\": \"alice.updated@example.com\"\n        }\n        student_id = Students.objects.first().id\n        response = self.client.patch(f'/students/{student_id}', json.dumps(updated_data), content_type='application/json')\n    \n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:124: AssertionError", 
          "id": 1, 
          "running_time": "0.005"
        }, 
        "3": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_get_all_students", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_all_students>\n\n    def test_get_all_students(self):\n        response = self.client.get('/students')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:66: AssertionError", 
          "id": 3, 
          "running_time": "0.004"
        }, 
        "2": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_get_existing_student", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_existing_student>\n\n    def test_get_existing_student(self):\n        student_id = Students.objects.first().id\n        response = self.client.get(f'/students/{student_id}')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:90: AssertionError", 
          "id": 2, 
          "running_time": "0.005"
        }, 
        "5": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_get_non_existent_student", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_non_existent_student>\n\n    def test_get_non_existent_student(self):\n        non_existent_id = 9999\n        response = self.client.get(f'/students/{non_existent_id}')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:105: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fd08ba2e220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 5, 
          "running_time": "0.004"
        }, 
        "4": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_update_non_existent_student", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_update_non_existent_student>\n\n    def test_update_non_existent_student(self):\n        updated_data = {\n            \"first_name\": \"Charlie\",\n            \"last_name\": \"Brown\",\n            \"date_of_birth\": \"2000-01-01\",\n            \"grade\": 12,\n            \"phone\": \"9999999999\",\n            \"email\": \"charlie.brown@example.com\"\n        }\n        non_existent_id = 9999\n        response = self.client.patch(f'/students/{non_existent_id}', json.dumps(updated_data), content_type='application/json')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:145: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fd08ba2e220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 4, 
          "running_time": "0.006"
        }, 
        "6": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_create_student", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_create_student>\n\n    def test_create_student(self):\n        student_data = {\n            \"first_name\": \"John\",\n            \"last_name\": \"Doe\",\n            \"date_of_birth\": \"2000-01-01\",\n            \"grade\": 8,\n            \"phone\": \"1234567890\",\n            \"email\": \"john.doe@example.com\"\n        }\n    \n        response = self.client.post('/students', json.dumps(student_data), content_type='application/json')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fd08ba2e220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 6, 
          "running_time": "0.376"
        }
      }, 
      "score": 0.0
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "2200031436cseh@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Predicting Cyber Attack Incidents", 
    "full_name": "Archana Patil", 
    "run_details": {}, 
    "jupyter_data": {
      "Questions.ipynb": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/ybmna0lp/Questions.ipynb"
      }, 
      "output.csv": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/ybmna0lp/output.csv"
      }, 
      "jupyter_notebook_access_url": "https://servercreator.doselect.com/djp/user/4703246931aca235c35e47a36335bf1e/lab/tree/Predicting Cyber Attack Incidents/Questions.ipynb?token=410e8f5de3dd41f4a0e8129ee6de5dee&reset", 
      "recall": 0.985, 
      "problem_extra_data": {
        "negetive_class": "0", 
        "positive_class": "1", 
        "evaluation_type": "accuracy", 
        "choices": {
          "positive_classes": [
            "0", 
            "1"
          ], 
          "columns": [
            "ID", 
            "INCIDENT_ID", 
            "DATE", 
            "X_1", 
            "X_2", 
            "X_3", 
            "X_4", 
            "X_5", 
            "X_6", 
            "X_7", 
            "X_8", 
            "X_9", 
            "X_10", 
            "X_11", 
            "X_12", 
            "X_13", 
            "X_14", 
            "X_15", 
            "MALICIOUS_OFFENSE"
          ]
        }, 
        "target_column": "MALICIOUS_OFFENSE", 
        "problem_type": "Binary Classification", 
        "id_column": "ID"
      }, 
      "precision": 0.998, 
      "is_ready": true, 
      "user": "4703246931aca235c35e47a36335bf1e", 
      "error": "", 
      "fscore": 0.991, 
      "accuracy": 0.984
    }, 
    "mcq_choice": null, 
    "email": "archanampatil2305@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Django: Student Management API", 
    "full_name": "Archana Patil", 
    "run_details": {}, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "archanampatil2305@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "#importing libraries\nimport pandas as pd\nimport numpy as np\n\n#reading the dataset\ndata = pd.read_csv('/data/training/dataset.csv',encoding='utf-8')\ndata = data.applymap(lambda x: x.encode('ascii', 'ignore').decode('ascii') if isinstance(x, str) else x)\n\n# task 1: top 5 sports that have awarded the most medals\n\n\n# saving task1 output\ntask1 = data.groupby('Sport').size().reset_index(name='Medal').sort_values(by='Medal', ascending = False).head(5)\ntask1.to_csv('/code/task1.csv', index=False)\n\n# task 2: top 5 athletes who have won the most gold medals.\n\n\n# saving task2 output\ngold_data = data[data['Medal'] == 'Gold']\ntask2= gold_data.groupby(\"Athlete\").size().reset_index(name='Medal').sort_values(by='Medal', ascending = False).head(5)\ntask2.to_csv('/code/task2.csv', index=False)\n\n# task 3: top 5 Olympic events that have attracted the largest number of athletes.\n\n\n# saving task3 output\ntask3 = data[['Event', 'Athlete']].drop_duplicates()\ntask3 = task3.groupby('Event').size().reset_index(name='Athlete').sort_values(by='Athlete', ascending = False).head(5)\ntask3.to_csv('/code/task3.csv', index=False)\n\n# task 4: top 5 sports with the most number of female gold medalists.\n\n\n# saving task4 output\nfemale_gold = gold_data[gold_data['Gender'] == 'Women'][['Sport', 'Athlete']].drop_duplicates()\ntask4 = female_gold.groupby('Sport').size().reset_index(name='Women').sort_values(by='Women', ascending = False).head(5)\ntask4.to_csv('/code/task4.csv', index=False)\n", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Olympics Analysis", 
    "full_name": "Archana Patil", 
    "run_details": {
      "status": "PAC", 
      "testcases_total": 4, 
      "solution_id": 228077981, 
      "sid": "DSC:2025-07-30:51d85ce5-0dd7-4df7-aece-112123598b45", 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 1, 
      "evaluation_status": "completed", 
      "assessment_id": 0, 
      "testcases_passed": 3, 
      "testcases": {
        "1498964": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "89MB", 
          "cputime": "1s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.20s", 
          "id": 1498964, 
          "name": "Testcase #1"
        }, 
        "1831468": {
          "status": "NC", 
          "description": "Testcase failed.", 
          "weight": 1, 
          "memory_usage": "88MB", 
          "cputime": "2s", 
          "is_sample": false, 
          "output": "Traceback (most recent call last):\n  File \"/code/eval.py3\", line 28, in <module>\n    assert (expected_output.equals(output))\nAssertionError\n", 
          "running_time": "2.30s", 
          "id": 1831468, 
          "name": "Testcase #4"
        }, 
        "1831466": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "88MB", 
          "cputime": "1s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.17s", 
          "id": 1831466, 
          "name": "Testcase #2"
        }, 
        "1831467": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "89MB", 
          "cputime": "1s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.21s", 
          "id": 1831467, 
          "name": "Testcase #3"
        }
      }, 
      "score": 11.25, 
      "evaluation_started": "2025-07-30T11:59:06Z", 
      "evaluation_ended": "2025-07-30T11:59:26Z", 
      "tid": "6a01453bf21a47e702ae65c6585abb1e", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "archanampatil2305@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'count_word' function below.\n# \n# The function is expected to return an INTEGER ARRAY.\n# The function accepts STRING ARRAY ss as parameter.\n#\n\ndef count_word(ss):\n\treturn [len(word) for word in ss]\n\t# Write your code here\n\t\n\t\n\nif __name__ == '__main__':\n\tss_count = int(input().strip())\n\n\tss = []\n\n\tfor _ in range(ss_count):\n\t\tss_item = input()\n\t\tss.append(ss_item)\n\n\tresult = count_word(ss)\n\n\tprint('\\n'.join(map(str, result)))\n", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Word Length", 
    "full_name": "Archana Patil", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 6, 
      "solution_id": 228072979, 
      "sid": "SCR:2025-07-30:e906faec-ef14-469f-9948-d917f23e3c9c", 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "assessment_id": 0, 
      "testcases_passed": 6, 
      "queue": "code-eval", 
      "testcases": {
        "1935862": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "112kB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 1935862, 
          "name": "Testcase #6"
        }, 
        "33067": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "7MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33067, 
          "name": "Testcase #2"
        }, 
        "33066": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 0, 
          "expected_output": "3\n3\n5", 
          "memory_usage": "7MB", 
          "cputime": "0s", 
          "is_sample": true, 
          "input": "3\none\ntwo\nthree", 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33066, 
          "name": "Testcase #1"
        }, 
        "33068": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "7MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33068, 
          "name": "Testcase #3"
        }, 
        "1935750": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "7MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 1935750, 
          "name": "Testcase #4"
        }, 
        "1935803": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "7MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 1935803, 
          "name": "Testcase #5"
        }
      }, 
      "score": 5.0, 
      "evaluation_started": "2025-07-30T11:22:14Z", 
      "evaluation_ended": "2025-07-30T11:22:16Z", 
      "tid": "258330082d4984f408481d739f109daa", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "archanampatil2305@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Binary Classification: Deposit Subscriptions", 
    "full_name": "Malavika Dilu", 
    "run_details": {}, 
    "jupyter_data": {
      "Questions.ipynb": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/xmnbyg49/Questions.ipynb"
      }, 
      "output.csv": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/xmnbyg49/output.csv"
      }, 
      "jupyter_notebook_access_url": "https://servercreator.doselect.com/djp/user/e210fc59d2449730a8fdff2630eeca1c/lab/tree/Binary Classification: Deposit Subscriptions/Questions.ipynb?token=07a25a7977a24282a4e3644f54f813bf&reset", 
      "recall": 0.416, 
      "problem_extra_data": {
        "negetive_class": "no", 
        "positive_class": "yes", 
        "evaluation_type": "accuracy", 
        "choices": {
          "positive_classes": [
            "no", 
            "yes"
          ], 
          "columns": [
            "ID", 
            "age", 
            "job", 
            "marital", 
            "education", 
            "default", 
            "balance", 
            "housing", 
            "loan", 
            "contact", 
            "day", 
            "month", 
            "duration", 
            "campaign", 
            "pdays", 
            "previous", 
            "poutcome", 
            "y"
          ]
        }, 
        "id_column": "ID", 
        "problem_type": "Binary Classification", 
        "target_column": "y"
      }, 
      "precision": 0.831, 
      "is_ready": true, 
      "user": "e210fc59d2449730a8fdff2630eeca1c", 
      "fscore": 0.554, 
      "accuracy": 0.843
    }, 
    "mcq_choice": null, 
    "email": "dilumalavika@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Django: Student Management API", 
    "full_name": "Malavika Dilu", 
    "run_details": {}, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "dilumalavika@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "#importing libraries\nimport pandas as pd\nimport numpy as np\n\n#reading the dataset\ndata = pd.read_csv('/data/training/dataset.csv',encoding='utf-8')\ndata = data.applymap(lambda x: x.encode('ascii', 'ignore').decode('ascii') if isinstance(x, str) else x)\n\n# task 1: top 5 sports that have awarded the most medals\n\ntask1=data['Sport'].value_counts().head(5).reset_index()\ntask1.columns=['Sport', 'Medal']\n# saving task1 output\ntask1.to_csv('/code/task1.csv', index=False)\n\n# task 2: top 5 athletes who have won the most gold medals.\ngold_medals=data[data['Medal']=='Gold']\ntask2=gold_medals['Athlete'].value_counts().head(5).reset_index()\ntask2.columns=['Athlete', 'Medal']\n\n# saving task2 output\ntask2.to_csv('/code/task2.csv', index=False)\n\n# task 3: top 5 Olympic events that have attracted the largest number of athletes.\ntask3=data.groupby('Event')['Athlete'].nunique().nlargest(5).reset_index()\ntask3.columns=['Event','Athlete']\n\n# saving task3 output\ntask3.to_csv('/code/task3.csv', index=False)\n\n# task 4: top 5 sports with the most number of female gold medalists.\nfemale_gold=data[(data['Medal']=='Gold') & (data['Gender']=='Women')]\ntask4=female_gold['Sport'].value_counts().head(5).reset_index()\ntask4.columns=['Sport', 'Women']\n\n# saving task4 output\ntask4.to_csv('/code/task4.csv', index=False)\n", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Olympics Analysis", 
    "full_name": "Malavika Dilu", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 4, 
      "solution_id": 228085891, 
      "score": 15.0, 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "evaluation_ended": "2025-07-30T13:08:46Z", 
      "testcases_passed": 4, 
      "testcases": {
        "1498964": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #1", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.70s", 
          "id": 1498964, 
          "memory_usage": "89MB"
        }, 
        "1831468": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "1s", 
          "name": "Testcase #4", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.19s", 
          "id": 1831468, 
          "memory_usage": "88MB"
        }, 
        "1831466": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #2", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.99s", 
          "id": 1831466, 
          "memory_usage": "88MB"
        }, 
        "1831467": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #3", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.28s", 
          "id": 1831467, 
          "memory_usage": "88MB"
        }
      }, 
      "assessment_id": 0, 
      "evaluation_started": "2025-07-30T13:08:24Z", 
      "sid": "DSC:2025-07-30:93193376-2240-403a-87b1-3dc1b29f2387", 
      "tid": "bca76689b79487f9f914dcd1c4da73b2", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "dilumalavika@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "import math\nimport os\nimport random\nimport re\nimport sys\n#\n# Complete the 'findLongestWord' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n# 1. INTEGER n\n# 2. STRING ARRAY arr\n#\n\ndef findLongestWord(n, arr):\n    # Write your code here\n    if n<=0 or not arr:\n        return 0\n\n    max_length=0\n    for i in range (min(n, len(arr))):\n        word_length=len(arr[i])\n        if word_length>max_length:\n            max_length=word_length\n\n    return max_length\n\n\nif __name__ == '__main__':\n    n = int(raw_input().strip())\n    arr = []\n    for _ in range(n):\n        arr_item = raw_input()\n        arr.append(arr_item)\n    result = findLongestWord(n, arr)\n    print str(result)", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Longest Word", 
    "full_name": "Malavika Dilu", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 3, 
      "solution_id": 228078310, 
      "sid": "SCR:2025-07-30:32f7fc58-8f30-4105-aee3-1e2d8bcc999b", 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "assessment_id": 0, 
      "testcases_passed": 3, 
      "queue": "code-eval", 
      "testcases": {
        "33069": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 0, 
          "expected_output": "7", 
          "memory_usage": "0kB", 
          "cputime": "0s", 
          "is_sample": true, 
          "input": "3\nwhich\nis\nlargest", 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33069, 
          "name": "Testcase #1"
        }, 
        "33070": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "0kB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33070, 
          "name": "Testcase #2"
        }, 
        "33071": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "6MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.00s", 
          "id": 33071, 
          "name": "Testcase #3"
        }
      }, 
      "score": 5.0, 
      "evaluation_started": "2025-07-30T11:53:07Z", 
      "evaluation_ended": "2025-07-30T11:53:11Z", 
      "tid": "e4d347f2cdb8d8137e5c04267f4fc4b9", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "dilumalavika@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Binary Classification: Loan Approval", 
    "full_name": "Pravesh Sharma", 
    "run_details": {}, 
    "jupyter_data": {
      "Questions.ipynb": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/5w45vvrb/Questions.ipynb"
      }, 
      "problem_extra_data": {
        "negetive_class": "0", 
        "positive_class": "1", 
        "evaluation_type": "accuracy", 
        "choices": {
          "positive_classes": [
            "0", 
            "1"
          ], 
          "columns": [
            "ID", 
            "ApplicationDate", 
            "EmploymentStatus", 
            "EducationLevel", 
            "MaritalStatus", 
            "HomeOwnershipStatus", 
            "LoanPurpose", 
            "AnnualIncome", 
            "BaseInterestRate", 
            "LoanAmount", 
            "NetWorth", 
            "MonthlyLoanPayment", 
            "CreditScore", 
            "Age", 
            "Experience", 
            "LoanDuration", 
            "CreditCardUtilizationRate", 
            "NumberOfCreditInquiries", 
            "JobTenure", 
            "NumberOfOpenCreditLines", 
            "CheckingAccountBalance", 
            "DebtToIncomeRatio", 
            "BankruptcyHistory", 
            "LoanApproved"
          ]
        }, 
        "target_column": "LoanApproved", 
        "problem_type": "Binary Classification", 
        "id_column": "ID"
      }, 
      "jupyter_notebook_access_url": "https://servercreator.doselect.com/djp/user/efd3a76377672bed22b9a895d2c0c365/lab/tree/Binary Classification: Loan Approval/Questions.ipynb?token=acbc850a28454be7b4a139a40f2ed1f4&reset", 
      "recall": 0.849, 
      "output.csv": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/5w45vvrb/output.csv"
      }, 
      "precision": 0.698, 
      "is_ready": false, 
      "user": "efd3a76377672bed22b9a895d2c0c365", 
      "fscore": 0.766, 
      "accuracy": 0.895
    }, 
    "mcq_choice": null, 
    "email": "sharmapravesh175@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "# importing libraries\nimport pandas as pd \nimport numpy as np \n\n# reading dataset\ndata = pd.read_csv('/data/training/dataset.csv')\n\n# dropping the mentioned columns\ncolumns_to_remove =['VehicleID','IncidentAddress','Country','InsurancePolicyNumber','DateOfPolicyCoverage','Country','DateOfIncident']\ndata.drop(columns=[col for col in columns_to_remove if col in data.columns],inplace=True)\n# Replacing the mentioned values with null vales\nmissing_values = ['?','???','-1','-5','MISSINGVALUE','mode']\ndata.replace(missing_values,np.nan,inplace=True)\n\n# Drop columns with null value more than 30%\nthreshold = 0.3\ndata.dropna(thresh=(1-threshold)*len(data),axis=1,inplace=True)\n\n\n# Imputing missing values\ncategorical_cols = data.select_dtypes(include='object').columns\nfor col in categorical_cols:\n    if data[col].isnull().sum()>0:\n        mod_val =data[col].mode(dropna=True)\n        if not mod_val.empty:\n            data[col].fillna(mod_val[0],inplace=True)\n\n# Replacing column 'TypeOfIncident' values\nincident_mapping={\n    'Single Vehicle Collision':1,\n    'Multi-vehicle Collision':2,\n    'Parked Car':3,\n    'Vehicle Theft':4\n}\nif 'TypeOfIncident' in data.columns:\n    data['TypeOfIncident']= data['TypeOfIncident'].map(incident_mapping)\n\n# Replacing column 'TypeOfCollission' values\ncollision_mapping ={\n    'Side Collision':1,\n    'Rear Collision':2,\n    'Front Collision':3\n}\nif 'TypeOfCollission' in data.columns:\n    data['TypeOfCollission'] = data['TypeOfCollission'].map(collision_mapping)\n\n# saving the output\ndata.to_csv('/code/output.csv', index=False)", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Data Prep Odyssey: Insurance Analytics", 
    "full_name": "Pravesh Sharma", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 6, 
      "solution_id": 228099452, 
      "score": 15.0, 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "evaluation_ended": "2025-07-30T15:08:40Z", 
      "testcases_passed": 6, 
      "testcases": {
        "1820966": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #4", 
          "is_sample": false, 
          "output": "", 
          "running_time": "3.03s", 
          "id": 1820966, 
          "memory_usage": "84MB"
        }, 
        "1820965": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #3", 
          "is_sample": false, 
          "output": "", 
          "running_time": "3.16s", 
          "id": 1820965, 
          "memory_usage": "90MB"
        }, 
        "1820970": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #6", 
          "is_sample": false, 
          "output": "", 
          "running_time": "3.23s", 
          "id": 1820970, 
          "memory_usage": "90MB"
        }, 
        "1820969": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #5", 
          "is_sample": false, 
          "output": "", 
          "running_time": "3.12s", 
          "id": 1820969, 
          "memory_usage": "88MB"
        }, 
        "1820918": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #2", 
          "is_sample": false, 
          "output": "", 
          "running_time": "3.03s", 
          "id": 1820918, 
          "memory_usage": "90MB"
        }, 
        "1820349": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #1", 
          "is_sample": false, 
          "output": "", 
          "running_time": "3.01s", 
          "id": 1820349, 
          "memory_usage": "87MB"
        }
      }, 
      "assessment_id": 0, 
      "evaluation_started": "2025-07-30T15:08:04Z", 
      "sid": "DSC:2025-07-30:3af63d80-a256-4ea3-ad4c-2ff26dd09fd5", 
      "tid": "21dc323eed5d5afc1054fe535afbec9f", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "sharmapravesh175@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "\nT= int(input())\nX =[]\n\nfor _ in range(T):\n    X.append(input())\n\nN = int(input())\nA =[]\n\nfor _ in range(N):\n    A.append(input())\n\ndef is_member(value, lst):\n    for item in lst:\n        if item ==value:\n            return True\n    return False\n\nfor value in A:\n    if is_member(value,X):\n        print(\"true\")\n    else:\n        print(\"false\")\n", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Member or Not", 
    "full_name": "Pravesh Sharma", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 3, 
      "solution_id": 228106110, 
      "score": 5.0, 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "evaluation_ended": "2025-07-30T15:42:22Z", 
      "testcases_passed": 3, 
      "queue": "code-eval", 
      "testcases": {
        "33001": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #3", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33001, 
          "memory_usage": "116kB"
        }, 
        "33000": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #2", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33000, 
          "memory_usage": "7MB"
        }, 
        "32999": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 0, 
          "expected_output": "true\nfalse\nfalse", 
          "cputime": "0s", 
          "name": "Testcase #1", 
          "is_sample": true, 
          "output": "", 
          "input": "2\nhello\nbug\n3\nbug\nin\nproduction", 
          "running_time": "0.00s", 
          "id": 32999, 
          "memory_usage": "6MB"
        }
      }, 
      "assessment_id": 0, 
      "evaluation_started": "2025-07-30T15:42:20Z", 
      "sid": "SCR:2025-07-30:4d5ed3cc-cc1e-480a-b024-7fa2f6741fdf", 
      "tid": "acc4a5f0b0b6bf6656b6bc207682b374", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "sharmapravesh175@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Django: Contact Manager Application", 
    "full_name": "Pravesh Sharma", 
    "run_details": {
      "status": "REJ", 
      "testcases_total": 7, 
      "solution_id": 228099341, 
      "testcases_failed": 7, 
      "total_score": 5.0, 
      "testcases_passed": 0, 
      "testcases": {
        "1": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_create_contact", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_create_contact>\n\n    def test_create_contact(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        response = self.client.post('/contacts/', json.dumps(contact_by_alexia), content_type='application/json')\n>       self.assertEqual(response.status_code, 201)\nE       AssertionError: 404 != 201\n\ncontact/tests.py:77: AssertionError", 
          "id": 1, 
          "running_time": "0.004"
        }, 
        "3": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_get_all_contacts", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_get_all_contacts>\n\n    def test_get_all_contacts(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        self.client.post('/users/', json.dumps(user_thalia), content_type='application/json')\n    \n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n    \n        response = self.client.get('/contacts/')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\ncontact/tests.py:90: AssertionError", 
          "id": 3, 
          "running_time": "0.007"
        }, 
        "2": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_patch_with_invalid_id", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_patch_with_invalid_id>\n\n    def test_patch_with_invalid_id(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n    \n        contact_id = 9\n        update_json = {\n            'email': 'alexia@alexia.com',\n            'phone_number': '0001237869',\n            'address': '123 Main, St. Peterson Lane, NY 120276',\n        }\n        response = self.client.patch(f'/contacts/{contact_id}/', json.dumps(update_json), content_type='application/json')\n        self.assertEqual(response.status_code, 404)\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:134: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f4cd12b2220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 2, 
          "running_time": "0.009"
        }, 
        "5": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_patch_with_id", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_patch_with_id>\n\n    def test_patch_with_id(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        contact = self.client.post('/contacts/', json.dumps(contact_by_alexia), content_type='application/json')\n>       contact_data = json.loads(contact.content)\n\ncontact/tests.py:102: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f4cd12b2220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 5, 
          "running_time": "0.004"
        }, 
        "4": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_delete_contact", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_delete_contact>\n\n    def test_delete_contact(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n        contact_id = 1\n        response = self.client.delete(f'/contacts/{contact_id}/')\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:150: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f4cd12b2220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 4, 
          "running_time": "0.007"
        }, 
        "7": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_delete_with_invalid_id", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_delete_with_invalid_id>\n\n    def test_delete_with_invalid_id(self):\n        contact_id = 10\n        response = self.client.delete(f'/contacts/{contact_id}/')\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:157: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f4cd12b2220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 7, 
          "running_time": "0.005"
        }, 
        "6": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_user_creation", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestUserModel testMethod=test_user_creation>\n\n    def test_user_creation(self):\n        response = self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n>       self.assertEqual(response.status_code, 201)\nE       AssertionError: 404 != 201\n\ncontact/tests.py:65: AssertionError", 
          "id": 6, 
          "running_time": "0.339"
        }
      }, 
      "score": 0.0
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "sharmapravesh175@gmail.com"
  }, 
  {
    "proctor_verdict": "Severe", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Binary Classification: Loan Approval", 
    "full_name": "MUSTAQEEM MOMIN", 
    "run_details": {}, 
    "jupyter_data": {
      "Questions.ipynb": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/o3ora64q/Questions.ipynb"
      }, 
      "problem_extra_data": {
        "negetive_class": "0", 
        "positive_class": "1", 
        "evaluation_type": "accuracy", 
        "choices": {
          "positive_classes": [
            "0", 
            "1"
          ], 
          "columns": [
            "ID", 
            "ApplicationDate", 
            "EmploymentStatus", 
            "EducationLevel", 
            "MaritalStatus", 
            "HomeOwnershipStatus", 
            "LoanPurpose", 
            "AnnualIncome", 
            "BaseInterestRate", 
            "LoanAmount", 
            "NetWorth", 
            "MonthlyLoanPayment", 
            "CreditScore", 
            "Age", 
            "Experience", 
            "LoanDuration", 
            "CreditCardUtilizationRate", 
            "NumberOfCreditInquiries", 
            "JobTenure", 
            "NumberOfOpenCreditLines", 
            "CheckingAccountBalance", 
            "DebtToIncomeRatio", 
            "BankruptcyHistory", 
            "LoanApproved"
          ]
        }, 
        "target_column": "LoanApproved", 
        "problem_type": "Binary Classification", 
        "id_column": "ID"
      }, 
      "jupyter_notebook_access_url": "https://servercreator.doselect.com/djp/user/96681d7c336d8edcca7fa989beeae57c/lab/tree/Binary Classification: Loan Approval/Questions.ipynb?token=450f195933664df8a70f0706c1464c75&reset", 
      "recall": 0.848, 
      "output.csv": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/o3ora64q/output.csv"
      }, 
      "precision": 0.692, 
      "is_ready": false, 
      "user": "96681d7c336d8edcca7fa989beeae57c", 
      "fscore": 0.762, 
      "accuracy": 0.894
    }, 
    "mcq_choice": null, 
    "email": "mustaqeemmomin14@gmail.com"
  }, 
  {
    "proctor_verdict": "Severe", 
    "code": "# Importing libraries\nimport pandas as pd\nimport numpy as np\n\n# Reading dataset\ndata = pd.read_csv('/data/training/dataset.csv')\n\n# Cleaning column names (remove spaces in column names to avoid mismatch)\ndata.columns = data.columns.str.strip()\n\n# Dropping the mentioned columns\ncolumns_to_drop = [\n    'VehicleID',\n    'IncidentAddress',\n    'Country',\n    'InsurancePolicyNumber',\n    'DateOfPolicyCoverage',\n    'DateOfIncident'\n]\ndata.drop(columns=[col for col in columns_to_drop if col in data.columns], inplace=True)\n\n# Replacing the mentioned invalid/missing values with np.nan\nmissing_values = ['?', '???', '-1', '-5', 'MISSINGVALUE', 'mode']\ndata.replace(missing_values, np.nan, inplace=True)\n\n# Drop columns with more than 30% null values\nthreshold = len(data) * 0.3\ndata.dropna(axis=1, thresh=int(len(data) - threshold), inplace=True)\n\n# Imputing missing values\nfor col in data.columns:\n    if data[col].dtype == 'object':\n        data[col].fillna(data[col].mode()[0], inplace=True)\n    else:\n        data[col] = pd.to_numeric(data[col], errors='coerce')\n        data[col].fillna(data[col].mean(), inplace=True)\n\n# Replacing column 'TypeOfIncident' values (with strip and case handling)\nincident_mapping = {\n    'Single Vehicle Collision': 1,\n    'Multi-vehicle Collision': 2,\n    'Parked Car': 3,\n    'Vehicle Theft': 4\n}\nif 'TypeOfIncident' in data.columns:\n    data['TypeOfIncident'] = data['TypeOfIncident'].astype(str).str.strip()\n    data['TypeOfIncident'] = data['TypeOfIncident'].map(incident_mapping)\n\n# Replacing column 'TypeOfCollission' values (with strip and case handling)\ncollision_mapping = {\n    'Side Collision': 1,\n    'Rear Collision': 2,\n    'Front Collision': 3\n}\nif 'TypeOfCollission' in data.columns:\n    data['TypeOfCollission'] = data['TypeOfCollission'].astype(str).str.strip()\n    data['TypeOfCollission'] = data['TypeOfCollission'].map(collision_mapping)\n\n# Saving the output\ndata.to_csv('/code/output.csv', index=False)", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Data Prep Odyssey: Insurance Analytics", 
    "full_name": "MUSTAQEEM MOMIN", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 6, 
      "solution_id": 228112871, 
      "score": 15.0, 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "evaluation_ended": "2025-07-30T17:01:05Z", 
      "testcases_passed": 6, 
      "testcases": {
        "1820966": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #4", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.97s", 
          "id": 1820966, 
          "memory_usage": "85MB"
        }, 
        "1820965": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #3", 
          "is_sample": false, 
          "output": "", 
          "running_time": "3.01s", 
          "id": 1820965, 
          "memory_usage": "87MB"
        }, 
        "1820970": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #6", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.97s", 
          "id": 1820970, 
          "memory_usage": "90MB"
        }, 
        "1820969": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #5", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.90s", 
          "id": 1820969, 
          "memory_usage": "90MB"
        }, 
        "1820918": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #2", 
          "is_sample": false, 
          "output": "", 
          "running_time": "3.01s", 
          "id": 1820918, 
          "memory_usage": "89MB"
        }, 
        "1820349": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #1", 
          "is_sample": false, 
          "output": "", 
          "running_time": "3.03s", 
          "id": 1820349, 
          "memory_usage": "90MB"
        }
      }, 
      "assessment_id": 0, 
      "evaluation_started": "2025-07-30T17:00:31Z", 
      "sid": "DSC:2025-07-30:f9ec1346-9eb5-4398-b194-fc6dabb0c42b", 
      "tid": "b157322c41aeba2c95736939a0098f70", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "mustaqeemmomin14@gmail.com"
  }, 
  {
    "proctor_verdict": "Severe", 
    "code": "import sys\n\n# Read input from stdin\ninput_lines = sys.stdin.read().splitlines()\n\n# First line: length of X\nT = int(input_lines[0])\n\n# Next T lines: elements of X\nX = []\nfor i in range(1, T + 1):\n    X.append(input_lines[i])\n\n# Next line: length of A\nN_index = T + 1\nN = int(input_lines[N_index])\n\n# Next N lines: elements of A\nA = []\nfor i in range(N_index + 1, N_index + 1 + N):\n    A.append(input_lines[i])\n\n# Function to check membership without using `in`\ndef is_member(element, lst):\n    for item in lst:\n        if item == element:\n            return True\n    return False\n\n# Output\nfor element in A:\n    if is_member(element, X):\n        print(\"true\")\n    else:\n        print(\"false\")", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Member or Not", 
    "full_name": "MUSTAQEEM MOMIN", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 3, 
      "solution_id": 228115715, 
      "score": 5.0, 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "evaluation_ended": "2025-07-30T16:51:23Z", 
      "testcases_passed": 3, 
      "queue": "code-eval", 
      "testcases": {
        "33001": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #3", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33001, 
          "memory_usage": "112kB"
        }, 
        "33000": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #2", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33000, 
          "memory_usage": "7MB"
        }, 
        "32999": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 0, 
          "expected_output": "true\nfalse\nfalse", 
          "cputime": "0s", 
          "name": "Testcase #1", 
          "is_sample": true, 
          "output": "", 
          "input": "2\nhello\nbug\n3\nbug\nin\nproduction", 
          "running_time": "0.00s", 
          "id": 32999, 
          "memory_usage": "7MB"
        }
      }, 
      "assessment_id": 0, 
      "evaluation_started": "2025-07-30T16:51:20Z", 
      "sid": "SCR:2025-07-30:7a519117-5eac-4821-9a52-19ecac1d3f56", 
      "tid": "c38461b833521d050ca6583d034b5264", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "mustaqeemmomin14@gmail.com"
  }, 
  {
    "proctor_verdict": "Severe", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Django: Contact Manager Application", 
    "full_name": "MUSTAQEEM MOMIN", 
    "run_details": {
      "status": "REJ", 
      "testcases_total": 7, 
      "solution_id": 228109054, 
      "testcases_failed": 7, 
      "total_score": 5.0, 
      "testcases_passed": 0, 
      "testcases": {
        "1": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_create_contact", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_create_contact>\n\n    def test_create_contact(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        response = self.client.post('/contacts/', json.dumps(contact_by_alexia), content_type='application/json')\n>       self.assertEqual(response.status_code, 201)\nE       AssertionError: 404 != 201\n\ncontact/tests.py:77: AssertionError", 
          "id": 1, 
          "running_time": "0.004"
        }, 
        "3": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_get_all_contacts", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_get_all_contacts>\n\n    def test_get_all_contacts(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        self.client.post('/users/', json.dumps(user_thalia), content_type='application/json')\n    \n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n    \n        response = self.client.get('/contacts/')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\ncontact/tests.py:90: AssertionError", 
          "id": 3, 
          "running_time": "0.007"
        }, 
        "2": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_patch_with_invalid_id", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_patch_with_invalid_id>\n\n    def test_patch_with_invalid_id(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n    \n        contact_id = 9\n        update_json = {\n            'email': 'alexia@alexia.com',\n            'phone_number': '0001237869',\n            'address': '123 Main, St. Peterson Lane, NY 120276',\n        }\n        response = self.client.patch(f'/contacts/{contact_id}/', json.dumps(update_json), content_type='application/json')\n        self.assertEqual(response.status_code, 404)\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:134: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f4cd12b2220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 2, 
          "running_time": "0.009"
        }, 
        "5": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_patch_with_id", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_patch_with_id>\n\n    def test_patch_with_id(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        contact = self.client.post('/contacts/', json.dumps(contact_by_alexia), content_type='application/json')\n>       contact_data = json.loads(contact.content)\n\ncontact/tests.py:102: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f4cd12b2220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 5, 
          "running_time": "0.004"
        }, 
        "4": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_delete_contact", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_delete_contact>\n\n    def test_delete_contact(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n        contact_id = 1\n        response = self.client.delete(f'/contacts/{contact_id}/')\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:150: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f4cd12b2220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 4, 
          "running_time": "0.007"
        }, 
        "7": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_delete_with_invalid_id", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_delete_with_invalid_id>\n\n    def test_delete_with_invalid_id(self):\n        contact_id = 10\n        response = self.client.delete(f'/contacts/{contact_id}/')\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:157: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f4cd12b2220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 7, 
          "running_time": "0.005"
        }, 
        "6": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_user_creation", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestUserModel testMethod=test_user_creation>\n\n    def test_user_creation(self):\n        response = self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n>       self.assertEqual(response.status_code, 201)\nE       AssertionError: 404 != 201\n\ncontact/tests.py:65: AssertionError", 
          "id": 6, 
          "running_time": "0.339"
        }
      }, 
      "score": 0.0
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "mustaqeemmomin14@gmail.com"
  }, 
  {
    "proctor_verdict": "Severe", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Binary Classification: Loan Approval", 
    "full_name": "PERUMALLA MANIDEEP", 
    "run_details": {}, 
    "jupyter_data": {
      "Questions.ipynb": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/0rp9vao1/Questions.ipynb"
      }, 
      "problem_extra_data": {
        "negetive_class": "0", 
        "positive_class": "1", 
        "evaluation_type": "accuracy", 
        "choices": {
          "positive_classes": [
            "0", 
            "1"
          ], 
          "columns": [
            "ID", 
            "ApplicationDate", 
            "EmploymentStatus", 
            "EducationLevel", 
            "MaritalStatus", 
            "HomeOwnershipStatus", 
            "LoanPurpose", 
            "AnnualIncome", 
            "BaseInterestRate", 
            "LoanAmount", 
            "NetWorth", 
            "MonthlyLoanPayment", 
            "CreditScore", 
            "Age", 
            "Experience", 
            "LoanDuration", 
            "CreditCardUtilizationRate", 
            "NumberOfCreditInquiries", 
            "JobTenure", 
            "NumberOfOpenCreditLines", 
            "CheckingAccountBalance", 
            "DebtToIncomeRatio", 
            "BankruptcyHistory", 
            "LoanApproved"
          ]
        }, 
        "target_column": "LoanApproved", 
        "problem_type": "Binary Classification", 
        "id_column": "ID"
      }, 
      "jupyter_notebook_access_url": "https://servercreator.doselect.com/djp/user/d674c137d9afc69c6fe14fc00920dbc2/lab/tree/Binary Classification: Loan Approval/Questions.ipynb?token=f1fbca587ca54d8b80b87c4c4d27e5e0&reset", 
      "recall": 0.855, 
      "output.csv": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/0rp9vao1/output.csv"
      }, 
      "precision": 0.704, 
      "is_ready": false, 
      "user": "d674c137d9afc69c6fe14fc00920dbc2", 
      "fscore": 0.772, 
      "accuracy": 0.897
    }, 
    "mcq_choice": null, 
    "email": "perumallamanideep21@gmail.com"
  }, 
  {
    "proctor_verdict": "Severe", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Django: Student Management API", 
    "full_name": "PERUMALLA MANIDEEP", 
    "run_details": {
      "status": "REJ", 
      "testcases_total": 6, 
      "solution_id": 228111579, 
      "testcases_failed": 6, 
      "total_score": 5.0, 
      "testcases_passed": 0, 
      "testcases": {
        "1": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_create_student>\n\n    def test_create_student(self):\n        student_data = {\n            \"first_name\": \"John\",\n            \"last_name\": \"Doe\",\n            \"date_of_birth\": \"2000-01-01\",\n            \"grade\": 8,\n            \"phone\": \"1234567890\",\n            \"email\": \"john.doe@example.com\"\n        }\n    \n        response = self.client.post('/students', json.dumps(student_data), content_type='application/json')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f7b1f9d51f0>, s = '', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.395", 
          "id": 1, 
          "name": "test_create_student"
        }, 
        "3": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_existing_student>\n\n    def test_get_existing_student(self):\n        student_id = Students.objects.first().id\n        response = self.client.get(f'/students/{student_id}')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 301 != 200\n\nstudents/tests.py:90: AssertionError", 
          "running_time": "0.005", 
          "id": 3, 
          "name": "test_get_existing_student"
        }, 
        "2": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_all_students>\n\n    def test_get_all_students(self):\n        response = self.client.get('/students')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 301 != 200\n\nstudents/tests.py:66: AssertionError", 
          "running_time": "0.004", 
          "id": 2, 
          "name": "test_get_all_students"
        }, 
        "5": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_update_existing_student>\n\n    def test_update_existing_student(self):\n        updated_data = {\n            \"first_name\": \"Alice_updated\",\n            \"last_name\": \"Smith_updated\",\n            \"date_of_birth\": \"1998-05-16\",\n            \"grade\": 11,\n            \"phone\": \"1234567899\",\n            \"email\": \"alice.updated@example.com\"\n        }\n        student_id = Students.objects.first().id\n        response = self.client.patch(f'/students/{student_id}', json.dumps(updated_data), content_type='application/json')\n    \n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 301 != 200\n\nstudents/tests.py:124: AssertionError", 
          "running_time": "0.005", 
          "id": 5, 
          "name": "test_update_existing_student"
        }, 
        "4": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_non_existent_student>\n\n    def test_get_non_existent_student(self):\n        non_existent_id = 9999\n        response = self.client.get(f'/students/{non_existent_id}')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:105: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f7b1f9d51f0>, s = '', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.004", 
          "id": 4, 
          "name": "test_get_non_existent_student"
        }, 
        "6": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_update_non_existent_student>\n\n    def test_update_non_existent_student(self):\n        updated_data = {\n            \"first_name\": \"Charlie\",\n            \"last_name\": \"Brown\",\n            \"date_of_birth\": \"2000-01-01\",\n            \"grade\": 12,\n            \"phone\": \"9999999999\",\n            \"email\": \"charlie.brown@example.com\"\n        }\n        non_existent_id = 9999\n        response = self.client.patch(f'/students/{non_existent_id}', json.dumps(updated_data), content_type='application/json')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:145: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f7b1f9d51f0>, s = '', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.006", 
          "id": 6, 
          "name": "test_update_non_existent_student"
        }
      }, 
      "score": 0.0
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "perumallamanideep21@gmail.com"
  }, 
  {
    "proctor_verdict": "Severe", 
    "code": "#importing libraries\nimport pandas as pd\nimport numpy as np\n\n#reading the dataset\ndata = pd.read_csv('/data/training/dataset.csv',encoding='utf-8')\ndata = data.applymap(lambda x: x.encode('ascii', 'ignore').decode('ascii') if isinstance(x, str) else x)\n\n# task 1: top 5 sports that have awarded the most medals\ntask1=data.groupby('Sport').size().reset_index(name='Medal').sort_values(by='Medal',ascending=False).head(5)\n\n\n# saving task1 output\ntask1.to_csv('/code/task1.csv', index=False)\n\n# task 2: top 5 athletes who have won the most gold medals.\ngold_data=data[data['Medal']=='Gold']\ntask2=gold_data.groupby('Athlete').size().reset_index(name='Medal').sort_values(by='Medal',ascending=False).head(5)\n# saving task2 output\ntask2.to_csv('/code/task2.csv', index=False)\n\n# task 3: top 5 Olympic events that have attracted the largest number of athletes.\ntask3=data.groupby('Event')['Athlete'].nunique().reset_index(name='Athlete').sort_values(by='Athlete',ascending=False).head(5)\n# saving task3 output\ntask3.to_csv('/code/task3.csv', index=False)\n\n# task 4: top 5 sports with the most number of female gold medalists.\n\nfemale_gold=gold_data[gold_data['Gender']=='Women']\ntask4=female_gold.groupby('Sport').size().reset_index(name='Women').sort_values(by='Women',ascending=False).head(5)\n# saving task4 output\ntask4.to_csv('/code/task4.csv', index=False)\n", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Olympics Analysis", 
    "full_name": "PERUMALLA MANIDEEP", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 4, 
      "solution_id": 228109163, 
      "score": 15.0, 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "evaluation_ended": "2025-07-30T16:18:11Z", 
      "testcases_passed": 4, 
      "testcases": {
        "1498964": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #1", 
          "is_sample": false, 
          "output": "", 
          "running_time": "3.07s", 
          "id": 1498964, 
          "memory_usage": "88MB"
        }, 
        "1831468": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #4", 
          "is_sample": false, 
          "output": "", 
          "running_time": "3.16s", 
          "id": 1831468, 
          "memory_usage": "88MB"
        }, 
        "1831466": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #2", 
          "is_sample": false, 
          "output": "", 
          "running_time": "3.13s", 
          "id": 1831466, 
          "memory_usage": "88MB"
        }, 
        "1831467": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #3", 
          "is_sample": false, 
          "output": "", 
          "running_time": "3.15s", 
          "id": 1831467, 
          "memory_usage": "88MB"
        }
      }, 
      "assessment_id": 0, 
      "evaluation_started": "2025-07-30T16:17:45Z", 
      "sid": "DSC:2025-07-30:9e82ff93-aeb9-4284-b87f-9dedf61f7137", 
      "tid": "ac620c891c3aae87db26f2cbf9216fa6", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "perumallamanideep21@gmail.com"
  }, 
  {
    "proctor_verdict": "Severe", 
    "code": "\n# Read the variable from STDIN\na = int(input())\nx=[input().strip() for _ in range(a)]\nn=int(input())\nk=[input().strip() for _ in range(n)]\n# Output the variable to STDOUT\nfor i in k:\n    found=False\n    for j in x:\n        if i==j:\n            found=True\n            break\n    print(\"true\" if found else \"false\")\n\n", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Member or Not", 
    "full_name": "PERUMALLA MANIDEEP", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 3, 
      "solution_id": 228105498, 
      "score": 5.0, 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "evaluation_ended": "2025-07-30T15:31:23Z", 
      "testcases_passed": 3, 
      "queue": "code-eval", 
      "testcases": {
        "33001": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #3", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33001, 
          "memory_usage": "112kB"
        }, 
        "33000": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #2", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33000, 
          "memory_usage": "7MB"
        }, 
        "32999": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 0, 
          "expected_output": "true\nfalse\nfalse", 
          "cputime": "0s", 
          "name": "Testcase #1", 
          "is_sample": true, 
          "output": "", 
          "input": "2\nhello\nbug\n3\nbug\nin\nproduction", 
          "running_time": "0.00s", 
          "id": 32999, 
          "memory_usage": "6MB"
        }
      }, 
      "assessment_id": 0, 
      "evaluation_started": "2025-07-30T15:31:20Z", 
      "sid": "SCR:2025-07-30:f7713b2e-b0a8-43ee-a068-df77a9cbc4ef", 
      "tid": "f1249f068b6a2e64cfba8a7d93e6b3ed", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "perumallamanideep21@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Binary Classification: Loan Approval", 
    "full_name": "Kanugonda Sai Harshitha", 
    "run_details": {}, 
    "jupyter_data": {
      "Questions.ipynb": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/bv63am8v/Questions.ipynb"
      }, 
      "problem_extra_data": {
        "negetive_class": "0", 
        "positive_class": "1", 
        "evaluation_type": "accuracy", 
        "choices": {
          "positive_classes": [
            "0", 
            "1"
          ], 
          "columns": [
            "ID", 
            "ApplicationDate", 
            "EmploymentStatus", 
            "EducationLevel", 
            "MaritalStatus", 
            "HomeOwnershipStatus", 
            "LoanPurpose", 
            "AnnualIncome", 
            "BaseInterestRate", 
            "LoanAmount", 
            "NetWorth", 
            "MonthlyLoanPayment", 
            "CreditScore", 
            "Age", 
            "Experience", 
            "LoanDuration", 
            "CreditCardUtilizationRate", 
            "NumberOfCreditInquiries", 
            "JobTenure", 
            "NumberOfOpenCreditLines", 
            "CheckingAccountBalance", 
            "DebtToIncomeRatio", 
            "BankruptcyHistory", 
            "LoanApproved"
          ]
        }, 
        "target_column": "LoanApproved", 
        "problem_type": "Binary Classification", 
        "id_column": "ID"
      }, 
      "jupyter_notebook_access_url": "https://servercreator.doselect.com/djp/user/27675d68d2dceadca9191d832e1539c8/lab/tree/Binary Classification: Loan Approval/Questions.ipynb?token=a535697347a041febe0c9d3abb3d182c&reset", 
      "recall": 0.855, 
      "output.csv": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/bv63am8v/output.csv"
      }, 
      "precision": 0.704, 
      "is_ready": false, 
      "user": "27675d68d2dceadca9191d832e1539c8", 
      "fscore": 0.772, 
      "accuracy": 0.897
    }, 
    "mcq_choice": null, 
    "email": "saiharshithareddy2004@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "#importing libraries\nimport pandas as pd\nimport numpy as np\n\n#reading the dataset\ndata = pd.read_csv('/data/training/dataset.csv',encoding='utf-8')\ndata = data.applymap(lambda x: x.encode('ascii', 'ignore').decode('ascii') if isinstance(x, str) else x)\n\n\n\n# task 1: top 5 sports that have awarded the most medals\ntask1=(data[data['Medal'].notnull()].groupby('Sport').size().reset_index(name='Medal').sort_values(by='Medal',ascending=False).head(5))\n\n# saving task1 output\ntask1.to_csv('/code/task1.csv', index=False)\n\n# task 2: top 5 athletes who have won the most gold medals.\ntask2=(data[(data['Medal']=='Gold')].groupby('Athlete').size().reset_index(name='Medal').sort_values(by='Medal',ascending=False).head(5))\n\n# saving task2 output\ntask2.to_csv('/code/task2.csv', index=False)\n\n# task 3: top 5 Olympic events that have attracted the largest number of athletes.\ntask3=(data.groupby('Event')['Athlete'].nunique().reset_index(name='Athlete').sort_values(by='Athlete',ascending=False).head(5))\n\n\n# saving task3 output\ntask3.to_csv('/code/task3.csv', index=False)\n\n# task 4: top 5 sports with the most number of female gold medalists.\nfemale_gold=data[(data['Gender']=='Women') & (data['Medal']=='Gold')]\ntask4=female_gold['Sport'].value_counts().head(5).reset_index()\ntask4.columns=['Sport','Women']\n\n\n'''\ntask4=(data[(data['Medal']=='Gold') & (data['Gender']=='Women')].groupby('Sport')['Athlete'].nunique().reset_index(name='Women').sort_values(by='Women',ascending=False).head(5))\n'''\n\n# saving task4 output\ntask4.to_csv('/code/task4.csv', index=False)\n", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Olympics Analysis", 
    "full_name": "Kanugonda Sai Harshitha", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 4, 
      "solution_id": 228093201, 
      "sid": "DSC:2025-07-30:1ed220eb-9a50-4a07-b9b6-d678788f1fc7", 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "assessment_id": 0, 
      "testcases_passed": 4, 
      "testcases": {
        "1498964": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "91MB", 
          "cputime": "1s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.19s", 
          "id": 1498964, 
          "name": "Testcase #1"
        }, 
        "1831468": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "88MB", 
          "cputime": "1s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.06s", 
          "id": 1831468, 
          "name": "Testcase #4"
        }, 
        "1831466": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "88MB", 
          "cputime": "1s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.07s", 
          "id": 1831466, 
          "name": "Testcase #2"
        }, 
        "1831467": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "88MB", 
          "cputime": "1s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.06s", 
          "id": 1831467, 
          "name": "Testcase #3"
        }
      }, 
      "score": 15.0, 
      "evaluation_started": "2025-07-30T15:47:35Z", 
      "evaluation_ended": "2025-07-30T15:47:52Z", 
      "tid": "7b95485f4e285eb68f06c7be4c601101", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "saiharshithareddy2004@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'count_word' function below.\n# \n# The function is expected to return an INTEGER ARRAY.\n# The function accepts STRING ARRAY ss as parameter.\n#\n\ndef count_word(ss):\n\treturn [len(word) for word in ss]\n\n\t# Write your code here\n\t\n\t\n\nif __name__ == '__main__':\n\tss_count = int(input().strip())\n\n\tss = []\n\n\tfor _ in range(ss_count):\n\t\tss_item = input()\n\t\tss.append(ss_item)\n\n\tresult = count_word(ss)\n\n\tprint('\\n'.join(map(str, result)))\n", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Word Length", 
    "full_name": "Kanugonda Sai Harshitha", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 6, 
      "solution_id": 228091738, 
      "sid": "SCR:2025-07-30:1ad65cfc-e064-4ffd-83bb-929c79dd6d9e", 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "assessment_id": 0, 
      "testcases_passed": 6, 
      "queue": "code-eval", 
      "testcases": {
        "1935862": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "116kB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 1935862, 
          "name": "Testcase #6"
        }, 
        "33067": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "8MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33067, 
          "name": "Testcase #2"
        }, 
        "33066": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 0, 
          "expected_output": "3\n3\n5", 
          "memory_usage": "7MB", 
          "cputime": "0s", 
          "is_sample": true, 
          "input": "3\none\ntwo\nthree", 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33066, 
          "name": "Testcase #1"
        }, 
        "33068": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "7MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33068, 
          "name": "Testcase #3"
        }, 
        "1935750": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "6MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 1935750, 
          "name": "Testcase #4"
        }, 
        "1935803": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "8MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 1935803, 
          "name": "Testcase #5"
        }
      }, 
      "score": 5.0, 
      "evaluation_started": "2025-07-30T13:59:24Z", 
      "evaluation_ended": "2025-07-30T13:59:27Z", 
      "tid": "269c7d2c22b8843aee871fec75dd6443", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "saiharshithareddy2004@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Django: Student Management API", 
    "full_name": "Kanugonda Sai Harshitha", 
    "run_details": {
      "status": "REJ", 
      "testcases_total": 6, 
      "solution_id": 228091699, 
      "testcases_failed": 6, 
      "total_score": 5.0, 
      "testcases_passed": 0, 
      "testcases": {
        "1": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_update_existing_student", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_update_existing_student>\n\n    def test_update_existing_student(self):\n        updated_data = {\n            \"first_name\": \"Alice_updated\",\n            \"last_name\": \"Smith_updated\",\n            \"date_of_birth\": \"1998-05-16\",\n            \"grade\": 11,\n            \"phone\": \"1234567899\",\n            \"email\": \"alice.updated@example.com\"\n        }\n        student_id = Students.objects.first().id\n        response = self.client.patch(f'/students/{student_id}', json.dumps(updated_data), content_type='application/json')\n    \n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:124: AssertionError", 
          "id": 1, 
          "running_time": "0.005"
        }, 
        "3": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_get_all_students", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_all_students>\n\n    def test_get_all_students(self):\n        response = self.client.get('/students')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:66: AssertionError", 
          "id": 3, 
          "running_time": "0.004"
        }, 
        "2": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_get_existing_student", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_existing_student>\n\n    def test_get_existing_student(self):\n        student_id = Students.objects.first().id\n        response = self.client.get(f'/students/{student_id}')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:90: AssertionError", 
          "id": 2, 
          "running_time": "0.005"
        }, 
        "5": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_get_non_existent_student", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_non_existent_student>\n\n    def test_get_non_existent_student(self):\n        non_existent_id = 9999\n        response = self.client.get(f'/students/{non_existent_id}')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:105: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fd08ba2e220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 5, 
          "running_time": "0.004"
        }, 
        "4": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_update_non_existent_student", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_update_non_existent_student>\n\n    def test_update_non_existent_student(self):\n        updated_data = {\n            \"first_name\": \"Charlie\",\n            \"last_name\": \"Brown\",\n            \"date_of_birth\": \"2000-01-01\",\n            \"grade\": 12,\n            \"phone\": \"9999999999\",\n            \"email\": \"charlie.brown@example.com\"\n        }\n        non_existent_id = 9999\n        response = self.client.patch(f'/students/{non_existent_id}', json.dumps(updated_data), content_type='application/json')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:145: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fd08ba2e220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 4, 
          "running_time": "0.006"
        }, 
        "6": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_create_student", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_create_student>\n\n    def test_create_student(self):\n        student_data = {\n            \"first_name\": \"John\",\n            \"last_name\": \"Doe\",\n            \"date_of_birth\": \"2000-01-01\",\n            \"grade\": 8,\n            \"phone\": \"1234567890\",\n            \"email\": \"john.doe@example.com\"\n        }\n    \n        response = self.client.post('/students', json.dumps(student_data), content_type='application/json')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fd08ba2e220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 6, 
          "running_time": "0.376"
        }
      }, 
      "score": 0.0
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "saiharshithareddy2004@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Binary Classification: Deposit Subscriptions", 
    "full_name": "Parasa Pallavi", 
    "run_details": {}, 
    "jupyter_data": {
      "Questions.ipynb": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/a63dyll4/Questions.ipynb"
      }, 
      "problem_extra_data": {
        "negetive_class": "no", 
        "positive_class": "yes", 
        "evaluation_type": "accuracy", 
        "choices": {
          "positive_classes": [
            "no", 
            "yes"
          ], 
          "columns": [
            "ID", 
            "age", 
            "job", 
            "marital", 
            "education", 
            "default", 
            "balance", 
            "housing", 
            "loan", 
            "contact", 
            "day", 
            "month", 
            "duration", 
            "campaign", 
            "pdays", 
            "previous", 
            "poutcome", 
            "y"
          ]
        }, 
        "id_column": "ID", 
        "problem_type": "Binary Classification", 
        "target_column": "y"
      }, 
      "jupyter_notebook_access_url": "https://servercreator.doselect.com/djp/user/b09689bb714871a77573fa5ae29e7b7b/lab/tree/Binary Classification: Deposit Subscriptions/Questions.ipynb?token=63c0682ce07048278debd897c172d8eb&reset", 
      "recall": 0.657, 
      "output.csv": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/a63dyll4/output.csv"
      }, 
      "precision": 0.413, 
      "is_ready": false, 
      "user": "b09689bb714871a77573fa5ae29e7b7b", 
      "fscore": 0.507, 
      "accuracy": 0.906
    }, 
    "mcq_choice": null, 
    "email": "2200031785cseh@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "#importing libraries\nimport pandas as pd\nimport numpy as np\n\n#reading the dataset\ndata = pd.read_csv('/data/training/dataset.csv',encoding='utf-8')\ndata = data.applymap(lambda x: x.encode('ascii', 'ignore').decode('ascii') if isinstance(x, str) else x)\n\n# task 1: top 5 sports that have awarded the most medals\ntask1=data.groupby('Sport').size().reset_index(name='Medal')\ntask1=task1.sort_values(by='Medal',ascending=False).head(5)\n\n# saving task1 output\ntask1.to_csv('/code/task1.csv', index=False)\n\n# task 2: top 5 athletes who have won the most gold medals.\ngold_data=data[data['Medal']=='Gold']\ntask2=gold_data.groupby('Athlete').size().reset_index(name='Medal')\ntask2=task2.sort_values(by='Medal',ascending=False).head(5)\n\n# saving task2 output\ntask2.to_csv('/code/task2.csv', index=False)\n\n# task 3: top 5 Olympic events that have attracted the largest number of athletes.\ntask3=data[['Event','Athlete']].drop_duplicates()\ntask3=task3.groupby('Event').size().reset_index(name='Athlete')\ntask3=task3.sort_values(by='Athlete',ascending=False).head(5)\n\n# saving task3 output\ntask3.to_csv('/code/task3.csv', index=False)\n\n# task 4: top 5 sports with the most number of female gold medalists.\nfemale_gold=data[(data['Gender']=='Women')&(data['Medal']=='Gold')]\ntask4=female_gold[['Sport','Athlete']].drop_duplicates()\ntask4=task4.groupby('Sport').size().reset_index()\ntask4.columns=['Sport','Women']\ntask4=task4.sort_values(by='Women',ascending=False).head(5)\n\n# saving task4 output\ntask4.to_csv('/code/task4.csv', index=False)\n", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Olympics Analysis", 
    "full_name": "Parasa Pallavi", 
    "run_details": {
      "status": "PAC", 
      "testcases_total": 4, 
      "solution_id": 228098156, 
      "sid": "DSC:2025-07-30:a6a9e4a1-718e-4a6f-9448-932e9a81282c", 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 1, 
      "evaluation_status": "completed", 
      "assessment_id": 0, 
      "testcases_passed": 3, 
      "testcases": {
        "1498964": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "88MB", 
          "cputime": "1s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.06s", 
          "id": 1498964, 
          "name": "Testcase #1"
        }, 
        "1831468": {
          "status": "NC", 
          "description": "Testcase failed.", 
          "weight": 1, 
          "memory_usage": "88MB", 
          "cputime": "1s", 
          "is_sample": false, 
          "output": "Traceback (most recent call last):\n  File \"/code/eval.py3\", line 28, in <module>\n    assert (expected_output.equals(output))\nAssertionError\n", 
          "running_time": "2.07s", 
          "id": 1831468, 
          "name": "Testcase #4"
        }, 
        "1831466": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "89MB", 
          "cputime": "1s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.08s", 
          "id": 1831466, 
          "name": "Testcase #2"
        }, 
        "1831467": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "88MB", 
          "cputime": "1s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.06s", 
          "id": 1831467, 
          "name": "Testcase #3"
        }
      }, 
      "score": 11.25, 
      "evaluation_started": "2025-07-30T15:43:41Z", 
      "evaluation_ended": "2025-07-30T15:43:58Z", 
      "tid": "95fc88b34181938fe6cd2457d4c0f48e", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "2200031785cseh@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'count_word' function below.\n# \n# The function is expected to return an INTEGER ARRAY.\n# The function accepts STRING ARRAY ss as parameter.\n#\n\ndef count_word(ss):\n\t# Write your code here\n\treturn [len(word) for word in ss]\n\n\t\n\t\n\nif __name__ == '__main__':\n\tss_count = int(input().strip())\n\n\tss = []\n\n\tfor _ in range(ss_count):\n\t\tss_item = input()\n\t\tss.append(ss_item)\n\n\tresult = count_word(ss)\n\n\tprint('\\n'.join(map(str, result)))\n", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Word Length", 
    "full_name": "Parasa Pallavi", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 6, 
      "solution_id": 228100975, 
      "score": 5.0, 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "evaluation_ended": "2025-07-30T14:53:01Z", 
      "testcases_passed": 6, 
      "queue": "code-eval", 
      "testcases": {
        "1935862": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #6", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 1935862, 
          "memory_usage": "112kB"
        }, 
        "33067": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #2", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33067, 
          "memory_usage": "6MB"
        }, 
        "33066": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 0, 
          "expected_output": "3\n3\n5", 
          "cputime": "0s", 
          "name": "Testcase #1", 
          "is_sample": true, 
          "output": "", 
          "input": "3\none\ntwo\nthree", 
          "running_time": "0.00s", 
          "id": 33066, 
          "memory_usage": "6MB"
        }, 
        "33068": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #3", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33068, 
          "memory_usage": "7MB"
        }, 
        "1935750": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #4", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 1935750, 
          "memory_usage": "6MB"
        }, 
        "1935803": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #5", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 1935803, 
          "memory_usage": "6MB"
        }
      }, 
      "assessment_id": 0, 
      "evaluation_started": "2025-07-30T14:52:58Z", 
      "sid": "SCR:2025-07-30:ca7c74f0-aec6-43ed-aac1-ab18d0a348ca", 
      "tid": "431ef9bfb82800be15fcffa075517f31", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "2200031785cseh@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Django: Student Management API", 
    "full_name": "Parasa Pallavi", 
    "run_details": {
      "status": "REJ", 
      "testcases_total": 6, 
      "solution_id": 228097675, 
      "testcases_failed": 6, 
      "total_score": 5.0, 
      "testcases_passed": 0, 
      "testcases": {
        "1": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_update_existing_student", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_update_existing_student>\n\n    def test_update_existing_student(self):\n        updated_data = {\n            \"first_name\": \"Alice_updated\",\n            \"last_name\": \"Smith_updated\",\n            \"date_of_birth\": \"1998-05-16\",\n            \"grade\": 11,\n            \"phone\": \"1234567899\",\n            \"email\": \"alice.updated@example.com\"\n        }\n        student_id = Students.objects.first().id\n        response = self.client.patch(f'/students/{student_id}', json.dumps(updated_data), content_type='application/json')\n    \n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:124: AssertionError", 
          "id": 1, 
          "running_time": "0.005"
        }, 
        "3": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_get_all_students", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_all_students>\n\n    def test_get_all_students(self):\n        response = self.client.get('/students')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:66: AssertionError", 
          "id": 3, 
          "running_time": "0.004"
        }, 
        "2": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_get_existing_student", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_existing_student>\n\n    def test_get_existing_student(self):\n        student_id = Students.objects.first().id\n        response = self.client.get(f'/students/{student_id}')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:90: AssertionError", 
          "id": 2, 
          "running_time": "0.005"
        }, 
        "5": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_get_non_existent_student", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_non_existent_student>\n\n    def test_get_non_existent_student(self):\n        non_existent_id = 9999\n        response = self.client.get(f'/students/{non_existent_id}')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:105: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fd08ba2e220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 5, 
          "running_time": "0.004"
        }, 
        "4": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_update_non_existent_student", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_update_non_existent_student>\n\n    def test_update_non_existent_student(self):\n        updated_data = {\n            \"first_name\": \"Charlie\",\n            \"last_name\": \"Brown\",\n            \"date_of_birth\": \"2000-01-01\",\n            \"grade\": 12,\n            \"phone\": \"9999999999\",\n            \"email\": \"charlie.brown@example.com\"\n        }\n        non_existent_id = 9999\n        response = self.client.patch(f'/students/{non_existent_id}', json.dumps(updated_data), content_type='application/json')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:145: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fd08ba2e220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 4, 
          "running_time": "0.006"
        }, 
        "6": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_create_student", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_create_student>\n\n    def test_create_student(self):\n        student_data = {\n            \"first_name\": \"John\",\n            \"last_name\": \"Doe\",\n            \"date_of_birth\": \"2000-01-01\",\n            \"grade\": 8,\n            \"phone\": \"1234567890\",\n            \"email\": \"john.doe@example.com\"\n        }\n    \n        response = self.client.post('/students', json.dumps(student_data), content_type='application/json')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fd08ba2e220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 6, 
          "running_time": "0.376"
        }
      }, 
      "score": 0.0
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "2200031785cseh@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "# importing libraries\nimport pandas as pd \nimport numpy as np \n\n# reading dataset\ndata = pd.read_csv('/data/training/dataset.csv')\n\n# dropping the mentioned columns\ncols_to_remove=['VehicleID','IncidentAddress','Country','InsurancePolicyNumber','DateOfPolicyCoverage','Country','DateOfIncident']\ndata.drop(columns=cols_to_remove,inplace=True,errors='ignore')\n\n# Replacing the mentioned values with null vales\nmissing_values=['?','???','-','-1','-5','MISSINGVALUE','mode']\ndata.replace(missing_values,np.nan,inplace=True)\n\n# Drop columns with null value more than 30%\nthreshold=0.3*len(data)\ndata.dropna(axis=1,thresh=len(data)-threshold,inplace=True)\n\n# Imputing missing values\nfor column in data.columns:\n    if data[column].dtype=='object':\n        data[column].fillna(data[column].mode()[0],inplace=True)\n    else:\n        data[column].fillna(data[column].mean(),inplace=True)\n\n# Replacing column 'TypeOfIncident' values\nincident_mapping={'Single Vehicle Collision':1,'Multi-vehicle Collision':2,'Parked Car':3,'Vehicle Theft':4}\ndata['TypeOfIncident']=data['TypeOfIncident'].map(incident_mapping)\n\n# Replacing column 'TypeOfCollission' values\ncollision_mapping={'Side Collision':1,'Rear Collision':2,'Front Collision':3}\ndata['TypeOfCollission']=data['TypeOfCollission'].map(collision_mapping)\n\n# saving the output\ndata.to_csv('/code/output.csv', index=False)\n# final_df.to_csv('/code/output.csv', index=False)", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Data Prep Odyssey: Insurance Analytics", 
    "full_name": "harshitha", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 6, 
      "solution_id": 228097408, 
      "sid": "DSC:2025-07-30:526a68f8-cb9f-4c19-9c75-4c4a27ac81ad", 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "assessment_id": 0, 
      "testcases_passed": 6, 
      "testcases": {
        "1820966": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "90MB", 
          "cputime": "2s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "3.14s", 
          "id": 1820966, 
          "name": "Testcase #4"
        }, 
        "1820965": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "87MB", 
          "cputime": "3s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "3.24s", 
          "id": 1820965, 
          "name": "Testcase #3"
        }, 
        "1820970": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "86MB", 
          "cputime": "2s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "3.16s", 
          "id": 1820970, 
          "name": "Testcase #6"
        }, 
        "1820969": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "90MB", 
          "cputime": "2s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "3.11s", 
          "id": 1820969, 
          "name": "Testcase #5"
        }, 
        "1820349": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "90MB", 
          "cputime": "2s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "3.24s", 
          "id": 1820349, 
          "name": "Testcase #1"
        }, 
        "1820918": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "88MB", 
          "cputime": "2s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "3.22s", 
          "id": 1820918, 
          "name": "Testcase #2"
        }
      }, 
      "score": 15.0, 
      "evaluation_started": "2025-07-30T14:45:56Z", 
      "evaluation_ended": "2025-07-30T14:46:32Z", 
      "tid": "892fc9471faba4e17f54ed4635fe8a82", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "harshithachitneni52@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'count_word' function below.\n# \n# The function is expected to return an INTEGER ARRAY.\n# The function accepts STRING ARRAY ss as parameter.\n#\n\ndef count_word(ss):\n\t# Write your code here\n\treturn [len(word.strip()) for word in ss]\n\n\t\n\t\n\nif __name__ == '__main__':\n\tss_count = int(input().strip())\n\n\tss = []\n\n\tfor _ in range(ss_count):\n\t\tss_item = input()\n\t\tss.append(ss_item)\n\n\tresult = count_word(ss)\n\n\tprint('\\n'.join(map(str, result)))\n", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Word Length", 
    "full_name": "harshitha", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 6, 
      "solution_id": 228095338, 
      "score": 5.0, 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "evaluation_ended": "2025-07-30T14:23:08Z", 
      "testcases_passed": 6, 
      "queue": "code-eval", 
      "testcases": {
        "1935862": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #6", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 1935862, 
          "memory_usage": "116kB"
        }, 
        "33067": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #2", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33067, 
          "memory_usage": "6MB"
        }, 
        "33066": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 0, 
          "expected_output": "3\n3\n5", 
          "cputime": "0s", 
          "name": "Testcase #1", 
          "is_sample": true, 
          "output": "", 
          "input": "3\none\ntwo\nthree", 
          "running_time": "0.00s", 
          "id": 33066, 
          "memory_usage": "6MB"
        }, 
        "33068": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #3", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33068, 
          "memory_usage": "7MB"
        }, 
        "1935750": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #4", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 1935750, 
          "memory_usage": "7MB"
        }, 
        "1935803": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #5", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 1935803, 
          "memory_usage": "7MB"
        }
      }, 
      "assessment_id": 0, 
      "evaluation_started": "2025-07-30T14:23:05Z", 
      "sid": "SCR:2025-07-30:12bd3a18-3914-472a-a493-b8959cb6fae3", 
      "tid": "5ee086bf86c675648ae7e30801aac308", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "harshithachitneni52@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Predicting Cyber Attack Incidents", 
    "full_name": "harshitha", 
    "run_details": {}, 
    "jupyter_data": {
      "Questions.ipynb": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/a63dy6rx/Questions.ipynb"
      }, 
      "problem_extra_data": {
        "negetive_class": "0", 
        "positive_class": "1", 
        "evaluation_type": "accuracy", 
        "choices": {
          "positive_classes": [
            "0", 
            "1"
          ], 
          "columns": [
            "ID", 
            "INCIDENT_ID", 
            "DATE", 
            "X_1", 
            "X_2", 
            "X_3", 
            "X_4", 
            "X_5", 
            "X_6", 
            "X_7", 
            "X_8", 
            "X_9", 
            "X_10", 
            "X_11", 
            "X_12", 
            "X_13", 
            "X_14", 
            "X_15", 
            "MALICIOUS_OFFENSE"
          ]
        }, 
        "id_column": "ID", 
        "problem_type": "Binary Classification", 
        "target_column": "MALICIOUS_OFFENSE"
      }, 
      "jupyter_notebook_access_url": "https://servercreator.doselect.com/djp/user/cc8c9b267b6a464634175d83a3ecdd3c/lab/tree/Predicting Cyber Attack Incidents/Questions.ipynb?token=c00ff010e6f14418bd6def425a0d259f&reset", 
      "recall": 0.981, 
      "output.csv": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/a63dy6rx/output.csv"
      }, 
      "precision": 0.998, 
      "is_ready": false, 
      "user": "cc8c9b267b6a464634175d83a3ecdd3c", 
      "fscore": 0.989, 
      "accuracy": 0.981
    }, 
    "mcq_choice": null, 
    "email": "harshithachitneni52@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Django: Contact Manager Application", 
    "full_name": "Parvez shaik", 
    "run_details": {
      "status": "REJ", 
      "testcases_total": 7, 
      "solution_id": 228093145, 
      "testcases_failed": 7, 
      "total_score": 5.0, 
      "testcases_passed": 0, 
      "testcases": {
        "1": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestUserModel testMethod=test_user_creation>\n\n    def test_user_creation(self):\n        response = self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n>       self.assertEqual(response.status_code, 201)\nE       AssertionError: 404 != 201\n\ncontact/tests.py:65: AssertionError", 
          "running_time": "0.444", 
          "id": 1, 
          "name": "test_user_creation"
        }, 
        "3": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_delete_contact>\n\n    def test_delete_contact(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n        contact_id = 1\n        response = self.client.delete(f'/contacts/{contact_id}/')\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:150: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f976936a1f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.008", 
          "id": 3, 
          "name": "test_delete_contact"
        }, 
        "2": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_create_contact>\n\n    def test_create_contact(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        response = self.client.post('/contacts/', json.dumps(contact_by_alexia), content_type='application/json')\n>       self.assertEqual(response.status_code, 201)\nE       AssertionError: 404 != 201\n\ncontact/tests.py:77: AssertionError", 
          "running_time": "0.007", 
          "id": 2, 
          "name": "test_create_contact"
        }, 
        "5": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_get_all_contacts>\n\n    def test_get_all_contacts(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        self.client.post('/users/', json.dumps(user_thalia), content_type='application/json')\n    \n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n    \n        response = self.client.get('/contacts/')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\ncontact/tests.py:90: AssertionError", 
          "running_time": "0.010", 
          "id": 5, 
          "name": "test_get_all_contacts"
        }, 
        "4": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_delete_with_invalid_id>\n\n    def test_delete_with_invalid_id(self):\n        contact_id = 10\n        response = self.client.delete(f'/contacts/{contact_id}/')\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:157: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f976936a1f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.005", 
          "id": 4, 
          "name": "test_delete_with_invalid_id"
        }, 
        "7": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_patch_with_invalid_id>\n\n    def test_patch_with_invalid_id(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n    \n        contact_id = 9\n        update_json = {\n            'email': 'alexia@alexia.com',\n            'phone_number': '0001237869',\n            'address': '123 Main, St. Peterson Lane, NY 120276',\n        }\n        response = self.client.patch(f'/contacts/{contact_id}/', json.dumps(update_json), content_type='application/json')\n        self.assertEqual(response.status_code, 404)\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:134: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f976936a1f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.011", 
          "id": 7, 
          "name": "test_patch_with_invalid_id"
        }, 
        "6": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_patch_with_id>\n\n    def test_patch_with_id(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        contact = self.client.post('/contacts/', json.dumps(contact_by_alexia), content_type='application/json')\n>       contact_data = json.loads(contact.content)\n\ncontact/tests.py:102: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f976936a1f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.005", 
          "id": 6, 
          "name": "test_patch_with_id"
        }
      }, 
      "score": 0.0
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "shaik.parvez2002@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "#importing libraries\nimport pandas as pd\nimport numpy as np\n\n#reading the dataset\ndata = pd.read_csv('/data/training/dataset.csv',encoding='utf-8')\ndata = data.applymap(lambda x: x.encode('ascii', 'ignore').decode('ascii') if isinstance(x, str) else x)\n\n# task 1: top 5 sports that have awarded the most medals\ntask1 = data['Sport'].value_counts().reset_index()\ntask1.columns = ['Sport', 'Medal']\ntask1 = task1.head(5)\n\n# saving task1 output\ntask1.to_csv('/code/task1.csv', index=False)\n\n# task 2: top 5 athletes who have won the most gold medals.\ngold_df = data[data['Medal'] == 'Gold']\ntask2 = gold_df['Athlete'].value_counts().reset_index()\ntask2.columns = ['Athlete', 'Medal']\ntask2 = task2.head(5)\n# saving task2 output\ntask2.to_csv('/code/task2.csv', index=False)\n\n# task 3: top 5 Olympic events that have attracted the largest number of athletes.\ntask3 = data.groupby('Event')['Athlete'].nunique().reset_index()\ntask3 = task3.sort_values(by='Athlete',ascending=False).head(5)\n\n# saving task3 output\ntask3.to_csv('/code/task3.csv', index=False)\n\n# task 4: top 5 sports with the most number of female gold medalists.\nfemale_gold_df = data[(data['Gender'] == 'Women')&(data['Medal'] == 'Gold')]\ntask4 = female_gold_df['Sport'].value_counts().reset_index()\ntask4.columns = ['Sport', 'Women']\ntask4 = task4.head(5)\n\n# saving task4 output\ntask4.to_csv('/code/task4.csv', index=False)\n", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Olympics Analysis", 
    "full_name": "Parvez shaik", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 4, 
      "solution_id": 228099021, 
      "score": 15.0, 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "evaluation_ended": "2025-07-30T14:52:50Z", 
      "testcases_passed": 4, 
      "testcases": {
        "1498964": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #1", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.32s", 
          "id": 1498964, 
          "memory_usage": "89MB"
        }, 
        "1831468": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "1s", 
          "name": "Testcase #4", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.24s", 
          "id": 1831468, 
          "memory_usage": "88MB"
        }, 
        "1831466": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #2", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.31s", 
          "id": 1831466, 
          "memory_usage": "88MB"
        }, 
        "1831467": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "1s", 
          "name": "Testcase #3", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.19s", 
          "id": 1831467, 
          "memory_usage": "86MB"
        }
      }, 
      "assessment_id": 0, 
      "evaluation_started": "2025-07-30T14:52:32Z", 
      "sid": "DSC:2025-07-30:8e54d23c-1bac-4e0d-9ed3-8ca6a1522c2f", 
      "tid": "ac5cad07d9b652bcf62a332957ad64ad", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "shaik.parvez2002@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "import pandas as pd\nimport numpy as np\n\n\n\n\ndef additionalID(array_1, array_2):\n    return np.setdiff1d(array_2, array_1)    \nif __name__ == '__main__':\n    ls1 = np.array(list(map(int,input().split())))\n    ls2 = np.array(list(map(int,input().split())))\n    ans = additionalID(ls1, ls2)\n    ans = list(ans.tolist());\n    ans.sort()\n    print(*ans,sep=\" \")", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Find the odd man out", 
    "full_name": "Parvez shaik", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 5, 
      "solution_id": 228104548, 
      "score": 5.0, 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "evaluation_ended": "2025-07-30T15:22:18Z", 
      "testcases_passed": 5, 
      "queue": "code-eval", 
      "testcases": {
        "573861": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #2", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 573861, 
          "memory_usage": "63MB"
        }, 
        "573860": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 0, 
          "expected_output": "2 5 6", 
          "cputime": "0s", 
          "name": "Testcase #1", 
          "is_sample": true, 
          "output": "", 
          "input": "1 4 7 3\n1 2 3 4 5 6 7", 
          "running_time": "0.00s", 
          "id": 573860, 
          "memory_usage": "63MB"
        }, 
        "2158098": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #4", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2158098, 
          "memory_usage": "63MB"
        }, 
        "2158103": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #5", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2158103, 
          "memory_usage": "63MB"
        }, 
        "573864": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #3", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 573864, 
          "memory_usage": "63MB"
        }
      }, 
      "assessment_id": 0, 
      "evaluation_started": "2025-07-30T15:22:12Z", 
      "sid": "SCR:2025-07-30:6c0c1257-05e9-4cd6-8831-0356ab3b5f8b", 
      "tid": "0bb197ad6baf9e2d6d3e17167b2abfc2", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "shaik.parvez2002@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Predicting Cyber Attack Incidents", 
    "full_name": "Parvez shaik", 
    "run_details": {}, 
    "jupyter_data": {
      "Questions.ipynb": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/wbnw3m63/Questions.ipynb"
      }, 
      "output.csv": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/wbnw3m63/output.csv"
      }, 
      "jupyter_notebook_access_url": "https://servercreator.doselect.com/djp/user/a145b4e3f86ae2415ab8a114983a61bf/lab/tree/Predicting Cyber Attack Incidents/Questions.ipynb?token=0e0efd682fb24a96854fe017dada2df4&reset", 
      "recall": 0.983, 
      "problem_extra_data": {
        "negetive_class": "0", 
        "positive_class": "1", 
        "evaluation_type": "accuracy", 
        "choices": {
          "positive_classes": [
            "0", 
            "1"
          ], 
          "columns": [
            "ID", 
            "INCIDENT_ID", 
            "DATE", 
            "X_1", 
            "X_2", 
            "X_3", 
            "X_4", 
            "X_5", 
            "X_6", 
            "X_7", 
            "X_8", 
            "X_9", 
            "X_10", 
            "X_11", 
            "X_12", 
            "X_13", 
            "X_14", 
            "X_15", 
            "MALICIOUS_OFFENSE"
          ]
        }, 
        "id_column": "ID", 
        "problem_type": "Binary Classification", 
        "target_column": "MALICIOUS_OFFENSE"
      }, 
      "precision": 0.997, 
      "is_ready": false, 
      "user": "a145b4e3f86ae2415ab8a114983a61bf", 
      "fscore": 0.99, 
      "accuracy": 0.981
    }, 
    "mcq_choice": null, 
    "email": "shaik.parvez2002@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Predicting Cyber Attack Incidents", 
    "full_name": "Akash Lalwani", 
    "run_details": {}, 
    "jupyter_data": {
      "Questions.ipynb": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/o3orppeq/Questions.ipynb"
      }, 
      "problem_extra_data": {
        "negetive_class": "0", 
        "positive_class": "1", 
        "evaluation_type": "accuracy", 
        "choices": {
          "positive_classes": [
            "0", 
            "1"
          ], 
          "columns": [
            "ID", 
            "INCIDENT_ID", 
            "DATE", 
            "X_1", 
            "X_2", 
            "X_3", 
            "X_4", 
            "X_5", 
            "X_6", 
            "X_7", 
            "X_8", 
            "X_9", 
            "X_10", 
            "X_11", 
            "X_12", 
            "X_13", 
            "X_14", 
            "X_15", 
            "MALICIOUS_OFFENSE"
          ]
        }, 
        "id_column": "ID", 
        "problem_type": "Binary Classification", 
        "target_column": "MALICIOUS_OFFENSE"
      }, 
      "jupyter_notebook_access_url": "https://servercreator.doselect.com/djp/user/3574ff788f1c27c139e9de7a6a5aae24/lab/tree/Predicting Cyber Attack Incidents/Questions.ipynb?token=795495e6af534948ad084d7bb8c9c273&reset", 
      "recall": 0.986, 
      "output.csv": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/o3orppeq/output.csv"
      }, 
      "precision": 0.998, 
      "is_ready": false, 
      "user": "3574ff788f1c27c139e9de7a6a5aae24", 
      "fscore": 0.992, 
      "accuracy": 0.984
    }, 
    "mcq_choice": null, 
    "email": "lalwaniakash064@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Django: Contact Manager Application", 
    "full_name": "Akash Lalwani", 
    "run_details": {
      "status": "PAC", 
      "testcases_total": 7, 
      "solution_id": 228098267, 
      "testcases_failed": 6, 
      "total_score": 5.0, 
      "testcases_passed": 1, 
      "testcases": {
        "1": {
          "status": "AC/OK", 
          "description": "TestCase Passed", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.71, 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.449", 
          "id": 1, 
          "name": "test_user_creation"
        }, 
        "3": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_delete_contact>\n\n    def test_delete_contact(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        for contact in all_contacts:\n>           self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n\ncontact/tests.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../.local/lib/python3.8/site-packages/django/test/client.py:852: in post\n    response = super().post(\n../.local/lib/python3.8/site-packages/django/test/client.py:441: in post\n    return self.generic(\n../.local/lib/python3.8/site-packages/django/test/client.py:541: in generic\n    return self.request(**r)\n../.local/lib/python3.8/site-packages/django/test/client.py:810: in request\n    self.check_exception(response)\n../.local/lib/python3.8/site-packages/django/test/client.py:663: in check_exception\n    raise exc_value\n../.local/lib/python3.8/site-packages/django/core/handlers/exception.py:55: in inner\n    response = get_response(request)\n../.local/lib/python3.8/site-packages/django/core/handlers/base.py:197: in _get_response\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\n../.local/lib/python3.8/site-packages/django/views/decorators/csrf.py:54: in wrapped_view\n    return view_func(*args, **kwargs)\n../.local/lib/python3.8/site-packages/django/views/generic/base.py:103: in view\n    return self.dispatch(request, *args, **kwargs)\n../.local/lib/python3.8/site-packages/rest_framework/views.py:509: in dispatch\n    response = self.handle_exception(exc)\n../.local/lib/python3.8/site-packages/rest_framework/views.py:469: in handle_exception\n    self.raise_uncaught_exception(exc)\n../.local/lib/python3.8/site-packages/rest_framework/views.py:480: in raise_uncaught_exception\n    raise exc\n../.local/lib/python3.8/site-packages/rest_framework/views.py:506: in dispatch\n    response = handler(request, *args, **kwargs)\n../.local/lib/python3.8/site-packages/rest_framework/decorators.py:50: in handler\n    return func(*args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nrequest = <rest_framework.request.Request: POST '/contacts/'>\n\n    @api_view(['POST'])\n    def create_contact(request):\n        if request.method == 'POST':\n            serializer = ContactSerializer(data = request.data)\n            if serializer.is_valid():\n                contact = serializer.save()\n                return Response(serializer.data,status = status.HTTP_201_CREATED)\n>           return Response(serializer.errors,status = status.HTTP_404_BAD_REQUEST)\nE           AttributeError: module 'rest_framework.status' has no attribute 'HTTP_404_BAD_REQUEST'\n\ncontact/views.py:27: AttributeError", 
          "running_time": "0.025", 
          "id": 3, 
          "name": "test_delete_contact"
        }, 
        "2": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_create_contact>\n\n    def test_create_contact(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n>       response = self.client.post('/contacts/', json.dumps(contact_by_alexia), content_type='application/json')\n\ncontact/tests.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../.local/lib/python3.8/site-packages/django/test/client.py:852: in post\n    response = super().post(\n../.local/lib/python3.8/site-packages/django/test/client.py:441: in post\n    return self.generic(\n../.local/lib/python3.8/site-packages/django/test/client.py:541: in generic\n    return self.request(**r)\n../.local/lib/python3.8/site-packages/django/test/client.py:810: in request\n    self.check_exception(response)\n../.local/lib/python3.8/site-packages/django/test/client.py:663: in check_exception\n    raise exc_value\n../.local/lib/python3.8/site-packages/django/core/handlers/exception.py:55: in inner\n    response = get_response(request)\n../.local/lib/python3.8/site-packages/django/core/handlers/base.py:197: in _get_response\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\n../.local/lib/python3.8/site-packages/django/views/decorators/csrf.py:54: in wrapped_view\n    return view_func(*args, **kwargs)\n../.local/lib/python3.8/site-packages/django/views/generic/base.py:103: in view\n    return self.dispatch(request, *args, **kwargs)\n../.local/lib/python3.8/site-packages/rest_framework/views.py:509: in dispatch\n    response = self.handle_exception(exc)\n../.local/lib/python3.8/site-packages/rest_framework/views.py:469: in handle_exception\n    self.raise_uncaught_exception(exc)\n../.local/lib/python3.8/site-packages/rest_framework/views.py:480: in raise_uncaught_exception\n    raise exc\n../.local/lib/python3.8/site-packages/rest_framework/views.py:506: in dispatch\n    response = handler(request, *args, **kwargs)\n../.local/lib/python3.8/site-packages/rest_framework/decorators.py:50: in handler\n    return func(*args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nrequest = <rest_framework.request.Request: POST '/contacts/'>\n\n    @api_view(['POST'])\n    def create_contact(request):\n        if request.method == 'POST':\n            serializer = ContactSerializer(data = request.data)\n            if serializer.is_valid():\n                contact = serializer.save()\n                return Response(serializer.data,status = status.HTTP_201_CREATED)\n>           return Response(serializer.errors,status = status.HTTP_404_BAD_REQUEST)\nE           AttributeError: module 'rest_framework.status' has no attribute 'HTTP_404_BAD_REQUEST'\n\ncontact/views.py:27: AttributeError", 
          "running_time": "0.053", 
          "id": 2, 
          "name": "test_create_contact"
        }, 
        "5": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_get_all_contacts>\n\n    def test_get_all_contacts(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        self.client.post('/users/', json.dumps(user_thalia), content_type='application/json')\n    \n        for contact in all_contacts:\n>           self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n\ncontact/tests.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../.local/lib/python3.8/site-packages/django/test/client.py:852: in post\n    response = super().post(\n../.local/lib/python3.8/site-packages/django/test/client.py:441: in post\n    return self.generic(\n../.local/lib/python3.8/site-packages/django/test/client.py:541: in generic\n    return self.request(**r)\n../.local/lib/python3.8/site-packages/django/test/client.py:810: in request\n    self.check_exception(response)\n../.local/lib/python3.8/site-packages/django/test/client.py:663: in check_exception\n    raise exc_value\n../.local/lib/python3.8/site-packages/django/core/handlers/exception.py:55: in inner\n    response = get_response(request)\n../.local/lib/python3.8/site-packages/django/core/handlers/base.py:197: in _get_response\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\n../.local/lib/python3.8/site-packages/django/views/decorators/csrf.py:54: in wrapped_view\n    return view_func(*args, **kwargs)\n../.local/lib/python3.8/site-packages/django/views/generic/base.py:103: in view\n    return self.dispatch(request, *args, **kwargs)\n../.local/lib/python3.8/site-packages/rest_framework/views.py:509: in dispatch\n    response = self.handle_exception(exc)\n../.local/lib/python3.8/site-packages/rest_framework/views.py:469: in handle_exception\n    self.raise_uncaught_exception(exc)\n../.local/lib/python3.8/site-packages/rest_framework/views.py:480: in raise_uncaught_exception\n    raise exc\n../.local/lib/python3.8/site-packages/rest_framework/views.py:506: in dispatch\n    response = handler(request, *args, **kwargs)\n../.local/lib/python3.8/site-packages/rest_framework/decorators.py:50: in handler\n    return func(*args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nrequest = <rest_framework.request.Request: POST '/contacts/'>\n\n    @api_view(['POST'])\n    def create_contact(request):\n        if request.method == 'POST':\n            serializer = ContactSerializer(data = request.data)\n            if serializer.is_valid():\n                contact = serializer.save()\n                return Response(serializer.data,status = status.HTTP_201_CREATED)\n>           return Response(serializer.errors,status = status.HTTP_404_BAD_REQUEST)\nE           AttributeError: module 'rest_framework.status' has no attribute 'HTTP_404_BAD_REQUEST'\n\ncontact/views.py:27: AttributeError", 
          "running_time": "0.026", 
          "id": 5, 
          "name": "test_get_all_contacts"
        }, 
        "4": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_delete_with_invalid_id>\n\n    def test_delete_with_invalid_id(self):\n        contact_id = 10\n        response = self.client.delete(f'/contacts/{contact_id}/')\n        response_data = json.loads(response.content)\n>       self.assertEqual(response.status_code, 404)\nE       AssertionError: 405 != 404\n\ncontact/tests.py:158: AssertionError", 
          "running_time": "0.004", 
          "id": 4, 
          "name": "test_delete_with_invalid_id"
        }, 
        "7": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_patch_with_invalid_id>\n\n    def test_patch_with_invalid_id(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        for contact in all_contacts:\n>           self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n\ncontact/tests.py:124: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../.local/lib/python3.8/site-packages/django/test/client.py:852: in post\n    response = super().post(\n../.local/lib/python3.8/site-packages/django/test/client.py:441: in post\n    return self.generic(\n../.local/lib/python3.8/site-packages/django/test/client.py:541: in generic\n    return self.request(**r)\n../.local/lib/python3.8/site-packages/django/test/client.py:810: in request\n    self.check_exception(response)\n../.local/lib/python3.8/site-packages/django/test/client.py:663: in check_exception\n    raise exc_value\n../.local/lib/python3.8/site-packages/django/core/handlers/exception.py:55: in inner\n    response = get_response(request)\n../.local/lib/python3.8/site-packages/django/core/handlers/base.py:197: in _get_response\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\n../.local/lib/python3.8/site-packages/django/views/decorators/csrf.py:54: in wrapped_view\n    return view_func(*args, **kwargs)\n../.local/lib/python3.8/site-packages/django/views/generic/base.py:103: in view\n    return self.dispatch(request, *args, **kwargs)\n../.local/lib/python3.8/site-packages/rest_framework/views.py:509: in dispatch\n    response = self.handle_exception(exc)\n../.local/lib/python3.8/site-packages/rest_framework/views.py:469: in handle_exception\n    self.raise_uncaught_exception(exc)\n../.local/lib/python3.8/site-packages/rest_framework/views.py:480: in raise_uncaught_exception\n    raise exc\n../.local/lib/python3.8/site-packages/rest_framework/views.py:506: in dispatch\n    response = handler(request, *args, **kwargs)\n../.local/lib/python3.8/site-packages/rest_framework/decorators.py:50: in handler\n    return func(*args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nrequest = <rest_framework.request.Request: POST '/contacts/'>\n\n    @api_view(['POST'])\n    def create_contact(request):\n        if request.method == 'POST':\n            serializer = ContactSerializer(data = request.data)\n            if serializer.is_valid():\n                contact = serializer.save()\n                return Response(serializer.data,status = status.HTTP_201_CREATED)\n>           return Response(serializer.errors,status = status.HTTP_404_BAD_REQUEST)\nE           AttributeError: module 'rest_framework.status' has no attribute 'HTTP_404_BAD_REQUEST'\n\ncontact/views.py:27: AttributeError", 
          "running_time": "0.026", 
          "id": 7, 
          "name": "test_patch_with_invalid_id"
        }, 
        "6": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_patch_with_id>\n\n    def test_patch_with_id(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n>       contact = self.client.post('/contacts/', json.dumps(contact_by_alexia), content_type='application/json')\n\ncontact/tests.py:101: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../.local/lib/python3.8/site-packages/django/test/client.py:852: in post\n    response = super().post(\n../.local/lib/python3.8/site-packages/django/test/client.py:441: in post\n    return self.generic(\n../.local/lib/python3.8/site-packages/django/test/client.py:541: in generic\n    return self.request(**r)\n../.local/lib/python3.8/site-packages/django/test/client.py:810: in request\n    self.check_exception(response)\n../.local/lib/python3.8/site-packages/django/test/client.py:663: in check_exception\n    raise exc_value\n../.local/lib/python3.8/site-packages/django/core/handlers/exception.py:55: in inner\n    response = get_response(request)\n../.local/lib/python3.8/site-packages/django/core/handlers/base.py:197: in _get_response\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\n../.local/lib/python3.8/site-packages/django/views/decorators/csrf.py:54: in wrapped_view\n    return view_func(*args, **kwargs)\n../.local/lib/python3.8/site-packages/django/views/generic/base.py:103: in view\n    return self.dispatch(request, *args, **kwargs)\n../.local/lib/python3.8/site-packages/rest_framework/views.py:509: in dispatch\n    response = self.handle_exception(exc)\n../.local/lib/python3.8/site-packages/rest_framework/views.py:469: in handle_exception\n    self.raise_uncaught_exception(exc)\n../.local/lib/python3.8/site-packages/rest_framework/views.py:480: in raise_uncaught_exception\n    raise exc\n../.local/lib/python3.8/site-packages/rest_framework/views.py:506: in dispatch\n    response = handler(request, *args, **kwargs)\n../.local/lib/python3.8/site-packages/rest_framework/decorators.py:50: in handler\n    return func(*args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nrequest = <rest_framework.request.Request: POST '/contacts/'>\n\n    @api_view(['POST'])\n    def create_contact(request):\n        if request.method == 'POST':\n            serializer = ContactSerializer(data = request.data)\n            if serializer.is_valid():\n                contact = serializer.save()\n                return Response(serializer.data,status = status.HTTP_201_CREATED)\n>           return Response(serializer.errors,status = status.HTTP_404_BAD_REQUEST)\nE           AttributeError: module 'rest_framework.status' has no attribute 'HTTP_404_BAD_REQUEST'\n\ncontact/views.py:27: AttributeError", 
          "running_time": "0.023", 
          "id": 6, 
          "name": "test_patch_with_id"
        }
      }, 
      "score": 0.7142857142857143
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "lalwaniakash064@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "# importing libraries\nimport pandas as pd \nimport numpy as np \n\n# reading dataset\ndata = pd.read_csv('/data/training/dataset.csv')\n\n# dropping the mentioned columns\ncolumns_to_drop = ['VehicleID','IncidentAddress','Country','InsurancePolicyNumber','DateOfPolicyCoverage','Country','DateOfIncident']\n\nexisting_columns_to_drop = [col for col in columns_to_drop if col in data.columns]\n\ndata = data.drop(columns = existing_columns_to_drop)\n\n# Replacing the mentioned values with null vales\nvalues_to_replace = ['?','???','-1','-3','MISSINGVALUE','mode']\nfor col in data.columns:\n    data[col] = data[col].replace(values_to_replace,np.nan)\n\n# Drop columns with null value more than 30%\nthreshold = 0.30\nnull_percentage = data.isnull().sum() /len(data)\ncolumns_to_drop_null = null_percentage[null_percentage > threshold].index.tolist()\n\ndata = data.drop(columns = columns_to_drop_null)\n\n# Imputing missing values\ncategorical_columns = data.select_dtypes(include = ['object']).columns\n\nfor col in categorical_columns:\n    if data[col].isnull().sum() > 0:\n        mode_value = data[col].mode()\n        if len(mode_value) > 0:\n            data[col].fillna(mode_value[0],inplace = True)\n\nnumerical_columns = data.select_dtypes(include = [np.number]).columns \nfor col in numerical_columns:\n    if data[col].isnull().sum() > 0:\n        mean_value = data[col].mean()\n        data[col].fillna(mean_value,inplace = True)\n\n\n# Replacing column 'TypeOfIncident' values\nif 'TypeOfIncident' in data.columns:\n    incident_mapping = {\n        'Single Vehicle Collision' : 1,\n        'Multi-vehicle Collision' : 2,\n        'Parked Car': 3,\n        'Vehicle Theft': 4\n    }\n    data['TypeOfIncident'] = data['TypeOfIncident'].map(incident_mapping)\n\n\n# Replacing column 'TypeOfCollission' values\nif 'TypeOfCollission' in data.columns:\n    collision_mapping = {\n        'Side Collision': 1,\n        'Rear Collision': 2,\n        'Front Collision':3\n    }\n    data['TypeOfCollission'] = data['TypeOfCollission'].map(collision_mapping)\n\n# saving the output\ndata.to_csv('/code/output.csv', index=False)", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Data Prep Odyssey: Insurance Analytics", 
    "full_name": "Akash Lalwani", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 6, 
      "solution_id": 228103511, 
      "sid": "DSC:2025-07-30:ae1ba907-0c01-4038-a8f8-6601b1d85934", 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "assessment_id": 0, 
      "testcases_passed": 6, 
      "testcases": {
        "1820966": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "88MB", 
          "cputime": "3s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "3.61s", 
          "id": 1820966, 
          "name": "Testcase #4"
        }, 
        "1820965": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "88MB", 
          "cputime": "3s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "3.47s", 
          "id": 1820965, 
          "name": "Testcase #3"
        }, 
        "1820970": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "89MB", 
          "cputime": "3s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "3.78s", 
          "id": 1820970, 
          "name": "Testcase #6"
        }, 
        "1820969": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "88MB", 
          "cputime": "3s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "3.80s", 
          "id": 1820969, 
          "name": "Testcase #5"
        }, 
        "1820349": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "84MB", 
          "cputime": "3s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "3.50s", 
          "id": 1820349, 
          "name": "Testcase #1"
        }, 
        "1820918": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "88MB", 
          "cputime": "3s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "3.65s", 
          "id": 1820918, 
          "name": "Testcase #2"
        }
      }, 
      "score": 15.0, 
      "evaluation_started": "2025-07-30T15:30:06Z", 
      "evaluation_ended": "2025-07-30T15:30:47Z", 
      "tid": "1db3b1159bed884a9f750a64d0762f13", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "lalwaniakash064@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "import pandas as pd\nimport numpy as np\n\n\n\n\ndef additionalID(array_1, array_2):\n    # Write your code here and Return the Numpy Array\n    import numpy as np\n    result = []\n    for id in array_2:\n        if id not in array_1:\n            result.append(id)\n    return np.array(result)     \n    \nif __name__ == '__main__':\n    ls1 = np.array(list(map(int,input().split())))\n    ls2 = np.array(list(map(int,input().split())))\n    ans = additionalID(ls1, ls2)\n    ans = list(ans.tolist());\n    ans.sort()\n    print(*ans,sep=\" \")", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Find the odd man out", 
    "full_name": "Akash Lalwani", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 5, 
      "solution_id": 228106434, 
      "sid": "SCR:2025-07-30:f7c55f0f-76b4-4987-a66b-bd9b8f23880c", 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "assessment_id": 0, 
      "testcases_passed": 5, 
      "queue": "code-eval", 
      "testcases": {
        "573861": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "63MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 573861, 
          "name": "Testcase #2"
        }, 
        "573860": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 0, 
          "expected_output": "2 5 6", 
          "memory_usage": "63MB", 
          "cputime": "0s", 
          "is_sample": true, 
          "input": "1 4 7 3\n1 2 3 4 5 6 7", 
          "output": "", 
          "running_time": "0.00s", 
          "id": 573860, 
          "name": "Testcase #1"
        }, 
        "2158098": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "61MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2158098, 
          "name": "Testcase #4"
        }, 
        "2158103": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "63MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2158103, 
          "name": "Testcase #5"
        }, 
        "573864": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "62MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 573864, 
          "name": "Testcase #3"
        }
      }, 
      "score": 5.0, 
      "evaluation_started": "2025-07-30T15:47:22Z", 
      "evaluation_ended": "2025-07-30T15:47:28Z", 
      "tid": "efbd10d6eedb37c7ccf342f309b35554", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "lalwaniakash064@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Django: Contact Manager Application", 
    "full_name": "harshitha", 
    "run_details": {
      "status": "REJ", 
      "testcases_total": 7, 
      "solution_id": 228103325, 
      "testcases_failed": 7, 
      "total_score": 5.0, 
      "testcases_passed": 0, 
      "testcases": {
        "1": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_create_contact", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_create_contact>\n\n    def test_create_contact(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        response = self.client.post('/contacts/', json.dumps(contact_by_alexia), content_type='application/json')\n>       self.assertEqual(response.status_code, 201)\nE       AssertionError: 404 != 201\n\ncontact/tests.py:77: AssertionError", 
          "id": 1, 
          "running_time": "0.004"
        }, 
        "3": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_get_all_contacts", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_get_all_contacts>\n\n    def test_get_all_contacts(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        self.client.post('/users/', json.dumps(user_thalia), content_type='application/json')\n    \n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n    \n        response = self.client.get('/contacts/')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\ncontact/tests.py:90: AssertionError", 
          "id": 3, 
          "running_time": "0.007"
        }, 
        "2": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_patch_with_invalid_id", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_patch_with_invalid_id>\n\n    def test_patch_with_invalid_id(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n    \n        contact_id = 9\n        update_json = {\n            'email': 'alexia@alexia.com',\n            'phone_number': '0001237869',\n            'address': '123 Main, St. Peterson Lane, NY 120276',\n        }\n        response = self.client.patch(f'/contacts/{contact_id}/', json.dumps(update_json), content_type='application/json')\n        self.assertEqual(response.status_code, 404)\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:134: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f4cd12b2220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 2, 
          "running_time": "0.009"
        }, 
        "5": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_patch_with_id", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_patch_with_id>\n\n    def test_patch_with_id(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        contact = self.client.post('/contacts/', json.dumps(contact_by_alexia), content_type='application/json')\n>       contact_data = json.loads(contact.content)\n\ncontact/tests.py:102: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f4cd12b2220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 5, 
          "running_time": "0.004"
        }, 
        "4": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_delete_contact", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_delete_contact>\n\n    def test_delete_contact(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n        contact_id = 1\n        response = self.client.delete(f'/contacts/{contact_id}/')\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:150: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f4cd12b2220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 4, 
          "running_time": "0.007"
        }, 
        "7": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_delete_with_invalid_id", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_delete_with_invalid_id>\n\n    def test_delete_with_invalid_id(self):\n        contact_id = 10\n        response = self.client.delete(f'/contacts/{contact_id}/')\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:157: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f4cd12b2220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 7, 
          "running_time": "0.005"
        }, 
        "6": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "name": "test_user_creation", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestUserModel testMethod=test_user_creation>\n\n    def test_user_creation(self):\n        response = self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n>       self.assertEqual(response.status_code, 201)\nE       AssertionError: 404 != 201\n\ncontact/tests.py:65: AssertionError", 
          "id": 6, 
          "running_time": "0.339"
        }
      }, 
      "score": 0.0
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "harshithachitneni52@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "#importing libraries\nimport pandas as pd\nimport numpy as np\n\n#reading the dataset\ndata = pd.read_csv('/data/training/dataset.csv',encoding='utf-8')\ndata = data.applymap(lambda x: x.encode('ascii', 'ignore').decode('ascii') if isinstance(x, str) else x)\n\n# task 1: top 5 sports that have awarded the most medals\ntask1 = data.groupby(\"Sport\")[\"Medal\"].count().sort_values(ascending=False).head(5).reset_index()\n# saving task1 output\ntask1.to_csv('/code/task1.csv', index=False)\n\n# task 2: top 5 athletes who have won the most gold medals.\ntask2 = data[data[\"Medal\"]==\"Gold\"].groupby(\"Athlete\")[\"Medal\"].count().sort_values(ascending=False).head(5).reset_index()\n\n# saving task2 output\ntask2.to_csv('/code/task2.csv', index=False)\n\n# task 3: top 5 Olympic events that have attracted the largest number of athletes.\ntask3 = data.groupby(\"Event\")[\"Athlete\"].nunique().sort_values(ascending=False).head(5).reset_index()\n# saving task3 output\ntask3.to_csv('/code/task3.csv', index=False)\n\n# task 4: top 5 sports with the most number of female gold medalists.\ntask4 = data[(data[\"Medal\"]==\"Gold\") & (data[\"Gender\"] == \"Women\")]\ntask4 = task4.groupby(\"Sport\")[\"Athlete\"].nunique().reset_index()\ntask4.columns = [\"Sport\",\"Women\"]\ntask4[\"Sport\"] = task4[\"Sport\"].str.strip()\ntask4 = task4.sort_values(by=\"Women\", ascending=False).head(5)\n\n# saving task4 output\ntask4.to_csv('/code/task4.csv', index=False)\n", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Olympics Analysis", 
    "full_name": "Ajay Kumar", 
    "run_details": {
      "status": "PAC", 
      "testcases_total": 4, 
      "solution_id": 228095504, 
      "score": 11.25, 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 1, 
      "evaluation_status": "completed", 
      "evaluation_ended": "2025-07-30T14:50:13Z", 
      "testcases_passed": 3, 
      "testcases": {
        "1498964": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "1s", 
          "name": "Testcase #1", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.06s", 
          "id": 1498964, 
          "memory_usage": "88MB"
        }, 
        "1831468": {
          "status": "NC", 
          "description": "Testcase failed.", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #4", 
          "is_sample": false, 
          "output": "Traceback (most recent call last):\n  File \"/code/eval.py3\", line 28, in <module>\n    assert (expected_output.equals(output))\nAssertionError\n", 
          "running_time": "2.84s", 
          "id": 1831468, 
          "memory_usage": "89MB"
        }, 
        "1831466": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "1s", 
          "name": "Testcase #2", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.08s", 
          "id": 1831466, 
          "memory_usage": "88MB"
        }, 
        "1831467": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #3", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.89s", 
          "id": 1831467, 
          "memory_usage": "88MB"
        }
      }, 
      "assessment_id": 0, 
      "evaluation_started": "2025-07-30T14:49:51Z", 
      "sid": "DSC:2025-07-30:d7c0fdf4-11e3-4172-b086-2014436424d7", 
      "tid": "0f1e92420b89ba3ee7d65241b43127bd", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "ajaydhiman667@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "def print_numbers_in_range(start, end):\n    # Write your code here\n    if start < 1 or end >100:\n        print(\"Out of Range\")\n\n    elif (end - start + 1)!=10:\n        print(\"Difference Not in Range\")\n\n    else:\n        res = []\n        for i in range(start, end+1):\n            res.append(i)\n\n        print(res)\n\nT = int(input())\n\nfor _ in range(T):\n    # Input: start and end points for each test case\n    start, end = map(int, input().split())\n    print_numbers_in_range(start, end)", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Algorithms: Numbered Lists", 
    "full_name": "Ajay Kumar", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 12, 
      "solution_id": 228088129, 
      "score": 5.0, 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "evaluation_ended": "2025-07-30T13:40:13Z", 
      "testcases_passed": 12, 
      "queue": "code-eval", 
      "testcases": {
        "2238787": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #4", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238787, 
          "memory_usage": "6MB"
        }, 
        "2238795": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #10", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238795, 
          "memory_usage": "7MB"
        }, 
        "2238796": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #11", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238796, 
          "memory_usage": "6MB"
        }, 
        "2238797": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #12", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238797, 
          "memory_usage": "116kB"
        }, 
        "2238790": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #7", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238790, 
          "memory_usage": "7MB"
        }, 
        "2238791": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #8", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238791, 
          "memory_usage": "6MB"
        }, 
        "2238792": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #9", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238792, 
          "memory_usage": "6MB"
        }, 
        "2238789": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #6", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238789, 
          "memory_usage": "7MB"
        }, 
        "2238788": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #5", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238788, 
          "memory_usage": "7MB"
        }, 
        "60957": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 0, 
          "expected_output": "Difference Not in Range\n[3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", 
          "cputime": "0s", 
          "name": "Testcase #2", 
          "is_sample": true, 
          "output": "", 
          "input": "2\n2 4\n3 12", 
          "running_time": "0.00s", 
          "id": 60957, 
          "memory_usage": "6MB"
        }, 
        "60952": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 0, 
          "expected_output": "Difference Not in Range\n[22, 23, 24, 25, 26, 27, 28, 29, 30, 31]\nOut of Range", 
          "cputime": "0s", 
          "name": "Testcase #1", 
          "is_sample": true, 
          "output": "", 
          "input": "3\n1 9\n22 31\n90 103", 
          "running_time": "0.00s", 
          "id": 60952, 
          "memory_usage": "6MB"
        }, 
        "60961": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #3", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 60961, 
          "memory_usage": "7MB"
        }
      }, 
      "assessment_id": 0, 
      "evaluation_started": "2025-07-30T13:40:09Z", 
      "sid": "SCR:2025-07-30:24fae28d-0d28-4d30-b269-9d4c424391b4", 
      "tid": "9f0b9984adb2b75d0204ce0f69122fd6", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "ajaydhiman667@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Django: Contact Manager Application", 
    "full_name": "Ajay Kumar", 
    "run_details": {
      "status": "REJ", 
      "testcases_total": 7, 
      "solution_id": 228100736, 
      "testcases_failed": 7, 
      "total_score": 5.0, 
      "testcases_passed": 0, 
      "testcases": {
        "1": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestUserModel testMethod=test_user_creation>\n\n    def test_user_creation(self):\n        response = self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n>       self.assertEqual(response.status_code, 201)\nE       AssertionError: 404 != 201\n\ncontact/tests.py:65: AssertionError", 
          "running_time": "0.216", 
          "id": 1, 
          "name": "test_user_creation"
        }, 
        "3": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_delete_contact>\n\n    def test_delete_contact(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n        contact_id = 1\n        response = self.client.delete(f'/contacts/{contact_id}/')\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:150: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f931f2e0550>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.004", 
          "id": 3, 
          "name": "test_delete_contact"
        }, 
        "2": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_create_contact>\n\n    def test_create_contact(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        response = self.client.post('/contacts/', json.dumps(contact_by_alexia), content_type='application/json')\n>       self.assertEqual(response.status_code, 201)\nE       AssertionError: 404 != 201\n\ncontact/tests.py:77: AssertionError", 
          "running_time": "0.003", 
          "id": 2, 
          "name": "test_create_contact"
        }, 
        "5": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_get_all_contacts>\n\n    def test_get_all_contacts(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        self.client.post('/users/', json.dumps(user_thalia), content_type='application/json')\n    \n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n    \n        response = self.client.get('/contacts/')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\ncontact/tests.py:90: AssertionError", 
          "running_time": "0.005", 
          "id": 5, 
          "name": "test_get_all_contacts"
        }, 
        "4": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_delete_with_invalid_id>\n\n    def test_delete_with_invalid_id(self):\n        contact_id = 10\n        response = self.client.delete(f'/contacts/{contact_id}/')\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:157: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f931f2e0550>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.002", 
          "id": 4, 
          "name": "test_delete_with_invalid_id"
        }, 
        "7": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_patch_with_invalid_id>\n\n    def test_patch_with_invalid_id(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n    \n        contact_id = 9\n        update_json = {\n            'email': 'alexia@alexia.com',\n            'phone_number': '0001237869',\n            'address': '123 Main, St. Peterson Lane, NY 120276',\n        }\n        response = self.client.patch(f'/contacts/{contact_id}/', json.dumps(update_json), content_type='application/json')\n        self.assertEqual(response.status_code, 404)\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:134: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f931f2e0550>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.005", 
          "id": 7, 
          "name": "test_patch_with_invalid_id"
        }, 
        "6": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_patch_with_id>\n\n    def test_patch_with_id(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        contact = self.client.post('/contacts/', json.dumps(contact_by_alexia), content_type='application/json')\n>       contact_data = json.loads(contact.content)\n\ncontact/tests.py:102: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f931f2e0550>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.002", 
          "id": 6, 
          "name": "test_patch_with_id"
        }
      }, 
      "score": 0.0
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "ajaydhiman667@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Binary Classification: Deposit Subscriptions", 
    "full_name": "Ajay Kumar", 
    "run_details": {}, 
    "jupyter_data": {
      "Questions.ipynb": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/rd6goabo/Questions.ipynb"
      }, 
      "problem_extra_data": {
        "negetive_class": "no", 
        "positive_class": "yes", 
        "evaluation_type": "accuracy", 
        "choices": {
          "positive_classes": [
            "no", 
            "yes"
          ], 
          "columns": [
            "ID", 
            "age", 
            "job", 
            "marital", 
            "education", 
            "default", 
            "balance", 
            "housing", 
            "loan", 
            "contact", 
            "day", 
            "month", 
            "duration", 
            "campaign", 
            "pdays", 
            "previous", 
            "poutcome", 
            "y"
          ]
        }, 
        "target_column": "y", 
        "problem_type": "Binary Classification", 
        "id_column": "ID"
      }, 
      "jupyter_notebook_access_url": "https://servercreator.doselect.com/djp/user/6cdebadd784b1abf5f310d19147ec89b/lab/tree/Binary Classification: Deposit Subscriptions/Questions.ipynb?token=5dd8774a505f4e9d9833402bc47fbcfa&reset", 
      "recall": 0.652, 
      "output.csv": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/rd6goabo/output.csv"
      }, 
      "precision": 0.406, 
      "is_ready": false, 
      "user": "6cdebadd784b1abf5f310d19147ec89b", 
      "fscore": 0.5, 
      "accuracy": 0.905
    }, 
    "mcq_choice": null, 
    "email": "ajaydhiman667@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "import pandas as pd\nimport numpy as np\n\ndata = pd.read_csv('/data/training/dataset.csv')\n\ncols_to_drop = [\n    'VehicleID', 'IncidentAddress', 'Country',\n    'InsurancePolicyNumber', 'DateOfPolicyCoverage', 'DateOfIncident'\n]\ndata = data.drop(columns=cols_to_drop)\n\nmissing_values = ['?', '???', '-1', '-5', 'MISSINGVALUE', 'mode']\ndata = data.replace(missing_values, np.nan)\n\nthreshold = len(data) * 0.7  # keep columns with at least 70% non-null\ndata = data.dropna(axis=1, thresh=threshold)\n\nfor col in data.columns:\n    if data[col].dtype == 'object':\n        data[col] = data[col].fillna(data[col].mode()[0])\n    else:\n        data[col] = data[col].fillna(data[col].mean())\n\nincident_map = {\n    'Single Vehicle Collision': 1,\n    'Multi-vehicle Collision': 2,\n    'Parked Car': 3,\n    'Vehicle Theft': 4\n}\nif 'TypeOfIncident' in data.columns:\n    data['TypeOfIncident'] = data['TypeOfIncident'].map(incident_map).fillna(data['TypeOfIncident'])\n\ncollision_map = {\n    'Side Collision': 1,\n    'Rear Collision': 2,\n    'Front Collision': 3\n}\nif 'TypeOfCollission' in data.columns:\n    data['TypeOfCollission'] = data['TypeOfCollission'].map(collision_map).fillna(data['TypeOfCollission'])\n\ndata.to_csv('/code/output.csv', index=False)\n", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Data Prep Odyssey: Insurance Analytics", 
    "full_name": "BYPUREDDY HARI RAJIV", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 6, 
      "solution_id": 228100949, 
      "sid": "DSC:2025-07-30:7c22d79a-7985-44a7-9942-a3c53e3bb5c4", 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "assessment_id": 0, 
      "testcases_passed": 6, 
      "testcases": {
        "1820966": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "90MB", 
          "cputime": "4s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "5.41s", 
          "id": 1820966, 
          "name": "Testcase #4"
        }, 
        "1820965": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "93MB", 
          "cputime": "4s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "4.74s", 
          "id": 1820965, 
          "name": "Testcase #3"
        }, 
        "1820970": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "88MB", 
          "cputime": "4s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "5.00s", 
          "id": 1820970, 
          "name": "Testcase #6"
        }, 
        "1820969": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "90MB", 
          "cputime": "5s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "5.98s", 
          "id": 1820969, 
          "name": "Testcase #5"
        }, 
        "1820349": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "90MB", 
          "cputime": "4s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "4.68s", 
          "id": 1820349, 
          "name": "Testcase #1"
        }, 
        "1820918": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "90MB", 
          "cputime": "4s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "4.81s", 
          "id": 1820918, 
          "name": "Testcase #2"
        }
      }, 
      "score": 15.0, 
      "evaluation_started": "2025-07-30T14:56:42Z", 
      "evaluation_ended": "2025-07-30T14:57:40Z", 
      "tid": "838eda38a3da512806cdfd5615300cdb", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "2200032306cseh@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "T = int(input().strip())\nX = []\nfor _ in range(T):\n    X.append(input().strip())\n\nN = int(input().strip())\nA = []\nfor _ in range(N):\n    A.append(input().strip())\n\nfor item in A:\n    found = False\n    for x in X:\n        if item == x:\n            found = True\n            break\n    print(\"true\" if found else \"false\")\n", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Member or Not", 
    "full_name": "BYPUREDDY HARI RAJIV", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 3, 
      "solution_id": 228101394, 
      "score": 5.0, 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "evaluation_ended": "2025-07-30T14:56:18Z", 
      "testcases_passed": 3, 
      "queue": "code-eval", 
      "testcases": {
        "33001": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #3", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33001, 
          "memory_usage": "116kB"
        }, 
        "33000": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #2", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33000, 
          "memory_usage": "6MB"
        }, 
        "32999": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 0, 
          "expected_output": "true\nfalse\nfalse", 
          "cputime": "0s", 
          "name": "Testcase #1", 
          "is_sample": true, 
          "output": "", 
          "input": "2\nhello\nbug\n3\nbug\nin\nproduction", 
          "running_time": "0.00s", 
          "id": 32999, 
          "memory_usage": "0kB"
        }
      }, 
      "assessment_id": 0, 
      "evaluation_started": "2025-07-30T14:56:16Z", 
      "sid": "SCR:2025-07-30:232d2a05-9e47-4e48-af5e-8db20abfe68e", 
      "tid": "c57c123ec8fce96409511cea6d8c2cff", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "2200032306cseh@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Binary Classification: Deposit Subscriptions", 
    "full_name": "BYPUREDDY HARI RAJIV", 
    "run_details": {}, 
    "jupyter_data": {
      "Questions.ipynb": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/314rv8gv/Questions.ipynb"
      }, 
      "problem_extra_data": {
        "negetive_class": "no", 
        "positive_class": "yes", 
        "evaluation_type": "accuracy", 
        "choices": {
          "positive_classes": [
            "no", 
            "yes"
          ], 
          "columns": [
            "ID", 
            "age", 
            "job", 
            "marital", 
            "education", 
            "default", 
            "balance", 
            "housing", 
            "loan", 
            "contact", 
            "day", 
            "month", 
            "duration", 
            "campaign", 
            "pdays", 
            "previous", 
            "poutcome", 
            "y"
          ]
        }, 
        "target_column": "y", 
        "problem_type": "Binary Classification", 
        "id_column": "ID"
      }, 
      "jupyter_notebook_access_url": "https://servercreator.doselect.com/djp/user/9c4774380900bbfd2d2b891568c8f933/lab/tree/Binary Classification: Deposit Subscriptions/Questions.ipynb?token=6b334fcd958141f4838d31ffac8fa72d&reset", 
      "recall": 0.653, 
      "output.csv": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/314rv8gv/output.csv"
      }, 
      "precision": 0.396, 
      "is_ready": false, 
      "user": "9c4774380900bbfd2d2b891568c8f933", 
      "fscore": 0.493, 
      "accuracy": 0.904
    }, 
    "mcq_choice": null, 
    "email": "2200032306cseh@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Django: Student Management API", 
    "full_name": "BYPUREDDY HARI RAJIV", 
    "run_details": {
      "status": "REJ", 
      "testcases_total": 6, 
      "solution_id": 228100614, 
      "testcases_failed": 6, 
      "total_score": 5.0, 
      "testcases_passed": 0, 
      "testcases": {
        "1": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_update_existing_student", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_update_existing_student>\n\n    def test_update_existing_student(self):\n        updated_data = {\n            \"first_name\": \"Alice_updated\",\n            \"last_name\": \"Smith_updated\",\n            \"date_of_birth\": \"1998-05-16\",\n            \"grade\": 11,\n            \"phone\": \"1234567899\",\n            \"email\": \"alice.updated@example.com\"\n        }\n        student_id = Students.objects.first().id\n        response = self.client.patch(f'/students/{student_id}', json.dumps(updated_data), content_type='application/json')\n    \n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:124: AssertionError", 
          "id": 1, 
          "running_time": "0.005"
        }, 
        "3": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_get_all_students", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_all_students>\n\n    def test_get_all_students(self):\n        response = self.client.get('/students')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:66: AssertionError", 
          "id": 3, 
          "running_time": "0.004"
        }, 
        "2": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_get_existing_student", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_existing_student>\n\n    def test_get_existing_student(self):\n        student_id = Students.objects.first().id\n        response = self.client.get(f'/students/{student_id}')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:90: AssertionError", 
          "id": 2, 
          "running_time": "0.005"
        }, 
        "5": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_get_non_existent_student", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_non_existent_student>\n\n    def test_get_non_existent_student(self):\n        non_existent_id = 9999\n        response = self.client.get(f'/students/{non_existent_id}')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:105: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fd08ba2e220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 5, 
          "running_time": "0.004"
        }, 
        "4": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_update_non_existent_student", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_update_non_existent_student>\n\n    def test_update_non_existent_student(self):\n        updated_data = {\n            \"first_name\": \"Charlie\",\n            \"last_name\": \"Brown\",\n            \"date_of_birth\": \"2000-01-01\",\n            \"grade\": 12,\n            \"phone\": \"9999999999\",\n            \"email\": \"charlie.brown@example.com\"\n        }\n        non_existent_id = 9999\n        response = self.client.patch(f'/students/{non_existent_id}', json.dumps(updated_data), content_type='application/json')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:145: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fd08ba2e220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 4, 
          "running_time": "0.006"
        }, 
        "6": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_create_student", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_create_student>\n\n    def test_create_student(self):\n        student_data = {\n            \"first_name\": \"John\",\n            \"last_name\": \"Doe\",\n            \"date_of_birth\": \"2000-01-01\",\n            \"grade\": 8,\n            \"phone\": \"1234567890\",\n            \"email\": \"john.doe@example.com\"\n        }\n    \n        response = self.client.post('/students', json.dumps(student_data), content_type='application/json')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fd08ba2e220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 6, 
          "running_time": "0.376"
        }
      }, 
      "score": 0.0
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "2200032306cseh@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "def print_numbers_in_range(start, end):\n    if start < 1 or end > 100:\n        print(\"Out of Range\")\n    elif (end - start + 1) != 10:\n        print(\"Difference Not in Range\")\n    else:\n        print(list(range(start, end + 1)))\n                                                                           \n\nT = int(input())\n\nfor _ in range(T):\n    # Input: start and end points for each test case\n    start, end = map(int, input().split())\n    print_numbers_in_range(start, end)", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Algorithms: Numbered Lists", 
    "full_name": "Pyla Lavanya", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 12, 
      "solution_id": 228089209, 
      "score": 5.0, 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "evaluation_ended": "2025-07-30T13:35:00Z", 
      "testcases_passed": 12, 
      "queue": "code-eval", 
      "testcases": {
        "2238787": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #4", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238787, 
          "memory_usage": "6MB"
        }, 
        "2238795": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #10", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238795, 
          "memory_usage": "7MB"
        }, 
        "2238796": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #11", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238796, 
          "memory_usage": "6MB"
        }, 
        "2238797": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #12", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238797, 
          "memory_usage": "116kB"
        }, 
        "2238790": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #7", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238790, 
          "memory_usage": "6MB"
        }, 
        "2238791": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #8", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238791, 
          "memory_usage": "6MB"
        }, 
        "2238792": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #9", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238792, 
          "memory_usage": "7MB"
        }, 
        "2238789": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #6", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238789, 
          "memory_usage": "7MB"
        }, 
        "2238788": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #5", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238788, 
          "memory_usage": "7MB"
        }, 
        "60957": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 0, 
          "expected_output": "Difference Not in Range\n[3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", 
          "cputime": "0s", 
          "name": "Testcase #2", 
          "is_sample": true, 
          "output": "", 
          "input": "2\n2 4\n3 12", 
          "running_time": "0.00s", 
          "id": 60957, 
          "memory_usage": "7MB"
        }, 
        "60952": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 0, 
          "expected_output": "Difference Not in Range\n[22, 23, 24, 25, 26, 27, 28, 29, 30, 31]\nOut of Range", 
          "cputime": "0s", 
          "name": "Testcase #1", 
          "is_sample": true, 
          "output": "", 
          "input": "3\n1 9\n22 31\n90 103", 
          "running_time": "0.00s", 
          "id": 60952, 
          "memory_usage": "7MB"
        }, 
        "60961": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #3", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 60961, 
          "memory_usage": "7MB"
        }
      }, 
      "assessment_id": 0, 
      "evaluation_started": "2025-07-30T13:34:56Z", 
      "sid": "SCR:2025-07-30:79eaaabb-b849-4ab9-9442-28d0f7a157cb", 
      "tid": "802e21605b0324b00801c58602c946fe", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "2200033139cseh@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Django: Student Management API", 
    "full_name": "Pyla Lavanya", 
    "run_details": {
      "status": "REJ", 
      "testcases_total": 6, 
      "solution_id": 228087363, 
      "testcases_failed": 6, 
      "total_score": 5.0, 
      "testcases_passed": 0, 
      "testcases": {
        "1": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_create_student>\n\n    def test_create_student(self):\n        student_data = {\n            \"first_name\": \"John\",\n            \"last_name\": \"Doe\",\n            \"date_of_birth\": \"2000-01-01\",\n            \"grade\": 8,\n            \"phone\": \"1234567890\",\n            \"email\": \"john.doe@example.com\"\n        }\n    \n        response = self.client.post('/students', json.dumps(student_data), content_type='application/json')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f1cce74d1f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.428", 
          "id": 1, 
          "name": "test_create_student"
        }, 
        "3": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_existing_student>\n\n    def test_get_existing_student(self):\n        student_id = Students.objects.first().id\n        response = self.client.get(f'/students/{student_id}')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:90: AssertionError", 
          "running_time": "0.005", 
          "id": 3, 
          "name": "test_get_existing_student"
        }, 
        "2": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_all_students>\n\n    def test_get_all_students(self):\n        response = self.client.get('/students')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:66: AssertionError", 
          "running_time": "0.006", 
          "id": 2, 
          "name": "test_get_all_students"
        }, 
        "5": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_update_existing_student>\n\n    def test_update_existing_student(self):\n        updated_data = {\n            \"first_name\": \"Alice_updated\",\n            \"last_name\": \"Smith_updated\",\n            \"date_of_birth\": \"1998-05-16\",\n            \"grade\": 11,\n            \"phone\": \"1234567899\",\n            \"email\": \"alice.updated@example.com\"\n        }\n        student_id = Students.objects.first().id\n        response = self.client.patch(f'/students/{student_id}', json.dumps(updated_data), content_type='application/json')\n    \n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:124: AssertionError", 
          "running_time": "0.006", 
          "id": 5, 
          "name": "test_update_existing_student"
        }, 
        "4": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_non_existent_student>\n\n    def test_get_non_existent_student(self):\n        non_existent_id = 9999\n        response = self.client.get(f'/students/{non_existent_id}')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:105: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f1cce74d1f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.006", 
          "id": 4, 
          "name": "test_get_non_existent_student"
        }, 
        "6": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_update_non_existent_student>\n\n    def test_update_non_existent_student(self):\n        updated_data = {\n            \"first_name\": \"Charlie\",\n            \"last_name\": \"Brown\",\n            \"date_of_birth\": \"2000-01-01\",\n            \"grade\": 12,\n            \"phone\": \"9999999999\",\n            \"email\": \"charlie.brown@example.com\"\n        }\n        non_existent_id = 9999\n        response = self.client.patch(f'/students/{non_existent_id}', json.dumps(updated_data), content_type='application/json')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:145: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f1cce74d1f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.006", 
          "id": 6, 
          "name": "test_update_non_existent_student"
        }
      }, 
      "score": 0.0
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "2200033139cseh@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Binary Classification: Loan Approval", 
    "full_name": "Konakala Visanth Keerthan Sai", 
    "run_details": {}, 
    "jupyter_data": {
      "Questions.ipynb": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/0rp9obpe/Questions.ipynb"
      }, 
      "output.csv": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/0rp9obpe/output.csv"
      }, 
      "jupyter_notebook_access_url": "https://servercreator.doselect.com/djp/user/44e96ff2dab2853976bdba247432216b/lab/tree/Binary Classification: Loan Approval/Questions.ipynb?token=767ff0dd29a949169ba06a1d06308f81&reset", 
      "recall": 0.855, 
      "problem_extra_data": {
        "negetive_class": "0", 
        "positive_class": "1", 
        "evaluation_type": "accuracy", 
        "choices": {
          "positive_classes": [
            "0", 
            "1"
          ], 
          "columns": [
            "ID", 
            "ApplicationDate", 
            "EmploymentStatus", 
            "EducationLevel", 
            "MaritalStatus", 
            "HomeOwnershipStatus", 
            "LoanPurpose", 
            "AnnualIncome", 
            "BaseInterestRate", 
            "LoanAmount", 
            "NetWorth", 
            "MonthlyLoanPayment", 
            "CreditScore", 
            "Age", 
            "Experience", 
            "LoanDuration", 
            "CreditCardUtilizationRate", 
            "NumberOfCreditInquiries", 
            "JobTenure", 
            "NumberOfOpenCreditLines", 
            "CheckingAccountBalance", 
            "DebtToIncomeRatio", 
            "BankruptcyHistory", 
            "LoanApproved"
          ]
        }, 
        "target_column": "LoanApproved", 
        "problem_type": "Binary Classification", 
        "id_column": "ID"
      }, 
      "precision": 0.704, 
      "is_ready": false, 
      "user": "44e96ff2dab2853976bdba247432216b", 
      "fscore": 0.772, 
      "accuracy": 0.897
    }, 
    "mcq_choice": null, 
    "email": "2200080236aids@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "import numpy as n\nimport pandas as p\nd = p.read_csv('/data/training/dataset.csv')\nr = ['VehicleID', 'IncidentAddress', 'Country', 'InsurancePolicyNumber', 'DateOfPolicyCoverage', 'DateOfIncident']\nd.drop(columns=r, inplace=True)\nv = ['?', '???', '-1', '-5', 'MISSINGVALUE', 'mode']\nd.replace(v, n.nan, inplace=True)\nd = d.loc[:, d.isnull().mean() <= 0.3]\nfor c in d.columns:\n    if d[c].dtype == 'object':\n        d[c].fillna(d[c].mode()[0], inplace=True)\n    else:\n        d[c].fillna(d[c].astype(float).mean(), inplace=True)\ni = {'Single Vehicle Collision': 1, 'Multi-vehicle Collision': 2, 'Parked Car': 3, 'Vehicle Theft': 4}\nif 'TypeOfIncident' in d.columns:\n    d['TypeOfIncident'] = d['TypeOfIncident'].map(i)\nx = {'Side Collision': 1, 'Rear Collision': 2, 'Front Collision': 3}\nif 'TypeOfCollission' in d.columns:\n    d['TypeOfCollission'] = d['TypeOfCollission'].map(x)\nd.to_csv('/code/output.csv', index=False)", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Data Prep Odyssey: Insurance Analytics", 
    "full_name": "Konakala Visanth Keerthan Sai", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 6, 
      "solution_id": 228091919, 
      "score": 15.0, 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "evaluation_ended": "2025-07-30T14:21:40Z", 
      "testcases_passed": 6, 
      "testcases": {
        "1820966": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "3s", 
          "name": "Testcase #4", 
          "is_sample": false, 
          "output": "", 
          "running_time": "3.35s", 
          "id": 1820966, 
          "memory_usage": "89MB"
        }, 
        "1820965": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #3", 
          "is_sample": false, 
          "output": "", 
          "running_time": "3.23s", 
          "id": 1820965, 
          "memory_usage": "89MB"
        }, 
        "1820970": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "3s", 
          "name": "Testcase #6", 
          "is_sample": false, 
          "output": "", 
          "running_time": "3.24s", 
          "id": 1820970, 
          "memory_usage": "90MB"
        }, 
        "1820969": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "3s", 
          "name": "Testcase #5", 
          "is_sample": false, 
          "output": "", 
          "running_time": "3.23s", 
          "id": 1820969, 
          "memory_usage": "91MB"
        }, 
        "1820918": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "3s", 
          "name": "Testcase #2", 
          "is_sample": false, 
          "output": "", 
          "running_time": "3.33s", 
          "id": 1820918, 
          "memory_usage": "91MB"
        }, 
        "1820349": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "3s", 
          "name": "Testcase #1", 
          "is_sample": false, 
          "output": "", 
          "running_time": "3.29s", 
          "id": 1820349, 
          "memory_usage": "86MB"
        }
      }, 
      "assessment_id": 0, 
      "evaluation_started": "2025-07-30T14:21:03Z", 
      "sid": "DSC:2025-07-30:460d5f2a-ce1a-4e40-a751-87f0666ca50d", 
      "tid": "c5e74a622e582aba1bf51170f8a3c65b", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "2200080236aids@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'count_word' function below.\n# \n# The function is expected to return an INTEGER ARRAY.\n# The function accepts STRING ARRAY ss as parameter.\n#\n\ndef count_word(ss):\n\tarr=[]\n\tfor i in ss:\n\t\tarr.append(len(i));\n\treturn arr\n\t\n\t\n\nif __name__ == '__main__':\n\tss_count = int(input().strip())\n\n\tss = []\n\n\tfor _ in range(ss_count):\n\t\tss_item = input()\n\t\tss.append(ss_item)\n\n\tresult = count_word(ss)\n\n\tprint('\\n'.join(map(str, result)))\n", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Word Length", 
    "full_name": "Konakala Visanth Keerthan Sai", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 6, 
      "solution_id": 228096560, 
      "sid": "SCR:2025-07-30:c31e309e-139f-4f4c-bd98-b4c81640bef3", 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "assessment_id": 0, 
      "testcases_passed": 6, 
      "queue": "code-eval", 
      "testcases": {
        "1935862": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "116kB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 1935862, 
          "name": "Testcase #6"
        }, 
        "33067": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "7MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33067, 
          "name": "Testcase #2"
        }, 
        "33066": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 0, 
          "expected_output": "3\n3\n5", 
          "memory_usage": "6MB", 
          "cputime": "0s", 
          "is_sample": true, 
          "input": "3\none\ntwo\nthree", 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33066, 
          "name": "Testcase #1"
        }, 
        "33068": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "7MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33068, 
          "name": "Testcase #3"
        }, 
        "1935750": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "7MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 1935750, 
          "name": "Testcase #4"
        }, 
        "1935803": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "6MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 1935803, 
          "name": "Testcase #5"
        }
      }, 
      "score": 5.0, 
      "evaluation_started": "2025-07-30T14:24:38Z", 
      "evaluation_ended": "2025-07-30T14:24:41Z", 
      "tid": "0c842c170e41ec4c91b85bd7fa982a4c", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "2200080236aids@gmail.com"
  }, 
  {
    "proctor_verdict": "Severe", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Binary Classification: Loan Approval", 
    "full_name": "Esha Joshi", 
    "run_details": {}, 
    "jupyter_data": {
      "Questions.ipynb": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/pg3qvayp/Questions.ipynb"
      }, 
      "problem_extra_data": {
        "negetive_class": "0", 
        "positive_class": "1", 
        "evaluation_type": "accuracy", 
        "choices": {
          "positive_classes": [
            "0", 
            "1"
          ], 
          "columns": [
            "ID", 
            "ApplicationDate", 
            "EmploymentStatus", 
            "EducationLevel", 
            "MaritalStatus", 
            "HomeOwnershipStatus", 
            "LoanPurpose", 
            "AnnualIncome", 
            "BaseInterestRate", 
            "LoanAmount", 
            "NetWorth", 
            "MonthlyLoanPayment", 
            "CreditScore", 
            "Age", 
            "Experience", 
            "LoanDuration", 
            "CreditCardUtilizationRate", 
            "NumberOfCreditInquiries", 
            "JobTenure", 
            "NumberOfOpenCreditLines", 
            "CheckingAccountBalance", 
            "DebtToIncomeRatio", 
            "BankruptcyHistory", 
            "LoanApproved"
          ]
        }, 
        "id_column": "ID", 
        "problem_type": "Binary Classification", 
        "target_column": "LoanApproved"
      }, 
      "jupyter_notebook_access_url": "https://servercreator.doselect.com/djp/user/c4e8b58f4d9aa1835b2ad86eaef38708/lab/tree/Binary Classification: Loan Approval/Questions.ipynb?token=77e08c52bb3341d7a78e050a26a40e24&reset", 
      "recall": 0.847, 
      "output.csv": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/pg3qvayp/output.csv"
      }, 
      "precision": 0.697, 
      "is_ready": false, 
      "user": "c4e8b58f4d9aa1835b2ad86eaef38708", 
      "fscore": 0.765, 
      "accuracy": 0.894
    }, 
    "mcq_choice": null, 
    "email": "eshaabhayjoshi.2007@gmail.com"
  }, 
  {
    "proctor_verdict": "Severe", 
    "code": "#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'findLongestWord' function below.\n# \n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n# 1. INTEGER n\n# 2. STRING ARRAY arr\n#\n\ndef findLongestWord(n, arr):\n\t# Write your code here\n\tmax_length = 0;\n\tfor word in arr:\n\t\tif(len(word) > max_length):\n\t\t\tmax_length = len(word)\n\treturn max_length\n\nif __name__ == '__main__':\n\tn = int(input().strip())\n\n\tarr = []\n\n\tfor _ in range(n):\n\t\tarr_item = input()\n\t\tarr.append(arr_item)\n\n\tresult = findLongestWord(n, arr)\n\n\tprint(str(result))\n", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Longest Word", 
    "full_name": "Esha Joshi", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 3, 
      "solution_id": 228092709, 
      "score": 5.0, 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "evaluation_ended": "2025-07-30T14:02:28Z", 
      "testcases_passed": 3, 
      "queue": "code-eval", 
      "testcases": {
        "33069": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 0, 
          "expected_output": "7", 
          "cputime": "0s", 
          "name": "Testcase #1", 
          "is_sample": true, 
          "output": "", 
          "input": "3\nwhich\nis\nlargest", 
          "running_time": "0.00s", 
          "id": 33069, 
          "memory_usage": "7MB"
        }, 
        "33070": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #2", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33070, 
          "memory_usage": "6MB"
        }, 
        "33071": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #3", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33071, 
          "memory_usage": "112kB"
        }
      }, 
      "assessment_id": 0, 
      "evaluation_started": "2025-07-30T14:02:26Z", 
      "sid": "SCR:2025-07-30:bc036372-511a-4257-aa19-472b89b9fc0a", 
      "tid": "eca9217916ddf125fd5bf02a5c27284f", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "eshaabhayjoshi.2007@gmail.com"
  }, 
  {
    "proctor_verdict": "Severe", 
    "code": "#importing libraries\nimport pandas as pd\nimport numpy as np\n\n#reading the dataset\ndata = pd.read_csv('/data/training/dataset.csv',encoding='utf-8')\ndata = data.applymap(lambda x: x.encode('ascii', 'ignore').decode('ascii') if isinstance(x, str) else x)\n\n# task 1: top 5 sports that have awarded the most medals\ntask1 = data.groupby('Sport')['Medal'].count().reset_index().sort_values(by = 'Medal' , ascending = False).head(5)\n\n# saving task1 output\ntask1.to_csv('/code/task1.csv', index=False)\n\n# task 2: top 5 athletes who have won the most gold medals.\n\ntask2 = data[data['Medal'] == 'Gold'].groupby('Athlete')['Medal'].count().reset_index().sort_values(by = 'Medal' , ascending = False).head(5)\n# saving task2 output\ntask2.to_csv('/code/task2.csv', index=False)\n\n# task 3: top 5 Olympic events that have attracted the largest number of athletes.\n\ntask3 = data.groupby('Event')['Athlete'].nunique().reset_index(name = 'Athlete').sort_values(by = 'Athlete' , ascending = False).head(5)\n# saving task3 output\ntask3.to_csv('/code/task3.csv', index=False)\n\n# task 4: top 5 sports with the most number of female gold medalists.\n\nfemale_gold = data[(data['Gender'] == 'Female') & (data['Medal'] == 'Gold')]\ntask4 = female_gold.groupby('Sport')['Athlete'].nunique().reset_index(name = 'Women').sort_values(by = 'Women', ascending = False).head(5)\n\n# saving task4 output\ntask4.to_csv('/code/task4.csv', index=False)\n", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Olympics Analysis", 
    "full_name": "Esha Joshi", 
    "run_details": {
      "status": "PAC", 
      "testcases_total": 4, 
      "solution_id": 228088096, 
      "score": 11.25, 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 1, 
      "evaluation_status": "completed", 
      "evaluation_ended": "2025-07-30T14:22:06Z", 
      "testcases_passed": 3, 
      "testcases": {
        "1498964": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #1", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.42s", 
          "id": 1498964, 
          "memory_usage": "88MB"
        }, 
        "1831468": {
          "status": "NC", 
          "description": "Testcase failed.", 
          "weight": 1, 
          "cputime": "1s", 
          "name": "Testcase #4", 
          "is_sample": false, 
          "output": "Task 4: The size of expected output and your output does not match!\nTraceback (most recent call last):\n  File \"/code/eval.py3\", line 11, in <module>\n    assert (False)\nAssertionError\n", 
          "running_time": "2.19s", 
          "id": 1831468, 
          "memory_usage": "88MB"
        }, 
        "1831466": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #2", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.28s", 
          "id": 1831466, 
          "memory_usage": "91MB"
        }, 
        "1831467": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #3", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.29s", 
          "id": 1831467, 
          "memory_usage": "89MB"
        }
      }, 
      "assessment_id": 0, 
      "evaluation_started": "2025-07-30T14:21:47Z", 
      "sid": "DSC:2025-07-30:f0ed2133-695d-47d0-a582-a116e00be2ac", 
      "tid": "87d715ffd549b4c833ef39d6ad290df2", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "eshaabhayjoshi.2007@gmail.com"
  }, 
  {
    "proctor_verdict": "Severe", 
    "code": "# importing libraries\nimport pandas as pd \nimport numpy as np \n\n# reading dataset\ndata = pd.read_csv('/data/training/dataset.csv')\n\n# dropping the mentioned columns\ncols_to_drop=['VehicleID','IncidentAddress','Country','InsurancePolicyNumber',  'DateOfPolicyCoverage','DateOfIncident']\n\ndata.drop(columns=cols_to_drop,inplace=True)\n\n# Replacing the mentioned values with null vales\n\nmissing_vals=['?','???','-1','-5','MISSINGVALUE','mode']\ndata.replace(missing_vals,np.nan,inplace=True)\n\n# Drop columns with null value more than 30%\nnull_thresh=0.3*len(data)\nfor col in data.columns:\n    if data[col].isnull().sum() > null_thresh:\n        mode_val=data[col].mode()[0]\n        data[col].fillna(mode_val,inplace=True)\n\n# Imputing missing values\nfor col in data.columns:\n    if data[col].dtype=='object':\n        data[col].fillna(data[col].mode()[0],inplace=True)\n    else:\n        data[col].fillna(data[col].mean(), inplace=True)\n\n# Replacing column 'TypeOfIncident' values\nincident_mapping={\n    'Single Vehicle Collision':1,\n    'Multi-vehicle Collision':2,\n    'Parked Car':3,\n    'Vehicle Theft':4\n}\ndata['TypeOfIncident'] = data['TypeOfIncident'].map(incident_mapping)\n\n# Replacing column 'TypeOfCollission' values\ncollison_mapping= {\n    'Side Collision':1,\n    'Rear Collision':2,\n    'Front Collision':3\n}\ndata['TypeOfCollission']=data['TypeOfCollission'].map(collison_mapping)\n\n# saving the output\nfinal_df=data[['CustomerID','TypeOfIncident','TypeOfCollission','SeverityOfIncident','VehicleModel','VehicleYOM','ReportedFraud']]\nfinal_df.to_csv('/code/output.csv', index=False)\n\n", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Data Prep Odyssey: Insurance Analytics", 
    "full_name": "Anuraj Anand", 
    "run_details": {
      "status": "PAC", 
      "testcases_total": 6, 
      "solution_id": 228089252, 
      "sid": "DSC:2025-07-30:77fd7067-8caf-4a9e-afe9-ddcb6edbb8c3", 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 1, 
      "evaluation_status": "completed", 
      "assessment_id": 0, 
      "testcases_passed": 5, 
      "testcases": {
        "1820966": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "90MB", 
          "cputime": "2s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.51s", 
          "id": 1820966, 
          "name": "Testcase #4"
        }, 
        "1820965": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "91MB", 
          "cputime": "2s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.54s", 
          "id": 1820965, 
          "name": "Testcase #3"
        }, 
        "1820970": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "88MB", 
          "cputime": "2s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.60s", 
          "id": 1820970, 
          "name": "Testcase #6"
        }, 
        "1820969": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "88MB", 
          "cputime": "2s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.63s", 
          "id": 1820969, 
          "name": "Testcase #5"
        }, 
        "1820349": {
          "status": "NC", 
          "description": "Testcase failed.", 
          "weight": 1, 
          "memory_usage": "89MB", 
          "cputime": "2s", 
          "is_sample": false, 
          "output": "The columns of expected output and your output does not match!\nTraceback (most recent call last):\n  File \"/code/eval.py3\", line 18, in <module>\n    assert (False)\nAssertionError\n", 
          "running_time": "2.51s", 
          "id": 1820349, 
          "name": "Testcase #1"
        }, 
        "1820918": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "90MB", 
          "cputime": "2s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.41s", 
          "id": 1820918, 
          "name": "Testcase #2"
        }
      }, 
      "score": 12.5, 
      "evaluation_started": "2025-07-30T14:37:40Z", 
      "evaluation_ended": "2025-07-30T14:38:12Z", 
      "tid": "d5bfd375f3145038c05f926ae529ec6a", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "anurajanand2002@gmail.com"
  }, 
  {
    "proctor_verdict": "Severe", 
    "code": "#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'findLongestWord' function below.\n# \n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n# 1. INTEGER n\n# 2. STRING ARRAY arr\n#\n\ndef findLongestWord(n, arr):\n\t# Write your code here\n\tmax_length=0\n\tfor word in arr:\n\t\tif len(word) > max_length:\n\t\t\tmax_length=len(word)\n\treturn max_length\n\t\n\t\n\nif __name__ == '__main__':\n\tn = int(input().strip())\n\n\tarr = []\n\n\tfor _ in range(n):\n\t\tarr_item = input()\n\t\tarr.append(arr_item)\n\n\tresult = findLongestWord(n, arr)\n\n\tprint(str(result))\n", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Longest Word", 
    "full_name": "Anuraj Anand", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 3, 
      "solution_id": 228088404, 
      "score": 5.0, 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "evaluation_ended": "2025-07-30T13:28:14Z", 
      "testcases_passed": 3, 
      "queue": "code-eval", 
      "testcases": {
        "33069": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 0, 
          "expected_output": "7", 
          "cputime": "0s", 
          "name": "Testcase #1", 
          "is_sample": true, 
          "output": "", 
          "input": "3\nwhich\nis\nlargest", 
          "running_time": "0.00s", 
          "id": 33069, 
          "memory_usage": "6MB"
        }, 
        "33070": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #2", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33070, 
          "memory_usage": "6MB"
        }, 
        "33071": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "cputime": "0s", 
          "name": "Testcase #3", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33071, 
          "memory_usage": "116kB"
        }
      }, 
      "assessment_id": 0, 
      "evaluation_started": "2025-07-30T13:28:12Z", 
      "sid": "SCR:2025-07-30:06df164a-b70e-4b17-96c5-b7615dd1316e", 
      "tid": "9f1becf1c19d34ecd408d9e398869aaf", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "anurajanand2002@gmail.com"
  }, 
  {
    "proctor_verdict": "Severe", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Predicting Cyber Attack Incidents", 
    "full_name": "Anuraj Anand", 
    "run_details": {}, 
    "jupyter_data": {
      "Questions.ipynb": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/a63da5xg/Questions.ipynb"
      }, 
      "output.csv": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/a63da5xg/output.csv"
      }, 
      "jupyter_notebook_access_url": "https://servercreator.doselect.com/djp/user/16e7c3094dbcf89820621c6dbb8ee628/lab/tree/Predicting Cyber Attack Incidents/Questions.ipynb?token=119a85b6e826494d8a660b8f0ae43832&reset", 
      "recall": 0.981, 
      "problem_extra_data": {
        "negetive_class": "0", 
        "positive_class": "1", 
        "evaluation_type": "accuracy", 
        "choices": {
          "positive_classes": [
            "0", 
            "1"
          ], 
          "columns": [
            "ID", 
            "INCIDENT_ID", 
            "DATE", 
            "X_1", 
            "X_2", 
            "X_3", 
            "X_4", 
            "X_5", 
            "X_6", 
            "X_7", 
            "X_8", 
            "X_9", 
            "X_10", 
            "X_11", 
            "X_12", 
            "X_13", 
            "X_14", 
            "X_15", 
            "MALICIOUS_OFFENSE"
          ]
        }, 
        "target_column": "MALICIOUS_OFFENSE", 
        "problem_type": "Binary Classification", 
        "id_column": "ID"
      }, 
      "precision": 0.998, 
      "is_ready": false, 
      "user": "16e7c3094dbcf89820621c6dbb8ee628", 
      "fscore": 0.989, 
      "accuracy": 0.98
    }, 
    "mcq_choice": null, 
    "email": "anurajanand2002@gmail.com"
  }, 
  {
    "proctor_verdict": "Severe", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Django: Student Management API", 
    "full_name": "Anuraj Anand", 
    "run_details": {
      "status": "REJ", 
      "testcases_total": 6, 
      "solution_id": 228087763, 
      "testcases_failed": 6, 
      "total_score": 5.0, 
      "testcases_passed": 0, 
      "testcases": {
        "1": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_create_student>\n\n    def test_create_student(self):\n        student_data = {\n            \"first_name\": \"John\",\n            \"last_name\": \"Doe\",\n            \"date_of_birth\": \"2000-01-01\",\n            \"grade\": 8,\n            \"phone\": \"1234567890\",\n            \"email\": \"john.doe@example.com\"\n        }\n    \n        response = self.client.post('/students', json.dumps(student_data), content_type='application/json')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f5ed16ef1f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.376", 
          "id": 1, 
          "name": "test_create_student"
        }, 
        "3": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_existing_student>\n\n    def test_get_existing_student(self):\n        student_id = Students.objects.first().id\n        response = self.client.get(f'/students/{student_id}')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:90: AssertionError", 
          "running_time": "0.005", 
          "id": 3, 
          "name": "test_get_existing_student"
        }, 
        "2": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_all_students>\n\n    def test_get_all_students(self):\n        response = self.client.get('/students')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:66: AssertionError", 
          "running_time": "0.005", 
          "id": 2, 
          "name": "test_get_all_students"
        }, 
        "5": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_update_existing_student>\n\n    def test_update_existing_student(self):\n        updated_data = {\n            \"first_name\": \"Alice_updated\",\n            \"last_name\": \"Smith_updated\",\n            \"date_of_birth\": \"1998-05-16\",\n            \"grade\": 11,\n            \"phone\": \"1234567899\",\n            \"email\": \"alice.updated@example.com\"\n        }\n        student_id = Students.objects.first().id\n        response = self.client.patch(f'/students/{student_id}', json.dumps(updated_data), content_type='application/json')\n    \n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:124: AssertionError", 
          "running_time": "0.005", 
          "id": 5, 
          "name": "test_update_existing_student"
        }, 
        "4": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_non_existent_student>\n\n    def test_get_non_existent_student(self):\n        non_existent_id = 9999\n        response = self.client.get(f'/students/{non_existent_id}')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:105: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f5ed16ef1f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.005", 
          "id": 4, 
          "name": "test_get_non_existent_student"
        }, 
        "6": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_update_non_existent_student>\n\n    def test_update_non_existent_student(self):\n        updated_data = {\n            \"first_name\": \"Charlie\",\n            \"last_name\": \"Brown\",\n            \"date_of_birth\": \"2000-01-01\",\n            \"grade\": 12,\n            \"phone\": \"9999999999\",\n            \"email\": \"charlie.brown@example.com\"\n        }\n        non_existent_id = 9999\n        response = self.client.patch(f'/students/{non_existent_id}', json.dumps(updated_data), content_type='application/json')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:145: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f5ed16ef1f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.006", 
          "id": 6, 
          "name": "test_update_non_existent_student"
        }
      }, 
      "score": 0.0
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "anurajanand2002@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Django: Student Management API", 
    "full_name": "Konakala Visanth Keerthan Sai", 
    "run_details": {
      "status": "REJ", 
      "testcases_total": 6, 
      "solution_id": 228088452, 
      "testcases_failed": 6, 
      "total_score": 5.0, 
      "testcases_passed": 0, 
      "testcases": {
        "1": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_update_existing_student", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_update_existing_student>\n\n    def test_update_existing_student(self):\n        updated_data = {\n            \"first_name\": \"Alice_updated\",\n            \"last_name\": \"Smith_updated\",\n            \"date_of_birth\": \"1998-05-16\",\n            \"grade\": 11,\n            \"phone\": \"1234567899\",\n            \"email\": \"alice.updated@example.com\"\n        }\n        student_id = Students.objects.first().id\n        response = self.client.patch(f'/students/{student_id}', json.dumps(updated_data), content_type='application/json')\n    \n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:124: AssertionError", 
          "id": 1, 
          "running_time": "0.005"
        }, 
        "3": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_get_all_students", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_all_students>\n\n    def test_get_all_students(self):\n        response = self.client.get('/students')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:66: AssertionError", 
          "id": 3, 
          "running_time": "0.004"
        }, 
        "2": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_get_existing_student", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_existing_student>\n\n    def test_get_existing_student(self):\n        student_id = Students.objects.first().id\n        response = self.client.get(f'/students/{student_id}')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:90: AssertionError", 
          "id": 2, 
          "running_time": "0.005"
        }, 
        "5": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_get_non_existent_student", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_non_existent_student>\n\n    def test_get_non_existent_student(self):\n        non_existent_id = 9999\n        response = self.client.get(f'/students/{non_existent_id}')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:105: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fd08ba2e220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 5, 
          "running_time": "0.004"
        }, 
        "4": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_update_non_existent_student", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_update_non_existent_student>\n\n    def test_update_non_existent_student(self):\n        updated_data = {\n            \"first_name\": \"Charlie\",\n            \"last_name\": \"Brown\",\n            \"date_of_birth\": \"2000-01-01\",\n            \"grade\": 12,\n            \"phone\": \"9999999999\",\n            \"email\": \"charlie.brown@example.com\"\n        }\n        non_existent_id = 9999\n        response = self.client.patch(f'/students/{non_existent_id}', json.dumps(updated_data), content_type='application/json')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:145: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fd08ba2e220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 4, 
          "running_time": "0.006"
        }, 
        "6": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_create_student", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_create_student>\n\n    def test_create_student(self):\n        student_data = {\n            \"first_name\": \"John\",\n            \"last_name\": \"Doe\",\n            \"date_of_birth\": \"2000-01-01\",\n            \"grade\": 8,\n            \"phone\": \"1234567890\",\n            \"email\": \"john.doe@example.com\"\n        }\n    \n        response = self.client.post('/students', json.dumps(student_data), content_type='application/json')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fd08ba2e220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 6, 
          "running_time": "0.376"
        }
      }, 
      "score": 0.0
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "2200080236aids@gmail.com"
  }, 
  {
    "proctor_verdict": "Severe", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Django: Student Management API", 
    "full_name": "Esha Joshi", 
    "run_details": {
      "status": "REJ", 
      "testcases_total": 6, 
      "solution_id": 228087357, 
      "testcases_failed": 6, 
      "total_score": 5.0, 
      "testcases_passed": 0, 
      "testcases": {
        "1": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_create_student>\n\n    def test_create_student(self):\n        student_data = {\n            \"first_name\": \"John\",\n            \"last_name\": \"Doe\",\n            \"date_of_birth\": \"2000-01-01\",\n            \"grade\": 8,\n            \"phone\": \"1234567890\",\n            \"email\": \"john.doe@example.com\"\n        }\n    \n        response = self.client.post('/students', json.dumps(student_data), content_type='application/json')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f64f63e51f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.393", 
          "id": 1, 
          "name": "test_create_student"
        }, 
        "3": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_existing_student>\n\n    def test_get_existing_student(self):\n        student_id = Students.objects.first().id\n        response = self.client.get(f'/students/{student_id}')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:90: AssertionError", 
          "running_time": "0.005", 
          "id": 3, 
          "name": "test_get_existing_student"
        }, 
        "2": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_all_students>\n\n    def test_get_all_students(self):\n        response = self.client.get('/students')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:66: AssertionError", 
          "running_time": "0.005", 
          "id": 2, 
          "name": "test_get_all_students"
        }, 
        "5": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_update_existing_student>\n\n    def test_update_existing_student(self):\n        updated_data = {\n            \"first_name\": \"Alice_updated\",\n            \"last_name\": \"Smith_updated\",\n            \"date_of_birth\": \"1998-05-16\",\n            \"grade\": 11,\n            \"phone\": \"1234567899\",\n            \"email\": \"alice.updated@example.com\"\n        }\n        student_id = Students.objects.first().id\n        response = self.client.patch(f'/students/{student_id}', json.dumps(updated_data), content_type='application/json')\n    \n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:124: AssertionError", 
          "running_time": "0.005", 
          "id": 5, 
          "name": "test_update_existing_student"
        }, 
        "4": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_non_existent_student>\n\n    def test_get_non_existent_student(self):\n        non_existent_id = 9999\n        response = self.client.get(f'/students/{non_existent_id}')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:105: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f64f63e51f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.005", 
          "id": 4, 
          "name": "test_get_non_existent_student"
        }, 
        "6": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_update_non_existent_student>\n\n    def test_update_non_existent_student(self):\n        updated_data = {\n            \"first_name\": \"Charlie\",\n            \"last_name\": \"Brown\",\n            \"date_of_birth\": \"2000-01-01\",\n            \"grade\": 12,\n            \"phone\": \"9999999999\",\n            \"email\": \"charlie.brown@example.com\"\n        }\n        non_existent_id = 9999\n        response = self.client.patch(f'/students/{non_existent_id}', json.dumps(updated_data), content_type='application/json')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:145: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f64f63e51f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.007", 
          "id": 6, 
          "name": "test_update_non_existent_student"
        }
      }, 
      "score": 0.0
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "eshaabhayjoshi.2007@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Binary Classification: Deposit Subscriptions", 
    "full_name": "RISHITHA GAMPA", 
    "run_details": {}, 
    "jupyter_data": {
      "Questions.ipynb": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/ew8lxvxy/Questions.ipynb"
      }, 
      "problem_extra_data": {
        "negetive_class": "no", 
        "positive_class": "yes", 
        "evaluation_type": "accuracy", 
        "choices": {
          "positive_classes": [
            "no", 
            "yes"
          ], 
          "columns": [
            "ID", 
            "age", 
            "job", 
            "marital", 
            "education", 
            "default", 
            "balance", 
            "housing", 
            "loan", 
            "contact", 
            "day", 
            "month", 
            "duration", 
            "campaign", 
            "pdays", 
            "previous", 
            "poutcome", 
            "y"
          ]
        }, 
        "target_column": "y", 
        "problem_type": "Binary Classification", 
        "id_column": "ID"
      }, 
      "jupyter_notebook_access_url": "https://servercreator.doselect.com/djp/user/7c6d02777689dda513d71f66de11358f/lab/tree/Binary Classification: Deposit Subscriptions/Questions.ipynb?token=86264dbd95d546918a95bde3be9641dd&reset", 
      "recall": 0.592, 
      "output.csv": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/ew8lxvxy/output.csv"
      }, 
      "precision": 0.201, 
      "is_ready": false, 
      "user": "7c6d02777689dda513d71f66de11358f", 
      "fscore": 0.3, 
      "accuracy": 0.89
    }, 
    "mcq_choice": null, 
    "email": "2200033117cseh@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Django: Student Management API", 
    "full_name": "RISHITHA GAMPA", 
    "run_details": {
      "status": "REJ", 
      "testcases_total": 6, 
      "solution_id": 228088263, 
      "testcases_failed": 6, 
      "total_score": 5.0, 
      "testcases_passed": 0, 
      "testcases": {
        "1": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_create_student>\n\n    def test_create_student(self):\n        student_data = {\n            \"first_name\": \"John\",\n            \"last_name\": \"Doe\",\n            \"date_of_birth\": \"2000-01-01\",\n            \"grade\": 8,\n            \"phone\": \"1234567890\",\n            \"email\": \"john.doe@example.com\"\n        }\n    \n        response = self.client.post('/students', json.dumps(student_data), content_type='application/json')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f13f01411f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.387", 
          "id": 1, 
          "name": "test_create_student"
        }, 
        "3": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_existing_student>\n\n    def test_get_existing_student(self):\n        student_id = Students.objects.first().id\n        response = self.client.get(f'/students/{student_id}')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:90: AssertionError", 
          "running_time": "0.005", 
          "id": 3, 
          "name": "test_get_existing_student"
        }, 
        "2": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_all_students>\n\n    def test_get_all_students(self):\n        response = self.client.get('/students')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:66: AssertionError", 
          "running_time": "0.005", 
          "id": 2, 
          "name": "test_get_all_students"
        }, 
        "5": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_update_existing_student>\n\n    def test_update_existing_student(self):\n        updated_data = {\n            \"first_name\": \"Alice_updated\",\n            \"last_name\": \"Smith_updated\",\n            \"date_of_birth\": \"1998-05-16\",\n            \"grade\": 11,\n            \"phone\": \"1234567899\",\n            \"email\": \"alice.updated@example.com\"\n        }\n        student_id = Students.objects.first().id\n        response = self.client.patch(f'/students/{student_id}', json.dumps(updated_data), content_type='application/json')\n    \n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:124: AssertionError", 
          "running_time": "0.005", 
          "id": 5, 
          "name": "test_update_existing_student"
        }, 
        "4": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_non_existent_student>\n\n    def test_get_non_existent_student(self):\n        non_existent_id = 9999\n        response = self.client.get(f'/students/{non_existent_id}')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:105: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f13f01411f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.004", 
          "id": 4, 
          "name": "test_get_non_existent_student"
        }, 
        "6": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_update_non_existent_student>\n\n    def test_update_non_existent_student(self):\n        updated_data = {\n            \"first_name\": \"Charlie\",\n            \"last_name\": \"Brown\",\n            \"date_of_birth\": \"2000-01-01\",\n            \"grade\": 12,\n            \"phone\": \"9999999999\",\n            \"email\": \"charlie.brown@example.com\"\n        }\n        non_existent_id = 9999\n        response = self.client.patch(f'/students/{non_existent_id}', json.dumps(updated_data), content_type='application/json')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:145: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f13f01411f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.006", 
          "id": 6, 
          "name": "test_update_non_existent_student"
        }
      }, 
      "score": 0.0
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "2200033117cseh@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "# importing libraries\nimport pandas as pd \nimport numpy as np \n\n# reading dataset\ndata = pd.read_csv('/data/training/dataset.csv')\n\n# dropping the mentioned columns\ncols_to_drop =[\n    'VehicleID','IncidentAddress', 'Country','InsurancePolicyNumber','DateOfPolicyCoverage' , 'DateOfIncident'\n]\ndata.drop(columns=cols_to_drop,inplace=True,errors='ignore')\n\n\n# Replacing the mentioned values with null vales\nmissing_values=['?','???','-1','-5','MISSINGVALUE','mode']\ndata.replace(missing_values,np.nan,inplace=True)\n\n# Drop columns with null value more than 30%\nthreshold=len(data)*0.3\ndata.dropna(axis=1,thresh=len(data)-threshold,inplace=True)\n\n\n# Imputing missing values\nfor col in data.columns:\n    if data[col].dtype == 'object':\n        if data[col].isnull().any():\n            mode_val = data[col].mode()[0]\n            data[col].fillna(mode_val,inplace=True)\n    else:\n        if data[col].isnull().any():\n            mean_val=data[col].astype(float).mean()\n            data[col].fillna(mean_val,inplace=True)\n\n\n# Replacing column 'TypeOfIncident' values\nincident_mapping={\n    'Single Vehicle Collision':1,\n    'Multi-vehicle Collision':2,\n    'Parked Car':3,\n    'Vehicle Theft': 4\n}\ndata['TypeOfIncident'] = data['TypeOfIncident'].map(incident_mapping)\n\n# Replacing column 'TypeOfCollission' values\ncollision_mapping={\n    'Side Collision': 1,\n    'Rear Collision': 2,\n    'Front Collision': 3\n}\ndata['TypeOfCollission'] = data['TypeOfCollission'].map(collision_mapping)\n\n# saving the output\ndata.to_csv('/code/output.csv',index=False)\n# final_df.to_csv('/code/output.csv', index=False)", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Data Prep Odyssey: Insurance Analytics", 
    "full_name": "RISHITHA GAMPA", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 6, 
      "solution_id": 228088665, 
      "score": 15.0, 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "evaluation_ended": "2025-07-30T14:28:44Z", 
      "testcases_passed": 6, 
      "testcases": {
        "1820966": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #4", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.91s", 
          "id": 1820966, 
          "memory_usage": "87MB"
        }, 
        "1820965": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #3", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.89s", 
          "id": 1820965, 
          "memory_usage": "89MB"
        }, 
        "1820970": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #6", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.91s", 
          "id": 1820970, 
          "memory_usage": "84MB"
        }, 
        "1820969": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #5", 
          "is_sample": false, 
          "output": "", 
          "running_time": "3.03s", 
          "id": 1820969, 
          "memory_usage": "90MB"
        }, 
        "1820918": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #2", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.89s", 
          "id": 1820918, 
          "memory_usage": "90MB"
        }, 
        "1820349": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #1", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.90s", 
          "id": 1820349, 
          "memory_usage": "90MB"
        }
      }, 
      "assessment_id": 0, 
      "evaluation_started": "2025-07-30T14:28:10Z", 
      "sid": "DSC:2025-07-30:f101c6e3-9ac4-46c4-b3cb-76dc61075972", 
      "tid": "31da8816b4a6f079ea8cd482e85975d8", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "2200033117cseh@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "import math\nimport os\nimport random\nimport re\nimport sys\n#\n# Complete the 'findLongestWord' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n# 1. INTEGER n\n# 2. STRING ARRAY arr\n#\n\ndef findLongestWord(n, arr):\n    # Write your code here\n    max_len=0\n    for word in arr:\n        if len(word) > max_len:\n            max_len = len(word) \n    return max_len\n\n\n\n\nif __name__ == '__main__':\n    n = int(raw_input().strip())\n    arr = []\n    for _ in range(n):\n        arr_item = raw_input()\n        arr.append(arr_item)\n    result = findLongestWord(n, arr)\n    print str(result)", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Longest Word", 
    "full_name": "RISHITHA GAMPA", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 3, 
      "solution_id": 228087417, 
      "sid": "SCR:2025-07-30:e8e4f127-0a2a-45d1-8826-f5bc535ff2d6", 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "assessment_id": 0, 
      "testcases_passed": 3, 
      "queue": "code-eval", 
      "testcases": {
        "33069": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 0, 
          "expected_output": "7", 
          "memory_usage": "5MB", 
          "cputime": "0s", 
          "is_sample": true, 
          "input": "3\nwhich\nis\nlargest", 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33069, 
          "name": "Testcase #1"
        }, 
        "33070": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "7MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33070, 
          "name": "Testcase #2"
        }, 
        "33071": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "5MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 33071, 
          "name": "Testcase #3"
        }
      }, 
      "score": 5.0, 
      "evaluation_started": "2025-07-30T14:17:31Z", 
      "evaluation_ended": "2025-07-30T14:17:33Z", 
      "tid": "", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "2200033117cseh@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Binary Classification: Deposit Subscriptions", 
    "full_name": "Pyla Lavanya", 
    "run_details": {}, 
    "jupyter_data": {
      "Questions.ipynb": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/d8x6l589/Questions.ipynb"
      }, 
      "problem_extra_data": {
        "negetive_class": "no", 
        "positive_class": "yes", 
        "evaluation_type": "accuracy", 
        "choices": {
          "positive_classes": [
            "no", 
            "yes"
          ], 
          "columns": [
            "ID", 
            "age", 
            "job", 
            "marital", 
            "education", 
            "default", 
            "balance", 
            "housing", 
            "loan", 
            "contact", 
            "day", 
            "month", 
            "duration", 
            "campaign", 
            "pdays", 
            "previous", 
            "poutcome", 
            "y"
          ]
        }, 
        "id_column": "ID", 
        "problem_type": "Binary Classification", 
        "target_column": "y"
      }, 
      "jupyter_notebook_access_url": "https://servercreator.doselect.com/djp/user/a0e6d0c239d7f43374b4577a8541d7da/lab/tree/Binary Classification: Deposit Subscriptions/Questions.ipynb?token=4fa74ccd93c342cfa00003af5933ff4a&reset", 
      "recall": 0.657, 
      "output.csv": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/d8x6l589/output.csv"
      }, 
      "precision": 0.413, 
      "is_ready": false, 
      "user": "a0e6d0c239d7f43374b4577a8541d7da", 
      "fscore": 0.507, 
      "accuracy": 0.906
    }, 
    "mcq_choice": null, 
    "email": "2200033139cseh@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "#importing libraries\nimport pandas as pd\nimport numpy as np\n\n#reading the dataset\ndata = pd.read_csv('/data/training/dataset.csv',encoding='utf-8')\ndata = data.applymap(lambda x: x.encode('ascii', 'ignore').decode('ascii') if isinstance(x, str) else x)\n\n# task 1: top 5 sports that have awarded the most medals\ntask1_output = data.groupby('Sport')['Medal'].count().nlargest(5).reset_index()\ntask1_output.columns = ['Sport', 'Medal']\n# saving task1 output\ntask1_output.to_csv('/code/task1.csv', index=False)\n\n# task 2: top 5 athletes who have won the most gold medals.\ngold_medals = data[data['Medal'] == 'Gold']\ntask2_output = gold_medals.groupby('Athlete')['Medal'].count().nlargest(5).reset_index()\ntask2_output.columns = ['Athlete', 'Medal']\n# saving task2 output\ntask2_output.to_csv('/code/task2.csv', index=False)\n\n# task 3: top 5 Olympic events that have attracted the largest number of athletes.\ntask3_output = data.groupby('Event')['Athlete'].nunique().nlargest(5).reset_index()\ntask3_output.columns = ['Event', 'Athlete']\n#saving task3 output\ntask3_output.to_csv('/code/task3.csv', index=False)\n\n# task 4: top 5 sports with the most number of female gold medalists.\nfemale_gold_medalists = data[(data['Gender'] == 'Women') & (data['Medal'] == 'Gold')]\ntask4_output = female_gold_medalists.groupby('Sport')['Athlete'].nunique().nlargest(5).reset_index()\ntask4_output.columns = ['Sport', 'Women']\n\n\n# saving task4 output\ntask4_output.to_csv('/code/task4.csv', index=False)\n", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Olympics Analysis", 
    "full_name": "Pyla Lavanya", 
    "run_details": {
      "status": "PAC", 
      "testcases_total": 4, 
      "solution_id": 228087726, 
      "score": 11.25, 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 1, 
      "evaluation_status": "completed", 
      "evaluation_ended": "2025-07-30T14:43:44Z", 
      "testcases_passed": 3, 
      "testcases": {
        "1498964": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "1s", 
          "name": "Testcase #1", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.07s", 
          "id": 1498964, 
          "memory_usage": "88MB"
        }, 
        "1831468": {
          "status": "NC", 
          "description": "Testcase failed.", 
          "weight": 1, 
          "cputime": "1s", 
          "name": "Testcase #4", 
          "is_sample": false, 
          "output": "Traceback (most recent call last):\n  File \"/code/eval.py3\", line 28, in <module>\n    assert (expected_output.equals(output))\nAssertionError\n", 
          "running_time": "2.07s", 
          "id": 1831468, 
          "memory_usage": "88MB"
        }, 
        "1831466": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "1s", 
          "name": "Testcase #2", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.08s", 
          "id": 1831466, 
          "memory_usage": "88MB"
        }, 
        "1831467": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "1s", 
          "name": "Testcase #3", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.05s", 
          "id": 1831467, 
          "memory_usage": "89MB"
        }
      }, 
      "assessment_id": 0, 
      "evaluation_started": "2025-07-30T14:43:27Z", 
      "sid": "DSC:2025-07-30:ccd7ae4d-1b42-4630-9db9-410e7660a9c8", 
      "tid": "4c787a53e687fb125c783b87ae1bdaa1", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "2200033139cseh@gmail.com"
  }, 
  {
    "proctor_verdict": "Severe", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Binary Classification: Loan Approval", 
    "full_name": "Mahathee", 
    "run_details": {}, 
    "jupyter_data": {
      "Questions.ipynb": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/rd6g898v/Questions.ipynb"
      }, 
      "problem_extra_data": {
        "negetive_class": "0", 
        "positive_class": "1", 
        "evaluation_type": "accuracy", 
        "choices": {
          "positive_classes": [
            "0", 
            "1"
          ], 
          "columns": [
            "ID", 
            "ApplicationDate", 
            "EmploymentStatus", 
            "EducationLevel", 
            "MaritalStatus", 
            "HomeOwnershipStatus", 
            "LoanPurpose", 
            "AnnualIncome", 
            "BaseInterestRate", 
            "LoanAmount", 
            "NetWorth", 
            "MonthlyLoanPayment", 
            "CreditScore", 
            "Age", 
            "Experience", 
            "LoanDuration", 
            "CreditCardUtilizationRate", 
            "NumberOfCreditInquiries", 
            "JobTenure", 
            "NumberOfOpenCreditLines", 
            "CheckingAccountBalance", 
            "DebtToIncomeRatio", 
            "BankruptcyHistory", 
            "LoanApproved"
          ]
        }, 
        "id_column": "ID", 
        "problem_type": "Binary Classification", 
        "target_column": "LoanApproved"
      }, 
      "jupyter_notebook_access_url": "https://servercreator.doselect.com/djp/user/d3bd8d8c1be4f59ceb7af2b37db2364a/lab/tree/Binary Classification: Loan Approval/Questions.ipynb?token=0b9331410d2e4f78aae909882c868dde&reset", 
      "recall": 0.862, 
      "output.csv": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/rd6g898v/output.csv"
      }, 
      "precision": 0.658, 
      "is_ready": true, 
      "user": "d3bd8d8c1be4f59ceb7af2b37db2364a", 
      "fscore": 0.746, 
      "accuracy": 0.89
    }, 
    "mcq_choice": null, 
    "email": "mahatheep.penugonda@gmail.com"
  }, 
  {
    "proctor_verdict": "Severe", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Django: Student Management API", 
    "full_name": "Mahathee", 
    "run_details": {
      "status": "REJ", 
      "testcases_total": 6, 
      "solution_id": 228065003, 
      "testcases_failed": 6, 
      "total_score": 5.0, 
      "testcases_passed": 0, 
      "testcases": {
        "1": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_update_existing_student", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_update_existing_student>\n\n    def test_update_existing_student(self):\n        updated_data = {\n            \"first_name\": \"Alice_updated\",\n            \"last_name\": \"Smith_updated\",\n            \"date_of_birth\": \"1998-05-16\",\n            \"grade\": 11,\n            \"phone\": \"1234567899\",\n            \"email\": \"alice.updated@example.com\"\n        }\n        student_id = Students.objects.first().id\n        response = self.client.patch(f'/students/{student_id}', json.dumps(updated_data), content_type='application/json')\n    \n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:124: AssertionError", 
          "id": 1, 
          "running_time": "0.005"
        }, 
        "3": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_get_all_students", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_all_students>\n\n    def test_get_all_students(self):\n        response = self.client.get('/students')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:66: AssertionError", 
          "id": 3, 
          "running_time": "0.004"
        }, 
        "2": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_get_existing_student", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_existing_student>\n\n    def test_get_existing_student(self):\n        student_id = Students.objects.first().id\n        response = self.client.get(f'/students/{student_id}')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\nstudents/tests.py:90: AssertionError", 
          "id": 2, 
          "running_time": "0.005"
        }, 
        "5": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_get_non_existent_student", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_get_non_existent_student>\n\n    def test_get_non_existent_student(self):\n        non_existent_id = 9999\n        response = self.client.get(f'/students/{non_existent_id}')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:105: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fd08ba2e220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 5, 
          "running_time": "0.004"
        }, 
        "4": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_update_non_existent_student", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_update_non_existent_student>\n\n    def test_update_non_existent_student(self):\n        updated_data = {\n            \"first_name\": \"Charlie\",\n            \"last_name\": \"Brown\",\n            \"date_of_birth\": \"2000-01-01\",\n            \"grade\": 12,\n            \"phone\": \"9999999999\",\n            \"email\": \"charlie.brown@example.com\"\n        }\n        non_existent_id = 9999\n        response = self.client.patch(f'/students/{non_existent_id}', json.dumps(updated_data), content_type='application/json')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:145: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fd08ba2e220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 4, 
          "running_time": "0.006"
        }, 
        "6": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.83, 
          "name": "test_create_student", 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <students.tests.TestStudentAPI testMethod=test_create_student>\n\n    def test_create_student(self):\n        student_data = {\n            \"first_name\": \"John\",\n            \"last_name\": \"Doe\",\n            \"date_of_birth\": \"2000-01-01\",\n            \"grade\": 8,\n            \"phone\": \"1234567890\",\n            \"email\": \"john.doe@example.com\"\n        }\n    \n        response = self.client.post('/students', json.dumps(student_data), content_type='application/json')\n>       response_data = json.loads(response.content)\n\nstudents/tests.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fd08ba2e220>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "id": 6, 
          "running_time": "0.376"
        }
      }, 
      "score": 0.0
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "mahatheep.penugonda@gmail.com"
  }, 
  {
    "proctor_verdict": "Severe", 
    "code": "#importing libraries\nimport pandas as pd\nimport numpy as np\n\n#reading the dataset\ndata = pd.read_csv('/data/training/dataset.csv',encoding='utf-8')\ndata = data.applymap(lambda x: x.encode('ascii', 'ignore').decode('ascii') if isinstance(x, str) else x)\n\n# task 1: top 5 sports that have awarded the most medals\ntask1_output = data['Sport'].value_counts().reset_index()\ntask1_output.columns = ['Sport','Medal']\ntask1_output = task1_output.head(5)\n\n# saving task1 output\ntask1_output.to_csv('/code/task1.csv', index=False)\n\n# task 2: top 5 athletes who have won the most gold medals.\ngold_medals_df = data[data['Medal'].str.lower()=='gold']\ntask2_output = gold_medals_df['Athlete'].value_counts().reset_index()\ntask2_output.columns = ['Athlete','Medal']\ntask2_output=task2_output.head(5)\n\n# saving task2 output\ntask2_output.to_csv('/code/task2.csv', index=False)\n\n# task 3: top 5 Olympic events that have attracted the largest number of athletes.\ntask3_output = data.groupby('Event')['Athlete'].nunique().reset_index()\ntask3_output.columns=['Event','Athlete']\ntask3_output=task3_output.sort_values(by='Athlete',ascending=False)\ntask3_output=task3_output.head(5)\n# saving task3 output\ntask3_output.to_csv('/code/task3.csv', index=False)\n\n# task 4: top 5 sports with the most number of female gold medalists.\nfemale_gold_medals_df = data[(data['Gender'].str.lower() == 'women') & (data['Medal'].str.lower() == 'gold')]\ntask4_output = female_gold_medals_df.groupby('Sport')['Medal'].count().reset_index()\ntask4_output.columns=['Sport','Women']\ntask4_output= task4_output.sort_values(by='Women',ascending=False)\ntask4_output=task4_output.head(5)\n\n# saving task4 output\ntask4_output.to_csv('/code/task4.csv', index=False)\n", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Olympics Analysis", 
    "full_name": "Mahathee", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 4, 
      "solution_id": 228077426, 
      "sid": "DSC:2025-07-30:b6fb522e-206c-4743-adfd-0c8ad5ba41b8", 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "assessment_id": 0, 
      "testcases_passed": 4, 
      "testcases": {
        "1498964": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "88MB", 
          "cputime": "2s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.39s", 
          "id": 1498964, 
          "name": "Testcase #1"
        }, 
        "1831468": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "90MB", 
          "cputime": "2s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.64s", 
          "id": 1831468, 
          "name": "Testcase #4"
        }, 
        "1831466": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "89MB", 
          "cputime": "2s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.61s", 
          "id": 1831466, 
          "name": "Testcase #2"
        }, 
        "1831467": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "memory_usage": "89MB", 
          "cputime": "3s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "12.18s", 
          "id": 1831467, 
          "name": "Testcase #3"
        }
      }, 
      "score": 15.0, 
      "evaluation_started": "2025-07-30T12:05:51Z", 
      "evaluation_ended": "2025-07-30T12:06:25Z", 
      "tid": "", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "mahatheep.penugonda@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "def print_numbers_in_range(start, end):\n    # Write your code here\n    if start < 1 or end>100:\n        print(\"Out of Range\")\n    elif(end - start+1) != 10:\n        print(\"Difference Not in Range\")\n    else:\n        print(list(range(start, end +1)))\n\nT = int(input())\n\nfor _ in range(T):\n    # Input: start and end points for each test case\n    start, end = map(int, input().split())\n    print_numbers_in_range(start, end)", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Algorithms: Numbered Lists", 
    "full_name": "Akshat Saihgal", 
    "run_details": {
      "status": "ACC", 
      "testcases_total": 12, 
      "solution_id": 228079612, 
      "sid": "SCR:2025-07-30:7aece85d-c95a-42b1-9bc9-83c4e43618e3", 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 0, 
      "evaluation_status": "completed", 
      "assessment_id": 0, 
      "testcases_passed": 12, 
      "queue": "code-eval", 
      "testcases": {
        "2238787": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "6MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238787, 
          "name": "Testcase #4"
        }, 
        "2238795": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "7MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238795, 
          "name": "Testcase #10"
        }, 
        "2238796": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "7MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238796, 
          "name": "Testcase #11"
        }, 
        "2238797": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "8MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "2.00s", 
          "id": 2238797, 
          "name": "Testcase #12"
        }, 
        "2238790": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "7MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238790, 
          "name": "Testcase #7"
        }, 
        "2238791": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "7MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238791, 
          "name": "Testcase #8"
        }, 
        "2238792": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "7MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238792, 
          "name": "Testcase #9"
        }, 
        "60961": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "7MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 60961, 
          "name": "Testcase #3"
        }, 
        "2238789": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "7MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238789, 
          "name": "Testcase #6"
        }, 
        "2238788": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 1, 
          "memory_usage": "7MB", 
          "cputime": "0s", 
          "is_sample": false, 
          "output": "", 
          "running_time": "0.00s", 
          "id": 2238788, 
          "name": "Testcase #5"
        }, 
        "60957": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 0, 
          "expected_output": "Difference Not in Range\n[3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", 
          "memory_usage": "6MB", 
          "cputime": "0s", 
          "is_sample": true, 
          "input": "2\n2 4\n3 12", 
          "output": "", 
          "running_time": "0.00s", 
          "id": 60957, 
          "name": "Testcase #2"
        }, 
        "60952": {
          "status": "AC/OK", 
          "description": "Testcase passed! The solution's output matches the expected output.", 
          "weight": 0, 
          "expected_output": "Difference Not in Range\n[22, 23, 24, 25, 26, 27, 28, 29, 30, 31]\nOut of Range", 
          "memory_usage": "7MB", 
          "cputime": "0s", 
          "is_sample": true, 
          "input": "3\n1 9\n22 31\n90 103", 
          "output": "", 
          "running_time": "0.00s", 
          "id": 60952, 
          "name": "Testcase #1"
        }
      }, 
      "score": 5.0, 
      "evaluation_started": "2025-07-30T11:58:21Z", 
      "evaluation_ended": "2025-07-30T11:58:32Z", 
      "tid": "7b9cae8b2bbf2a10c640056fb9ea79b6", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "saihgalakshat@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Predicting Cyber Attack Incidents", 
    "full_name": "Akshat Saihgal", 
    "run_details": {}, 
    "jupyter_data": {
      "Questions.ipynb": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/314rnyev/Questions.ipynb"
      }, 
      "output.csv": {
        "access_url": "https://media-doselect.s3.amazonaws.com/djp/314rnyev/output.csv"
      }, 
      "jupyter_notebook_access_url": "https://servercreator.doselect.com/djp/user/69a8e0a87ef9cf930438d2daffaf310e/lab/tree/Predicting Cyber Attack Incidents/Questions.ipynb?token=4d9aacb2de964ee9aa4df3c1ecf95788&reset", 
      "recall": 0.983, 
      "problem_extra_data": {
        "negetive_class": "0", 
        "positive_class": "1", 
        "evaluation_type": "accuracy", 
        "choices": {
          "positive_classes": [
            "0", 
            "1"
          ], 
          "columns": [
            "ID", 
            "INCIDENT_ID", 
            "DATE", 
            "X_1", 
            "X_2", 
            "X_3", 
            "X_4", 
            "X_5", 
            "X_6", 
            "X_7", 
            "X_8", 
            "X_9", 
            "X_10", 
            "X_11", 
            "X_12", 
            "X_13", 
            "X_14", 
            "X_15", 
            "MALICIOUS_OFFENSE"
          ]
        }, 
        "target_column": "MALICIOUS_OFFENSE", 
        "problem_type": "Binary Classification", 
        "id_column": "ID"
      }, 
      "precision": 0.997, 
      "is_ready": false, 
      "user": "69a8e0a87ef9cf930438d2daffaf310e", 
      "fscore": 0.99, 
      "accuracy": 0.981
    }, 
    "mcq_choice": null, 
    "email": "saihgalakshat@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "#importing libraries\nimport pandas as pd\nimport numpy as np\n\n#reading the dataset\ndata = pd.read_csv('/data/training/dataset.csv',encoding='utf-8')\ndata = data.applymap(lambda x: x.encode('ascii', 'ignore').decode('ascii') if isinstance(x, str) else x)\n\n# task 1: top 5 sports that have awarded the most medals\ntask1 = data[data['Medal'].notnull()]\ntask1 = task1.groupby('Sport').size().reset_index(name='Medal')\ntask1 = task1.sort_values(by='Medal',ascending=False).head(5)\n\n# saving task1 output\ntask1.to_csv('/code/task1.csv', index=False)\n\n# task 2: top 5 athletes who have won the most gold medals.\ntask2 = data[data['Medal'] == 'Gold']\ntask2 = task2.groupby('Athlete').size().reset_index(name='Medal')\ntask2 = task2.sort_values(by='Medal',ascending=False).head(5)\n\n\n# saving task2 output\ntask2.to_csv('/code/task2.csv', index=False)\n\n# task 3: top 5 Olympic events that have attracted the largest number of athletes.\ntask3 = data[['Event','Athlete']].drop_duplicates()\ntask3 = task3.groupby('Event').size().reset_index(name='Athlete')\ntask3 = task3.sort_values(by='Athlete',ascending=False).head(5)\n\n\n# saving task3 output\ntask3.to_csv('/code/task3.csv', index=False)\n\n# task 4: top 5 sports with the most number of female gold medalists.\ntask4 = data[(data['Gender']=='Women') & (data['Medal']=='Gold')]\ntask4 = data[['Sport','Athlete']].drop_duplicates()\ntask4 = task4.groupby('Sport').size().reset_index(name='Women')\ntask4 = task4.sort_values(by='Women',ascending=False).head(5)\n\n\n# saving task4 output\ntask4.to_csv('/code/task4.csv', index=False)\n", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Olympics Analysis", 
    "full_name": "Akshat Saihgal", 
    "run_details": {
      "status": "PAC", 
      "testcases_total": 4, 
      "solution_id": 228073088, 
      "score": 11.25, 
      "sockmeta": {
        "sockid": "", 
        "wid": "", 
        "connid": ""
      }, 
      "testcases_failed": 1, 
      "evaluation_status": "completed", 
      "evaluation_ended": "2025-07-30T11:34:27Z", 
      "testcases_passed": 3, 
      "testcases": {
        "1498964": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #1", 
          "is_sample": false, 
          "output": "", 
          "running_time": "3.13s", 
          "id": 1498964, 
          "memory_usage": "89MB"
        }, 
        "1831468": {
          "status": "NC", 
          "description": "Testcase failed.", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #4", 
          "is_sample": false, 
          "output": "Traceback (most recent call last):\n  File \"/code/eval.py3\", line 28, in <module>\n    assert (expected_output.equals(output))\nAssertionError\n", 
          "running_time": "3.08s", 
          "id": 1831468, 
          "memory_usage": "89MB"
        }, 
        "1831466": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #2", 
          "is_sample": false, 
          "output": "", 
          "running_time": "3.56s", 
          "id": 1831466, 
          "memory_usage": "88MB"
        }, 
        "1831467": {
          "status": "AC/OK", 
          "description": "Testcase passed!", 
          "weight": 1, 
          "cputime": "2s", 
          "name": "Testcase #3", 
          "is_sample": false, 
          "output": "", 
          "running_time": "3.22s", 
          "id": 1831467, 
          "memory_usage": "87MB"
        }
      }, 
      "assessment_id": 0, 
      "evaluation_started": "2025-07-30T11:34:01Z", 
      "sid": "DSC:2025-07-30:d0edc901-cc0f-4590-ae80-08ede3a38f51", 
      "tid": "b9c64cc614d18fd5db992cb86b6ea19f", 
      "assessment_type": "", 
      "running_time": ""
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "saihgalakshat@gmail.com"
  }, 
  {
    "proctor_verdict": "Negligible", 
    "code": "", 
    "plagiarism": {
      "threshold": 0.9, 
      "match_merging": false, 
      "enabled": true, 
      "model": "jplag", 
      "threshold_pb": 0.65
    }, 
    "problem_name": "Django: Contact Manager Application", 
    "full_name": "Akshat Saihgal", 
    "run_details": {
      "status": "REJ", 
      "testcases_total": 7, 
      "solution_id": 228072221, 
      "testcases_failed": 7, 
      "total_score": 5.0, 
      "testcases_passed": 0, 
      "testcases": {
        "1": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestUserModel testMethod=test_user_creation>\n\n    def test_user_creation(self):\n        response = self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n>       self.assertEqual(response.status_code, 201)\nE       AssertionError: 404 != 201\n\ncontact/tests.py:65: AssertionError", 
          "running_time": "0.383", 
          "id": 1, 
          "name": "test_user_creation"
        }, 
        "3": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_delete_contact>\n\n    def test_delete_contact(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n        contact_id = 1\n        response = self.client.delete(f'/contacts/{contact_id}/')\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:150: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f5d0f9d91f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.008", 
          "id": 3, 
          "name": "test_delete_contact"
        }, 
        "2": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_create_contact>\n\n    def test_create_contact(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        response = self.client.post('/contacts/', json.dumps(contact_by_alexia), content_type='application/json')\n>       self.assertEqual(response.status_code, 201)\nE       AssertionError: 404 != 201\n\ncontact/tests.py:77: AssertionError", 
          "running_time": "0.005", 
          "id": 2, 
          "name": "test_create_contact"
        }, 
        "5": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_get_all_contacts>\n\n    def test_get_all_contacts(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        self.client.post('/users/', json.dumps(user_thalia), content_type='application/json')\n    \n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n    \n        response = self.client.get('/contacts/')\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 404 != 200\n\ncontact/tests.py:90: AssertionError", 
          "running_time": "0.009", 
          "id": 5, 
          "name": "test_get_all_contacts"
        }, 
        "4": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_delete_with_invalid_id>\n\n    def test_delete_with_invalid_id(self):\n        contact_id = 10\n        response = self.client.delete(f'/contacts/{contact_id}/')\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:157: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f5d0f9d91f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.004", 
          "id": 4, 
          "name": "test_delete_with_invalid_id"
        }, 
        "7": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_patch_with_invalid_id>\n\n    def test_patch_with_invalid_id(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        for contact in all_contacts:\n            self.client.post('/contacts/', json.dumps(contact), content_type='application/json')\n    \n        contact_id = 9\n        update_json = {\n            'email': 'alexia@alexia.com',\n            'phone_number': '0001237869',\n            'address': '123 Main, St. Peterson Lane, NY 120276',\n        }\n        response = self.client.patch(f'/contacts/{contact_id}/', json.dumps(update_json), content_type='application/json')\n        self.assertEqual(response.status_code, 404)\n>       response_data = json.loads(response.content)\n\ncontact/tests.py:134: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f5d0f9d91f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.010", 
          "id": 7, 
          "name": "test_patch_with_invalid_id"
        }, 
        "6": {
          "status": "NC", 
          "description": "TestCase Failed ", 
          "weight": 1, 
          "total_score": 0.71, 
          "framework": "Django TestCases", 
          "score": 0.0, 
          "is_sample": false, 
          "output": "self = <contact.tests.TestContactModel testMethod=test_patch_with_id>\n\n    def test_patch_with_id(self):\n        self.client.post('/users/', json.dumps(user_alexis), content_type='application/json')\n        contact = self.client.post('/contacts/', json.dumps(contact_by_alexia), content_type='application/json')\n>       contact_data = json.loads(contact.content)\n\ncontact/tests.py:102: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f5d0f9d91f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/usr/lib/python3.8/json/decoder.py:355: JSONDecodeError", 
          "running_time": "0.004", 
          "id": 6, 
          "name": "test_patch_with_id"
        }
      }, 
      "score": 0.0
    }, 
    "jupyter_data": null, 
    "mcq_choice": null, 
    "email": "saihgalakshat@gmail.com"
  }
]